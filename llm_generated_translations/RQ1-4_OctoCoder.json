{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(' ', '')\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    return stdev(numbers) / mean(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    buf = StringIO(paren_string)\n    paren_groups = [line for line in buf]\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = reduce(lambda a, b: a + b, numbers, 0)\n    n_product = reduce(lambda a, b: a * b, numbers, 1)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = deque()\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return list(result)\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[::-1][1:i+1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return reduce(lambda res, c: res + ('0' if c == b[len(res)] else '1'), a, '')\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    a = [i for i in range(n + 1)]\n    return \" \".join(accumulate(a, lambda s, i: s + (s and \" \") + str(i)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(Counter(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = Counter({\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    for i, d in enumerate(digits):\n        num_dict[d] = i\n    num_list = [d for d in numbers if d in num_dict]\n    num_list.sort(key=partial(num_dict.__getitem__, reverse=True))\n    return \" \".join(accumulate(num_list, lambda a, b: a + (a and \" \") + b))\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            int_value = int(value)\n            filtered_values.append(int_value)\n        except (ValueError, TypeError):\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [str for str in strs if str.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i in range(0, len(l), 3):\n        sorted_third.append(l[i])\n    sorted(sorted_third)\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(l[i])\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l.copy()\n    result.sort()\n    result = list(set(result))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            cnt += str_i.count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i in range(0, len(l), 2):\n        sorted_even.append(l[i])\n    sorted_even.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(l[i])\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter()\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in txt:\n        if vowels.find(ch) == -1:\n            result += ch\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = Counter(l1)\n    s2 = Counter(l2)\n    result = []\n    for k, v in s1.items():\n        if k in s2 and v <= s2[k]:\n            result.append(k)\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return reduce(lambda a, c: a + (c if c.isupper() else 0), s, 0)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = list(islice(s.split(), 0, None, 2))\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return good_vals[0] if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    idxs = list(range(len(q)))\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in idxs)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = reduce(lambda acc, s: acc + len(s), lst1, 0)\n    cnt2 = reduce(lambda acc, s: acc + len(s), lst2, 0)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1.0 / 3))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = BitArray(uint=dec, length=32).bin\n    binary = binary.lstrip('0')\n    return f'db{binary}db'\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = reduce(add, map(int, n_str), 0)\n    binary = BitArray(uint=digits_sum, length=32).bin\n    binary = binary.lstrip('0')\n    return binary\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    for word in words:\n        word.sort()\n    return \" \".join(accumulate(words, \"\", lambda a, b: a + (a and \" \") + b))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], a[1]), reverse=True)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = chr(ord(ch) + 4)\n        if shifted > 'z':\n            shifted = chr(ord(shifted) - 26)\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(lst)\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    re = compile(r\"[.!?]\\s*\")\n    sentences = re.split(s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if (type(x) == int and type(y) == int and type(z) == int):\n        int_x = x\n        int_y = y\n        int_z = z\n        if ((int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x)):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_lowercase + ascii_uppercase\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = []\n    copy_if(lst, primes.append, is_prime)\n    if len(primes) == 0:\n        return 0\n    largest = ''.join(map(str, max(primes)))\n    return sum(map(int, largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(all(c.islower() for c in k) for k in d.keys()) or all(all(c.isupper() for c in k) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and vowels.find(s[i])!= -1:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [word for word in split(r\"[, ]\", s) if len(word) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    r_avg = (n + m) / 2.0 + 0.5\n    result = bin(int(r_avg))[2:]\n    result = result.lstrip('0')\n    return result if result else None\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all(digit % 2!= 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(reverse=True)\n    result = [digit_names[x-1] for x in sorted_arr]\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in nums:\n        if i % 2!= 0:\n            result.append(reduce(lambda x, y: x + y, nums[:i]))\n        else:\n            result.append(reduce(lambda x, y: x * y, nums[:i], 1))\n    return result\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[i:] and arr[i:] == sorted_arr[:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        return {k: v for k, v in freq.items() if v == max_freq}\n    return {}\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s\n    s1 = ''.join(filterfalse(lambda ch: c.find(ch)!= -1, s1))\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        rs = rs.replace('i', str(n)[0])\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in accumulate(nums):\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr[:]\n    result.sort(key=cmp_to_key(lambda a, b: count_ones(a) == count_ones(b) and a < b or count_ones(a) < count_ones(b)))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = list(filterfalse(lambda w: count_if(w, lambda c: consonants.find(c.lower())!= -1)!= n, words))\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    sorted_arr = sorted(arr)\n    return sorted_arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            result += lst[i]\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return reduce(lambda a, b: a + (len(str(b)) <= 2 and b or 0), arr[:k], 0)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        return d >= 1 and d <= 31\n    if m == 4 or m == 6 or m == 9 or m == 11:\n        return d >= 1 and d <= 30\n    if m == 2:\n        return d >= 1 and d <= 29\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if'' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return [token for token in StringIO(txt).read().split(',')]\n    else:\n        return [str(sum(1 for c in txt if c.islower() and c % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst:\n        return True\n    freq = Counter(lst)\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 or i == 0 or i == k - 1 or min_val == n * n + 1)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(lambda x, y: x * y, [int(c) for c in str(n) if int(c) % 2 == 1], 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + pow(ceil(n), 2), lst, 0)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return -1 if not idx else max(idx)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if type(o) == str:\n        o_str = o\n        o_str = o_str.replace(',', '.')\n        return float(o_str)\n    elif type(o) == int:\n        return float(o)\n    elif type(o) == float:\n        return o\n    else:\n        raise RuntimeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    result = txt\n    result = re.sub(r\"\\s{3,}\", \"-\", result)\n    result = result.replace(\" \", \"_\")\n    return result\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = []\n    for iss, token in zip(istringstream(file_name), string()):\n        getline(iss, token, '.')\n        lst.append(token)\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    words = [w for w in words if all(c in ascii_lowercase for c in w)]\n    words = [w for w in words if all(w.count(c) == Counter(w)[c] for c in w)]\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=lambda n: digits_sum(n))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + (n >= 0 and n % 2 == 1 else 0), lst, 0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c in ascii_uppercase)\n        lower = sum(1 for c in ext if c in ascii_lowercase)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "ROMAN_VALUES = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\nROMAN_NUMERALS = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\ndef int_to_mini_roman(num: int) -> str:\n    res = \"\"\n    for i in range(len(ROMAN_VALUES)):\n        while num >= ROMAN_VALUES[i]:\n            res += ROMAN_NUMERALS[i]\n            num -= ROMAN_VALUES[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(Counter(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = ''\n    for ch in s:\n        if ch in ascii_letters:\n            result += ch.lower() if ch.isupper() else ch.upper()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        else:\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda s: len(s) > 0)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    return reduce(lambda acc, num: [max(acc[0], num)] + acc, numbers, [int.MinValue])\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(x == y) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 4, {\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = music_string.split(\" \").filter(lambda s: len(s) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int, {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    })\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = reduce(sub, sorted_numbers[i:], sorted_numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        elif ch.isupper():\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(x for i, x in enumerate(l) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for x in str(i) if x == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(x for i, x in enumerate(l) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3])\n            result.append(s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    return median(sorted(l))\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [p for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=(-1,))[0]\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n).replace(\"0b\", \"\")\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    return''.join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(sorted(coords, key=lambda a: a[1]), key=lambda a: a[0], reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) > 1 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(d) for d in largest if d.isdigit())\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and vowels.contains(c))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(accumulate(range(n), lambda x, _: x + 2 * _))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s).filter(lambda w: len(w) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2 + 0.5\n    return bin(int(r_avg))[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [reduce(lambda x, y: x + y, nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(arr) / capacity) for arr in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: w.count(lambda c: consonants.contains(c.lower())) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if (s1.count(\"(\") == s1.count(\")\") or s2.count(\"(\") == s2.count(\")\")) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and \\\n        len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.count() > 0 and reduce(lambda x, y: x * y, odds) or 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(ceil(n), 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return idx[0] if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(is_prime, map(len, words)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result[::-1])\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt is None:\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    hash_bytes = md5(txt_bytes).digest()\n    md5_encoded = \"\".join(format(b, \"x\") for b in hash_bytes)\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(range(lower, upper + 1, 2))\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \").filter(lambda s: s.strip()!= \"\")\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x[0]!= x[1])) for x in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda s: s!= \"\")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(x for i, x in enumerate(l) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(x for i, x in enumerate(l) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter()\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(ch) - 97 - 5) % 26 + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = IterableZip([l, l[1:]])\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(List(range(n + 1)))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = pow(a, 1.0 / 3.0)\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0] == a[1], a[1] - a[0]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(ascii_lowercase[-1]):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) >= 2 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r\"[.!?]\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int)\n        and isinstance(y, int)\n        and isinstance(z, int)\n        and (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message.split():\n        if ch.isalpha():\n            ch1 = ch.upper() if ch == ch.upper() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(int(d) for d in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return not d or all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs() % 10) * (b.abs() % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and vowels.find(c)!= -1])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s).filter(lambda w: len(w) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((m + n) / 2.0 + 0.5).to_integral_value(2)\n    return r_avg.to_bytes(1, 'big').hex()\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(digit) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(list(filter(lambda x: 1 <= x <= 9, arr)), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(n)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if Counter(arr[i:]) == Counter(sorted_arr[:len(arr) - i]) and Counter(arr[:i]) == Counter(sorted_arr[len(arr) - i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([num for num in lst1 if num % 2!= 0])\n    even_cnt = len([num for num in lst2 if num % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k in freq.keys():\n            if freq[k] == max_freq:\n                result[k] = freq[k]\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(curSum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: sum(arr) / capacity, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(\"1\".join(format(num, \"b\")))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").where(lambda w: len(w) > 0).tolist()\n    return words.where(lambda w: len(w.split(\"\").where(lambda c: c.lower() in consonants.lower())) == n).tolist()\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s.split():\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = sorted(arr)\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz.sort()\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.isalpha() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return lst == sorted(lst) and len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(n.abs() for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append((i // 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + ((i + 3) // 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(lambda x, y: x * y, [int(d) for d in str(n) if int(d) % 2 == 1], 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(pow(ceil(n), 2).toInt() for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and compile(r'[a-z]', flags=compile.IGNORECASE).match(last)\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i + 1 for i in range(len(arr) - 1) if arr[i] < arr[i - 1]]\n    return -1 if not idx else max(idx)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", sub(\" \", \"_\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda x: x.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = list(nums)\n    merge_sort(result, compare=lambda a, b: digits_sum(a) - digits_sum(b))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [it for it in lst if len(it) % 2 == 0]\n    result.sort(key=lambda a: (len(a), a))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x[0] - x[1]) for x in zip_longest(game, guess, fillvalue=0)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if math.fabs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk = stk[:len(stk)-1]\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    return statistics.mean(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = []\n    for str in paren_string.split(\" \"):\n        if str!= \"\":\n            paren_groups.append(str)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = 0\n    n_product = 1\n    for n in numbers:\n        n_sum += n\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = math.inf\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for r in s:\n        runes.append(r)\n    for i in range(len(runes)//2):\n        if runes[i]!= runes[-1-i]:\n            return False\n    return True\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            runes = []\n            for r in s[:i]:\n                runes.append(r)\n            for i in range(len(runes)//2):\n                runes[i], runes[-1-i] = runes[-1-i], runes[i]\n            return s + ''.join(runes)\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(\"0\" if a[i] == b[i] else \"1\" for i in range(len(a)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i+1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = []\n    for str in music_string.split(\" \"):\n        if str!= \"\":\n            notes.append(str)\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    strs = re.split(r\"\\s+\", numbers)\n    num_list = []\n    for str in strs:\n        num_list.append(str)\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = math.inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = math.inf\n    max_num = math.inf\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    res = []\n    if min_num == max_num:\n        return res\n    else:\n        for num in numbers:\n            res.append((num - min_num) / (max_num - min_num))\n        return res\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [str for str in strs if str.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(sqrt(n)) + 1))\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i, x_i in enumerate(xs):\n        res += float(x_i) * math.pow(x, float(i))\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            sorted_third.append(x)\n    result = [None] * len(l)\n    sort.sort(sorted_third)\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result[i] = sorted_third[i // 3]\n        else:\n            result[i] = x\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return list(collections.OrderedDict.fromkeys(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if len(l) > 0 else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            sorted_even.append(x)\n    result = [0] * len(l)\n    sort.ints(sorted_even)\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result[i] = sorted_even[i // 2]\n        else:\n            result[i] = x\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(math.pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    return statistics.median(l)\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 5) % 26 + 97)\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 21) % 26 + 97)\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x > 0 for x in diff) or all(x < 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    result = []\n    for num in l2:\n        if num in s1:\n            result.append(num)\n            s1.remove(num)\n    heapq.heapify(result)\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    for _ in range(n - 1):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiouy\"\n    return sum(1 for c in s if c.lower() in vowels)\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        runes = list(x_str)\n        for i, j in range(0, len(runes)-1):\n            runes[i], runes[j] = runes[j], runes[i]\n        return ''.join(runes)\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    a = 0\n    for c in s:\n        if c.isupper():\n            a += int(c)\n    return a\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = 0\n    oranges = 0\n    for i, word in enumerate(words):\n        if word == \"apples\":\n            apples = int(words[i - 1])\n        if word == \"oranges\":\n            oranges = int(words[i - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    min_even = math.inf\n    min_idx = -1\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n            min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_even, min_idx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    max_val = math.inf\n    for k, v in freqs.items():\n        if v >= k and k > max_val:\n            max_val = k\n    return -1 if max_val == math.inf else max_val\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    random.shuffle(sl)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    for i in range(len(q)):\n        if q[i]!= q[len(q) - i - 1]:\n            is_palin = False\n            break\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    return sum(1 for i in range(len(arr) // 2) if arr[i]!= arr[len(arr) - i - 1])\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(b) for b in lst1)\n    cnt2 = sum(len(b) for b in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(sqrt(n)) + 1))\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    while a > 1:\n        if is_prime(a):\n            cnt += 1\n            a /= a\n        else:\n            return cnt == 3\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n if n < 2 else x == n ** (x // n)\n",
            "def is_cube(a: int) -> bool:\n    return math.isclose(a ** (1 / 3), int(a ** (1 / 3)))\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    return len(s) < 3 or any(s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2] for i in range(len(s)-2))\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * int(pow(10, n-2))\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(d) for d in str(n)))[2:]\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i, word in enumerate(words):\n        chars = list(word)\n        chars.sort(key=lambda c: string.ascii_lowercase.index(c))\n        words[i] = \"\".join(chars)\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    heapq.heapify(coords)\n    heapq.heapify(coords)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    tmp = sorted(lst)\n    sl = []\n    for i in range(len(tmp)):\n        if i == 0 or tmp[i]!= tmp[i - 1]:\n            sl.append(tmp[i])\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == \"I \":\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x + y == z) or (x + z == y) or (y + z == x)\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = string.ascii_letters.upper() + string.ascii_letters.lower()\n    result = \"\"\n    for ch in message:\n        if ch in vowels:\n            ch1 = chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) - 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    max_prime = 0\n    for n in lst:\n        if is_prime(n) and n > max_prime:\n            max_prime = n\n    if max_prime == 0:\n        return 0\n    largest = str(max_prime)\n    result = 0\n    for d in largest:\n        result += int(d)\n    return result\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    lower, upper = True, True\n    for k, _ in d.items():\n        for r in k:\n            if not unicodedata.category(r) == \"Ll\":\n                lower = False\n            if not unicodedata.category(r) == \"Lu\":\n                upper = False\n    return lower or upper\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        flag = True\n        for p in primes:\n            if num % p == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[,]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = math.floor((n + m) / 2.0 + 0.5)\n    result = bin(r_avg)[2:]\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if re.match(r'^[13579]$', str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for x in arr:\n        if 1 <= x and x <= 9:\n            sorted_arr.append(x)\n    sorted_arr.sort(reverse=True)\n    result = []\n    for x in sorted_arr:\n        result.append(digit_names[x - 1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in nums:\n        if i % 2!= 0:\n            sum = 0\n            for j in nums[:i]:\n                sum += j\n            result.append(sum)\n        else:\n            product = 1\n            for j in nums[:i]:\n                product *= j\n            result.append(product)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for c in s:\n        runes.append(c)\n    for i in range(len(runes) // 2):\n        if runes[i]!= runes[len(runes) - 1 - i]:\n            return False\n    return True\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for d in n_str:\n            d_int = int(d)\n            acc += d_int\n        return acc\n    else:\n        neg = int(n_str[0:2])\n        return neg * 2 + digits_sum(int(abs(float(n))))\ndef count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for n in arr:\n        if digits_sum(n) > 0:\n            cnt += 1\n    return cnt\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = copy.deepcopy(arr)\n    sort.sort(sorted_arr)\n    for i in range(len(arr)):\n        if reflect.DeepEqual(arr[i:], sorted_arr[:len(arr) - i]) and reflect.DeepEqual(arr[:i], sorted_arr[len(arr) - i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1:\n        if num % 2!= 0:\n            odd_cnt += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_cnt += 1\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for ch in s:\n        if ch in string.ascii_letters:\n            runes.append(ch.lower())\n    for i in range(len(runes)//2):\n        if runes[i]!= runes[len(runes)-1-i]:\n            return False\n    return True\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\"\n    for ch in s:\n        if ch not in c:\n            s1 += ch\n    check = \"no\"\n    if is_palindrome(s1):\n        check = \"yes\"\n    return [s1, check]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        if cur_sum + n > 0:\n            cur_sum = 0\n        else:\n            cur_sum += n\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = math.inf\n        for n in nums:\n            if n < min_sum:\n                min_sum = n\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(min(capacity, sum(row)) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return num.bit_count()\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: (count_ones(x), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = string.ascii_lowercase[10:36]\n    words = s.split()\n    result = []\n    for w in words:\n        count = 0\n        for c in w:\n            if c.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr.copy()\n    heapq.heapify(result)\n    for _ in range(len(arr) - k):\n        heapq.heappop(result)\n    return result\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2!= 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    heapq.heapify(collatz)\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m, _ = int(date[:2]), 0\n    d, _ = int(date[3:5]), 0\n    for i in [1, 3, 5, 7, 8, 10, 12]:\n        if i == m and d >= 1 and d <= 31:\n            return True\n    for i in [4, 6, 9, 11]:\n        if i == m and d >= 1 and d <= 30:\n            return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        cnt = 0\n        for c in txt:\n            if c.islower() and int(c) % 2 == 0:\n                cnt += 1\n        return [str(cnt)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if len(lst) == 0:\n        return True\n    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    max_freq = 0\n    for v in freq.values():\n        if v > max_freq:\n            max_freq = v\n    return max_freq <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    result = 0\n    for n in arr:\n        if n == 0:\n            return result\n    sign = 1\n    for n in arr:\n        if n < 0:\n            sign *= -1\n        result += int(abs(n))\n    result = sign * result\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return 0 if re.search(r'[^02468]$', str(n)) else int(re.sub(r'[^0-9]', '', str(n)))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(math.pow(math.ceil(n), 2)) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and txt[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    if len(idx) == 0:\n        return -1\n    max_idx = idx[0]\n    for i in idx:\n        if i > max_idx:\n            max_idx = i\n    return max_idx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    max_neg, min_pos = None, None\n    for n in lst:\n        if n < 0:\n            if max_neg is None or n > max_neg:\n                max_neg = n\n        if n > 0:\n            if min_pos is None or n < min_pos:\n                min_pos = n\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n%2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or len(lst[0]) == 0 or not lst[0][0].isalpha():\n        return \"No\"\n    found = False\n    for s in suf:\n        if s == lst[1]:\n            found = True\n            break\n    if not found:\n        return \"No\"\n    digit_cnt = 0\n    for ch in lst[0]:\n        if ch.isdigit():\n            digit_cnt += 1\n    if digit_cnt > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += int(math.pow(e, 2))\n        elif i % 4 == 0:\n            result += int(math.pow(e, 3))\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(math.floor(math.sqrt(n))) + 1))\ndef words_in_sentence(sentence: str) -> str:\n    words = []\n    for word in sentence.split(\" \"):\n        if is_prime(len(word)):\n            words.append(word)\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num0, _ = int(xs[0]), 1\n    den0, _ = int(xs[1]), 1\n    num1, _ = int(ns[0]), 1\n    den1, _ = int(ns[1]), 1\n    return (num0 * num1) % (den0 * den1) == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for d in n_str:\n            d_int = int(d)\n            acc += d_int\n        return acc\n    else:\n        neg = int(n_str[0:2])\n        return neg * 2 + digits_sum(int(math.fabs(n)))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=lambda n: digits_sum(n))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and any(c in odds for c in str(n)[0]):\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    return sorted(lst, key=functools.cmp_to_key(lambda a, b: (len(a) == len(b)) - (len(a) < len(b))))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and int(n) % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [int(math.fabs(game[x] - guess[x])) for x in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = math.inf\n    max_ext = \"\"\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for c in ext:\n            if unicodedata.category(c) == \"Lu\":\n                upper += 1\n            elif unicodedata.category(c) == \"Ll\":\n                lower += 1\n        s = upper - lower\n        if s < max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    return len(a) >= len(b) and b in a + a\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = 0\n        freq = {}\n        for c in w:\n            if c not in freq:\n                freq[c] = True\n                cnt += 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + min(need, remaining), max(0, remaining - need)]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(math.pow(nums[i], nums[i + 1]))\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    flag = False\n    for ch in s:\n        if ch in string.ascii_letters:\n            flag = True\n            break\n    if not flag:\n        runes = list(s)\n        for i in range(len(runes)):\n            runes[i] = runes[len(runes)-1-i]\n        return ''.join(runes)\n    result = ''\n    for ch in s:\n        if ch in string.ascii_letters:\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.remove(stk[-1])\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [s for s in paren_string.split(\" \") if len(s) > 0]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = reduce(lambda x, y: max(x, y), numbers, -float('inf'))\n    return [max_so_far] + [max(max_so_far, num) for num in numbers[1:]]\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(a[i]!= b[i])) for i in range(len(a)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, accumulate(range(n + 1))))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 0, {\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = [s for s in music_string.split(\" \") if len(s) > 0]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int, {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    })\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        elif ch.isupper():\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(islice(filter(lambda i: i % 3 == 0, range(len(l))), 0, None, 3))\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return reduce(lambda x, y: x if x > y else y, l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda i: i % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter()\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if vowels.find(c) == -1)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip_longest(l, l[1:], fillvalue=0)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(islice(map(lambda i: i * xs[i], range(1, len(xs))), len(xs) - 1))\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        tmp = a + b + c\n        a = b\n        b = c\n        c = tmp\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = (k for k in freqs.keys() if freqs[k] >= k)\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(c) for c in str(n)))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(i for i in islice(takewhile(lambda i: i % 2 == 1 and lst[i] % 2 == 0, range(len(lst))), 1, None))\n",
            "def anti_shuffle(s: str) -> str:\n    words = [\"\".join(g) for _, g in groupby(sorted(s), lambda c: c == \" \")]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0] == coords[0][0], a[1] - coords[0][1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for c in s:\n        shifted = ord(c) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) > 1 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if vowels.find(ch1)!= -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        num0 = num\n        if all(num0 % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and vowels.contains(s[i]))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(starmap(lambda i, n: n + 2 * i, enumerate(range(n))))\n",
            "def words_string(s: str) -> List[str]:\n    return list(filterfalse(lambda w: len(w) == 0, s.split(\"[, ]\")))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((m + n) / 2.0 + 0.5)\n    return bin(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2!= 0 for digit in map(int, s))\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x and x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [reduce(lambda x, y: x + y, nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for entry in freq.items():\n            if entry[1] == max_freq:\n                result[entry[0]] = entry[1]\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(ch for ch in s if ch not in c)\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(accumulate(lst[::2], lambda x, y: x + y) if i % 2 == 0 and lst[i] % 2!= 0 else 0 for i in range(len(lst)))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and ord(c) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and Counter(lst).most_common(1)[0][1] <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = deque()\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [d for d in str(n) if int(d) % 2 == 1]\n    return reduce((x, y) -> x * y, map(int, odds), 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n ** 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise RuntimeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(n.toString()[0])!= -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    return sorted(filter(lambda s: len(s) % 2 == 0, lst), key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result[::-1])\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    try:\n        md5_hash = md5(txt.encode())\n        hash_bytes = md5_hash.digest()\n        md5_encoded = \"\"\n        for b in hash_bytes:\n            md5_encoded += format(b & 0xff, \"02x\")\n        return md5_encoded\n    except Exception:\n        return None\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(chain(range(lower, upper + 1), filter(lambda n: n % 2 == 0, range(lower, upper + 1))))\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(num - mean) for num in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda s: s.length > 0)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(c) ^ int(d)) for c, d in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda s: len(s) > 0)\n    return notes.map(lambda note: durations[note])\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.isalpha():\n            flipped.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            flipped.append(ch)\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda x: x % 3 == 0, l))\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - l[i] for i, x in enumerate(l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n or x % n == 0\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f'db{dec:b}db'\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return ''.join(str(int(d)) for d in str(bin(n))[2:])\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [word.split('').sort().join('') for word in words]\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0] == a[1], a[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) > 1 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int) and\n        isinstance(y, int) and\n        isinstance(z, int) and\n        (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch == ch.lower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum([int(c) for c in largest])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[,]\").filter(lambda w: len(w) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2.0 + 0.5)\n    return bin(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([n for n in lst1 if n % 2!= 0])\n    even_cnt = len([n for n in lst2 if n % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split(\" \"))\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(*nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: sum(arr) // capacity + 1, grid))\n",
            "def count_ones(num: int) -> int:\n    return num.bit_length() - 1\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: len([c for c in w if c.lower() in consonants]) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.isalpha() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and \\\n        max(lst.count(i) for i in set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds and reduce(lambda a, b: a * b, odds) or 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n ** 2), map(lambda n: math.ceil(n), lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    if isinstance(o, (int, float)):\n        return o\n    raise TypeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for ch in lst[0] if ch.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = len([d for d in str(ds) if ord(d) % 2 == 0])\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + min(need, remaining), max(0, remaining - need)]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(it - mean) for it in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda it: it.is_not_empty())\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for i in numbers:\n        n_product *= i\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -2147483648\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(x if x == y else \"1\" for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda it: it!= \"\")\n    return list(map(lambda it: durations[it], notes))\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, len(s) - len(substring)):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(n - min_num) / (max_num - min_num) for n in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda it: it > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n.toDouble())) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda x: x % 3 == 0, l))\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(0, n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3])\n            result.append(s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n.toDouble())) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [((ord(c) - 97 + 5) % 26 + 97).to_bytes(1, \"little\") for c in s]\n    return b\"\".join(result).decode()\ndef decode_shift(s: str) -> str:\n    result = [((ord(c) - 97 + 21) % 26 + 97).to_bytes(1, \"little\") for c in s]\n    return b\"\".join(result).decode()\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(it < t for it in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(d <= 0 for d in diff) or all(d >= 0 for d in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    while n % 2 == 0:\n        n /= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 2\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals.keys(), default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(x) for x in lst1)\n    cnt2 = sum(len(x) for x in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([c for c in num if c in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return bin(n).replace(\"0b\", \"\")\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join(word.join(sorted(word)) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda c: (c[1], c[0]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) > 1 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r\"([.!?]\\s*)\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int)\n        and isinstance(y, int)\n        and isinstance(z, int)\n        and (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest if c.isdigit())\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or (all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and vowels.contains(c))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(floor(num + 0.5)) if num >= 0 else int(ceil(num - 0.5))\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\", \")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) / 2 + 0.5\n    return str(bin(r_avg))[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda it: all(ord(c) % 2!= 0 for c in str(it)), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda it: 1 <= it and it <= 9, arr), reverse=True)\n    return list(map(lambda it: digit_names[it - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i + 1]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i + 1]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for e in arr if digits_sum(e) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for e in lst1 if e % 2!= 0)\n    even_cnt = sum(1 for e in lst2 if e % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(lambda w: len(w) > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for kv in freq:\n            if kv[1] == max_freq:\n                result[kv[0]] = kv[1]\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if int(c) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return num.bit_count()\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda it: len(it) > 0)\n    return words.filter(lambda it: len(it.filter(lambda c: consonants.contains(c.lower()))) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(e for e in arr[:k] if len(str(e)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.lower().count(c) for c in txt if c.islower() and c.isdigit() and int(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and \\\n        len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n.toDouble())) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(lambda it: it < 0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(i) for i in str(n) if int(i) % 2 == 1]\n    return odds[0] * odds[1] if len(odds) > 1 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(ceil(e).pow(2) for e in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise Exception(\"Unknown type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n.toDouble())) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(is_prime, map(len, words)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].toInt() * ns[0].toInt()\n    den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    result.sort(key=lambda e: (len(e), e))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(i * i for i in lst if i >= 0 and i % 2 == 1.0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num).to_string()\n    even = 0\n    for c in ds:\n        if c.to_int() % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.lower() if ch.isupper() else ch.upper()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode()\n    md5_hash = md5(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [it for it in range(lower, upper + 1) if it % 2 == 0]\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [s for s in paren_string.split(\" \") if len(s) > 0]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [note for note in music_string.split(\" \") if len(note) > 0]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [\n            (num - min_num) / (max_num - min_num)\n            for num in numbers\n        ]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [str for str in strs if str.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [i for i in l if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else i for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += (str(i).count(\"7\"))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [i for i in l if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else i for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: char not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return len([x for x in l if x < t]) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = set(s0)\n    set1 = set(s1)\n    return sorted(set0) == sorted(set1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l[:-1], l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs, range(1, len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = words.index('apples') - 1\n    oranges = words.index('oranges') - 1\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals.keys() or [-1])\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = len(list(filter(lambda i: q[i] == q[len(q) - i - 1], range(len(q))))) == len(q)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(set(num) & set(\"2357BD\"))\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(c) for c in str(n)))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(v for k, v in enumerate(lst) if k % 2 == 1 and v % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [\"\".join(sorted(word)) for word in s.split(\" \")]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0] == a[1], a[1] - a[0]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\n            (x + y == z or x + z == y or y + z == x))\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(is_prime, lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or (len(list(filter(lambda k: k.islower(), d.keys()))) == len(d) or len(list(filter(lambda k: k.isupper(), d.keys()))) == len(d))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if len(list(filter(lambda p: num % p!= 0, primes))) == len(primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for c, i in zip(s, range(len(s))) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(0, n - 1)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[,]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int(round((n + m) / 2))\n    return bin(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda x: all(ord(digit) % 2!= 0 for digit in str(x)), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i], 1) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if ord(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: ceil(sum(arr) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    result.sort(key=lambda x: (count_ones(x), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr.copy()\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(v for v, k in enumerate(lst) if k % 2 == 0 and v % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower() and ord(c) % 2 == 0, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(i <= j for i, j in zip(lst, lst[1:])) and len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1\n    return sign * sum(map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return 0 if n == 0 else int(str(n).rstrip('0')[0]) * int(str(n).rstrip('0')[1])\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(pow(ceil(n), 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and txt[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx + [-1])\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise RuntimeError(\"Unknown type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= factorial(fact)\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(str.isdigit, lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums\n    result.sort(key=lambda n: digits_sum(n))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and str(n)[0] in odds, nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [x for x in lst if len(x) % 2 == 0]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in filter(lambda n: n >= 0 and n % 2 == 1, lst))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -2147483648\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len(re.sub(r'[^A-Z]', '', ext))\n        lower = len(re.sub(r'[^a-z]', '', ext))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + min(need, remaining), max(0, remaining - need)]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result[::-1] if result.isalpha() else result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(filter(lambda i: i % 2 == 0, range(lower, upper)))\n"
        ]
    },
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    string current_group;\n    stack<char> stk;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double deviation = 0.0;\n    for (double x : numbers) {\n        deviation += abs(x - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i!= 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    vector<int> depths;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            depths.push_back(depths.empty()? 1 : depths.back() + 1);\n        } else {\n            depths.pop_back();\n        }\n    }\n    result.reserve(depths.size());\n    for (int depth : depths) {\n        result.push_back(depth);\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(substring)!= string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    vector<int> result;\n    int max_so_far = INT_MIN;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& s) {\n    return s == s.substr(0, s.size() / 2);\n}\nstring makePalindrome(const string& s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); ++i) {\n        if (isPalindrome(s.substr(i))) {\n            return s + s.substr(0, i)[::-1];\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i])? \"0\" : \"1\";\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (const string& s : strs) {\n        if (s.size() > longest_s.size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    while (b!= 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    string result;\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\n",
            "int countDistinctCharacters(const string& s) {\n    set<char> distinct_chars;\n    for (char c : s) {\n        distinct_chars.insert(tolower(c));\n    }\n    return distinct_chars.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    vector<int> durations = {4, 2, 1};\n    vector<int> notes;\n    for (char note : music_string) {\n        notes.push_back(durations[note - 'o']);\n    }\n    return notes;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i <= s.size() - substring.size(); ++i) {\n        if (s.substr(i, substring.size()) == substring) {\n            ++times;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    vector<string> num_list;\n    for (const string& num : numbers.split(\" \")) {\n        if (num == \"zero\" || num == \"one\" || num == \"two\" || num == \"three\" ||\n            num == \"four\" || num == \"five\" || num == \"six\" || num == \"seven\" ||\n            num == \"eight\" || num == \"nine\") {\n            num_list.push_back(num);\n        }\n    }\n    sort(num_list.begin(), num_list.end(), [](const string& a, const string& b) {\n        return a == \"zero\"? 0 : a == \"one\"? 1 : a == \"two\"? 2 : a == \"three\"? 3 :\n               a == \"four\"? 4 : a == \"five\"? 5 : a == \"six\"? 6 : a == \"seven\"? 7 :\n               a == \"eight\"? 8 : a == \"nine\"? 9 : 0;\n    });\n    return join(num_list, \" \");\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers(numbers);\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); i++) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        return vector<double>(numbers.size(),\n            (numbers[i] - min_num) / (max_num - min_num));\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const any& x : values) {\n        if (const int* p = any_cast<int>(&x)) {\n            result.push_back(*p);\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    for (int divisor = 2; divisor <= n; divisor++) {\n        while (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    vector<int> res;\n    unordered_set<int> seen;\n    for (int num : numbers) {\n        if (seen.count(num) == 0) {\n            res.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (const string& s : strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.startswith(prefix_str)) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); ++i) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third(l.size() / 3);\n    copy(l.begin(), l.begin() + l.size() / 3 * 3, sorted_third.begin());\n    sort(sorted_third.begin(), sorted_third.end());\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = sorted_third[i / 3];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    vector<int> result(l);\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    return *max_element(l.begin(), l.end());\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += to_string(i).count(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even(l.size() / 2);\n    for (int i = 0; i < l.size(); i += 2) {\n        sorted_even[i / 2] = l[i];\n    }\n    sort(sorted_even.begin(), sorted_even.end());\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); i += 2) {\n        result[i] = sorted_even[i / 2];\n        result[i + 1] = l[i + 1];\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    vector<int> f = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f = {f[1], f[0] + f[1]};\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); ++i) {\n        for (int j = i + 1; j < l.size(); ++j) {\n            for (int k = j + 1; k < l.size(); ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    string result;\n    while (x > 0) {\n        result += to_string(x % bas);\n        x /= bas;\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl(l);\n    sort(sl.begin(), sl.end());\n    if (l.size() % 2!= 0) {\n        return sl[l.size() / 2];\n    } else {\n        return (sl[l.size() / 2] + sl[l.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return equal(txt.begin(), txt.end(), txt.rbegin());\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(ch + 5);\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(ch + 21);\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char c : txt) {\n        if (vowels.find(c) == string::npos) {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    return set<char>(s0) == set<char>(s1);\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    vector<int> diff(l.size() - 1);\n    for (int i = 0; i < l.size() - 1; ++i) {\n        diff[i] = l[i + 1] - l[i];\n    }\n    return all_of(diff.begin(), diff.end(), [](int x) { return x <= 0; }) ||\n           all_of(diff.begin(), diff.end(), [](int x) { return x >= 0; });\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    int cnt = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s.back()!= 'y')) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return x_str.substr(0, x_str.length() - shift) + x_str.substr(x_str.length() - shift, shift);\n    } else {\n        return x_str.substr(x_str.length() - shift, shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    return accumulate(s.begin(), s.end(), 0, [](int sum, char c) {\n        return sum + (c >= 'A' && c <= 'Z');\n    });\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    vector<string> words = split(s,'');\n    int apples = stoi(words[find(words, \"apples\") - 1]);\n    int oranges = stoi(words[find(words, \"oranges\") - 1]);\n    return n - apples - oranges;\n}\nvector<string> split(const string& s, char delimiter) {\n    vector<string> result;\n    stringstream ss(s);\n    string item;\n    while (getline(ss, item, delimiter)) {\n        result.push_back(item);\n    }\n    return result;\n}\nint find(const vector<string>& v, const string& s) {\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == s) {\n            return i;\n        }\n    }\n    return -1;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return {};\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    return {min_even, find(arr.begin(), arr.end(), min_even) - arr.begin()};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (const auto& [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    return good_vals.empty()? -1 : *max_element(good_vals.begin(), good_vals.end());\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = all_of(q.begin(), q.end(), [=](int x) { return x == q.back(); });\n    int total = accumulate(q.begin(), q.end(), 0);\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i]!= arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0, cnt2 = 0;\n    for (const string& s : lst1) {\n        cnt1 += s.size();\n    }\n    for (const string& s : lst2) {\n        cnt2 += s.size();\n    }\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= a; ++i) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = round(pow(a, 1.0 / 3.0));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    return count_if(num.begin(), num.end(), [](char c) { return c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'; });\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = bitset<32>(dec).to_string();\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    unordered_set<int> seen;\n    while (true) {\n        int sum = 0;\n        for (char c : s) {\n            sum += c - '0';\n            sum *= c - '0';\n        }\n        if (sum == 1) {\n            return true;\n        }\n        if (seen.count(sum)) {\n            return false;\n        }\n        seen.insert(sum);\n        s = to_string(sum);\n    }\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}\n",
            "string solve(int n) {\n    string digits_sum = to_string(n);\n    for (char& d : digits_sum) {\n        d -= '0';\n    }\n    return bitset<32>(accumulate(digits_sum.begin(), digits_sum.end(), 0)).to_string();\n}\n",
            "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    istringstream iss(s);\n    for (string word; iss >> word;) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); ++i) {\n        sort(words[i].begin(), words[i].end());\n    }\n    ostringstream oss;\n    for (int i = 0; i < words.size(); ++i) {\n        oss << words[i] << \" \";\n    }\n    return oss.str();\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr[0] + arr.back()) % 2 == 0) {\n        return {arr.rbegin(), arr.rend()};\n    } else {\n        return {arr.begin(), arr.end()};\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        int shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += shifted;\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl(lst.size());\n    copy(lst.begin(), lst.end(), sl.begin());\n    sort(sl.begin(), sl.end());\n    if (sl.size() < 2) {\n        return nullopt;\n    }\n    return sl[1];\n}\n",
            "int isBored(const string& s) {\n    regex sentence_regex(R\"(\\s*([.!?])\\s*(?:I\\s+)?(.*))\");\n    smatch sentence_match;\n    int bored_count = 0;\n    for (const auto& sentence : regex_iterator(s, sentence_regex)) {\n        if (sentence_match.size() == 3 && sentence_match[2].length() >= 2) {\n            bored_count += sentence_match[1] == \".\";\n        }\n    }\n    return bored_count;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    return (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int) &&\n            (x.as<int>() + y.as<int>() == z.as<int>() || x.as<int>() + z.as<int>() == y.as<int>() ||\n             y.as<int>() + z.as<int>() == x.as<int>()));\n}\n",
            "string encode(const string& message) {\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = toupper(ch) if islower(ch) else tolower(ch);\n            if (ch1 == 'A' || ch1 == 'E' || ch1 == 'I' || ch1 == 'O' || ch1 == 'U') {\n                ch1 = ch1 + 2;\n            }\n            result.push_back(ch1);\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (isPrime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    string largest = to_string(max(primes));\n    int sum = 0;\n    for (char digit : largest) {\n        sum += digit - '0';\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    return all_of(d.begin(), d.end(), [](const pair<string, string>& p) {\n        return p.first.islower() || p.first.isupper();\n    });\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num <= n; ++num) {\n        bool is_prime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n",
            "int countUpper(const string& s) {\n    int vowels = \"AEIOU\";\n    return accumulate(s.begin(), s.end(), 0,\n        [vowels](int count, char c) { return count + (c in vowels); });\n}\n",
            "int closestInteger(const string& value) {\n    return int(stof(value) + 0.5);\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    regex re(\"[, ]\");\n    vector<string> result;\n    for (string w : regex_split(re, s)) {\n        if (w.size() > 0) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if (x!= y) else -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = (m + n) / 2 + 0.5;\n    return to_string(r_avg, 2);\n}\n",
            "bool allDigitsOdd(const string& s) {\n    return all_of(s.begin(), s.end(), [](char c) { return c % 2!= 0; });\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    return sort(x.begin(), x.end(),\n                [](int num) { return allDigitsOdd(to_string(num)); });\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    for (int x : arr) {\n        if (1 <= x <= 9) {\n            sorted_arr.push_back(x);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    for (int x : sorted_arr) {\n        result.push_back(digit_names[x-1]);\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        nums[i] = i + 1;\n    }\n    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = nums[i] * (i % 2!= 0? 1 : nums[i - 1]);\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == txt.substr(0, txt.size() / 2);\n}\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(to_string(i))) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int a, char b) { return a + b - '0'; });\n    } else {\n        return stoi(n_str.substr(0, 2)) * 2 + digitsSum(abs(n));\n    }\n}\nint countNums(const vector<int>& arr) {\n    return count_if(arr.begin(), arr.end(), [](int n) { return digitsSum(n) > 0; });\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr.begin() + i == lower_bound(sorted_arr.begin(), sorted_arr.end(), arr[i]) &&\n            arr.begin() + i == upper_bound(sorted_arr.begin(), sorted_arr.end(), arr[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2!= 0) {\n            odd_cnt++;\n        }\n    }\n    int even_cnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return even_cnt >= odd_cnt? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words = split(test, \" \");\n    for (string w : words) {\n        if (w.size() > 0) {\n            freq[w] = freq.get(w, 0) + 1;\n        }\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = *max_element(freq.values());\n        for (const auto& [k, v] : freq) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& s) {\n    return s == s.substr(0, s.size() / 2);\n}\nvector<string> reverseDelete(const string& s, const string& c) {\n    string s1;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, isPalindrome(s1)? \"yes\" : \"no\"};\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            n += d % 2 == 1;\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(\"i\", to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    return accumulate(grid.begin(), grid.end(), 0,\n        [](int sum, const vector<int>& arr) {\n            return sum + ceil(accumulate(arr.begin(), arr.end(), 0) / capacity);\n        });\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num & 1) {\n            count++;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nvector<int> sortArray(const vector<int>& arr) {\n    return sort(arr.begin(), arr.end(), [](int a, int b) {\n        return countOnes(a) < countOnes(b) || (countOnes(a) == countOnes(b) && a < b);\n    });\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    vector<string> words = split(s, \" \");\n    vector<string> result;\n    for (string w : words) {\n        if (w.size() > 0) {\n            int consonants = 0;\n            for (char c : w) {\n                if (islower(c) && c >= 'a' && c <= 'z') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.push_back(w);\n            }\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i >= 0; i--) {\n        if (word[i] == vowels[0] && word[i - 1]!= vowels[0] && word[i + 1]!= vowels[0]) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nstring matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return check(s1) || check(s2)? \"Yes\" : \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    return vector<int>(arr.end() - k, arr.end());\n}\n",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2!= 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n        if (len(to_string(arr[i])) <= 2) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz;\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.size()!= 10 || date[2]!= '-' || date[5]!= '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    if (txt.find(\" \")!= string::npos) {\n        return split(txt, \" \");\n    } else if (txt.find(\",\")!= string::npos) {\n        return split(txt, \",\");\n    } else {\n        vector<string> result;\n        result.push_back(to_string(count_if(txt.begin(), txt.end(), [](char c) {\n            return c.islower() && (int)c % 2 == 0;\n        })));\n        return result;\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i] = freq.get(i, 0) + 1;\n    }\n    return *max_element(freq.begin(), freq.end(),\n                       [](const pair<int, int>& p1, const pair<int, int>& p2) {\n                           return p1.second < p2.second;\n                       }) <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return isPrime(length)? \"YES\" : \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    int sign = -1 if count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 else 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int a, int b) { return a + abs(b); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i!= 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j!= 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i!= n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j!= n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(temp);\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(1 if i % 2 == 0 else min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    int result = 1;\n    while (n > 0) {\n        int d = n % 10;\n        if (d % 2 == 1) {\n            result *= d;\n        }\n        n /= 10;\n    }\n    return result;\n}\n",
            "bool isNested(const string& s) {\n    int open_cnt = 0, close_cnt = 0;\n    for (char ch : s) {\n        if (ch == '[') {\n            open_cnt++;\n        } else if (ch == ']') {\n            close_cnt++;\n        }\n        if (open_cnt == close_cnt) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](int sum, double n) {\n        return sum + ceil(n) * ceil(n);\n    });\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    int last_space_index = txt.rfind(' ');\n    if (last_space_index == string::npos) {\n        return false;\n    }\n    return txt.size() - last_space_index - 1 == 1 && isalpha(txt[last_space_index + 1]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    int n = arr.size();\n    if (n <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return idx.empty()? -1 : *max_element(idx.begin(), idx.end());\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg, pos;\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n    optional<int> max_neg = neg.empty()? nullopt : *max_element(neg.begin(), neg.end());\n    optional<int> min_pos = pos.empty()? nullopt : *min_element(pos.begin(), pos.end());\n    return {max_neg, min_pos};\n}\n",
            "optional<double> compareOne(any a, any b) {\n    if (a.type() == typeid(string)) {\n        return stod(any_cast<string>(a).replace(',', '.'));\n    } else if (a.type() == typeid(int)) {\n        return stod(to_string(any_cast<int>(a)));\n    } else if (a.type() == typeid(double)) {\n        return any_cast<double>(a);\n    }\n    throw runtime_error(\"Type Error\");\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1, result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(regex_replace(txt, regex(R\"(\\s{3,})\"), \"-\"), regex(\" \"), \"_\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    string suf[] = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst = split(file_name, '.');\n    if (lst.size()!= 2 ||!lst[1] in suf || lst[0].empty() ||!lst[0][0].isalpha() || count_if(lst[0].begin(), lst[0].end(), isdigit) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nvector<string> split(const string& s, char delim) {\n    vector<string> result;\n    stringstream ss(s);\n    string item;\n    while (getline(ss, item, delim)) {\n        result.push_back(item);\n    }\n    return result;\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    vector<string> words = split(sentence, \" \");\n    return join(filter(words, isPrime), \" \");\n}\n",
            "bool simplify(const string& x, const string& n) {\n    vector<string> xs = split(x, \"/\");\n    vector<string> ns = split(n, \"/\");\n    int num = stoi(xs[0]) * stoi(ns[0]);\n    int den = stoi(xs[1]) * stoi(ns[1]);\n    return num % den == 0;\n}\nvector<string> split(const string& s, const string& delimiter) {\n    vector<string> result;\n    size_t pos = 0;\n    while (true) {\n        size_t next_pos = s.find(delimiter, pos);\n        if (next_pos == string::npos) {\n            result.push_back(s.substr(pos));\n            break;\n        }\n        result.push_back(s.substr(pos, next_pos - pos));\n        pos = next_pos + delimiter.size();\n    }\n    return result;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int a, char b) { return a + (int)b - 48; });\n    } else {\n        return (int)n_str[0] * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    return sort(nums.begin(), nums.end(), [](int a, int b) { return digitsSum(a) < digitsSum(b); });\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    int odds = \"13579\";\n    return count_if(nums.begin(), nums.end(),\n                    [odds](int n) { return n > 10 && n % 2 == 1 && to_string(n)[0] in odds; });\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = find(names.begin(), names.end(), planet1) - names.begin();\n    int r = find(names.begin(), names.end(), planet2) - names.begin();\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        return a.size() < b.size() || (a.size() == b.size() && a < b);\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext;\n    for (const string& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                upper++;\n            } else if (c >= 'a' && c <= 'z') {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.size() < b.size()) {\n        return false;\n    }\n    for (int i = 0; i < b.size(); ++i) {\n        string s = b.substr(i) + b.substr(0, i);\n        if (s.find(a)!= string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if (d % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    string res;\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    for (int i = 0; i < values.size(); ++i) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    vector<int> s = {a, b, c};\n    sort(s.begin(), s.end());\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    string max_w = words[0];\n    int max_cnt = 0;\n    for (const string& w : words) {\n        int cnt = 0;\n        for (char c : w) {\n            if (w.find(c)!= w.rfind(c)) {\n                cnt++;\n            }\n        }\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<int> nums = operands;\n    for (int i = operators.size() - 1; i >= 0; i--) {\n        if (operators[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n        }\n    }\n    for (int i = 0; i < operators.size(); i++) {\n        if (operators[i] == \"*\") {\n            nums[i] *= nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i--;\n        } else if (operators[i] == \"//\") {\n            nums[i] /= nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i--;\n        }\n    }\n    for (int i = 0; i < operators.size(); i++) {\n        if (operators[i] == \"+\") {\n            nums[i] += nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i--;\n        } else if (operators[i] == \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i--;\n        }\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    string result;\n    for (char ch : s) {\n        if (ch >= 'A' && ch <= 'Z') {\n            result.push_back(ch + 32);\n        } else if (ch >= 'a' && ch <= 'z') {\n            result.push_back(ch - 32);\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    string_view txt_view(txt);\n    unsigned char md5_hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)txt_view.data(), txt_view.size(), md5_hash);\n    string md5_encoded;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        md5_encoded += to_string(md5_hash[i]);\n    }\n    return md5_encoded;\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == \"(\") {\n                stk.Push(ch);\n                currentGroup += ch;\n            } else if (ch == \")\") {\n                stk.Pop();\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        var mean = numbers.Sum() / numbers.Count;\n        var deviation = 0.0;\n        foreach (var x in numbers) {\n            deviation += Math.Abs(x - mean);\n        }\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i!= 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split();\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            foreach (var ch in group) {\n                if (ch == \"(\") {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == \")\") {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        return strs.Where(s => s.Contains(substring)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        var nSum = numbers.Sum();\n        var nProduct = numbers.Aggregate(1, (x, y) => x * y);\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var maxSoFar = float.NegativeInfinity;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string s) {\n        return s == s.Reverse();\n    }\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s.Substring(i))) {\n                return s + s.Substring(0, i).Reverse();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        return string.Join(\"\", a.Zip(b, (x, y) => x == y? \"0\" : \"1\"));\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longestS = strs[0];\n        foreach (string s in strs) {\n            if (s.Length > longestS.Length) {\n                longestS = s;\n            }\n        }\n        return longestS;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        while (b!= 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(1, n + 1));\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        return new HashSet<char>(s.ToLower()).Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int> {\n            {\"o\", 4},\n            {\"o|\", 2},\n            {\".|\", 1}\n        };\n        var notes = musicString.Split();\n        return notes.Select(note => durations[note]).ToList();\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int> {\n            [\"zero\"] = 0,\n            [\"one\"] = 1,\n            [\"two\"] = 2,\n            [\"three\"] = 3,\n            [\"four\"] = 4,\n            [\"five\"] = 5,\n            [\"six\"] = 6,\n            [\"seven\"] = 7,\n            [\"eight\"] = 8,\n            [\"nine\"] = 9,\n        };\n        var numList = numbers.Split(\" \").Where(x => numDict.ContainsKey(x)).ToList();\n        numList.Sort((x, y) => numDict[x] - numDict[y]);\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        double minDiff = double.PositiveInfinity;\n        var closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        var minNum = numbers[0];\n        var maxNum = numbers[0];\n        foreach (var num in numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new List<double>(new double[numbers.Count]);\n        } else {\n            return new List<double>(\n                numbers.Select(num => (num - minNum) / (maxNum - minNum))\n            );\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        return values.Where(x => x is int).Cast<int>().ToList();\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.GetOrDefault(num, 0) + 1;\n        }\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new List<char>();\n        foreach (var ch in s) {\n            if (!Char.IsLetter(ch)) {\n                flipped.Add(ch);\n            } else if (Char.IsLower(ch)) {\n                flipped.Add(Char.ToUpper(ch));\n            } else if (Char.IsUpper(ch)) {\n                flipped.Add(Char.ToLower(ch));\n            }\n        }\n        return new string(flipped.ToArray());\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Concat(strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        return strs.Where(s => s.StartsWith(prefixStr)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        return l.Where(num => num > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        return Enumerable.Range(2, (int)Math.Floor(Math.Sqrt(n)) + 1).All(i => n % i!= 0);\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = new List<int>(l);\n        sortedThird.Sort();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                l[i] = sortedThird[i // 3];\n            }\n        }\n        return l;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        return new List<int>(new HashSet<int>(l));\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        return l.Count > 0? l.Max() : 0;\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += str(i).Count(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>(l.Count / 2);\n        for (int i = 0; i < l.Count; i += 2) {\n            sortedEven.Add(l[i / 2]);\n        }\n        sortedEven.Sort();\n        var result = new List<int>(l.Count);\n        for (int i = 0; i < l.Count; i++) {\n            result.Add(sortedEven[i / 2] if i % 2 == 0 else l[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<char>();\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Append(s.Substring(i));\n            } else {\n                result.Append(s[i + 1]);\n                result.Append(s[i + 2]);\n                result.Append(s[i]);\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int PrimeFib(int n) {\n        var f = new List<int> {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new List<int> {f[1], f[0] + f[1]};\n            if (IsPrime(f[1])) {\n                cnt += 1;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        return l.Select(i => i + 1).ToList();\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        var digits = new List<char>();\n        while (x > 0) {\n            digits.Add((char)('0' + x % bas));\n            x //= bas;\n        }\n        return new string(digits.ToArray());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return a * h / 2.0;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new int[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>(l);\n        sl.Sort();\n        if (sl.Count % 2!= 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == string.Join(\"\", txt.ToCharArray().Reverse());\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int _ = 0; _ < n; _++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            result.Add((char)((((int)ch - 97 + 5) % 26) + 97));\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeShift(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            result.Add((char)((((int)ch - 97 + 21) % 26) + 97));\n        }\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = \"aeiouAEIOU\";\n        return new string(txt.Where(c =>!vowels.Contains(c)).ToArray());\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        foreach (var x in l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0) == new HashSet<char>(s1);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return diff.All(x => x <= 0) || diff.All(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        return new List<int>(new HashSet<int>(l1) & new HashSet<int>(l2));\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        return xs.Select((x, i) => x * i).ToList();\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i].ToLower() in vowels || (i == s.Length - 1 && s[i].ToLower() == \"y\")) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return xStr.Substring(0, xStr.Length - shift);\n        } else {\n            return xStr.Substring(xStr.Length - shift, shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.Where(c => c.IsUpper()).Sum(c => (int)c);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[words.IndexOf(\"apples\") - 1]);\n        var oranges = int.Parse(words[words.IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        foreach (var n in arr) {\n            if (n % 2 == 0) {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens[0];\n        for (int i = 1; i < evens.Count; i++) {\n            if (evens[i] < minEven) {\n                minEven = evens[i];\n            }\n        }\n        return new List<int> { minEven, arr.IndexOf(minEven) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            freqs[n] = freqs.GetOrDefault(n, 0) + 1;\n        }\n        var goodVals = new List<int>();\n        foreach (var kvp in freqs) {\n            if (kvp.Value >= kvp.Key) {\n                goodVals.Add(kvp.Key);\n            }\n        }\n        return goodVals.Count > 0? goodVals.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new List<int>(lst);\n        sl.Sort();\n        var result = new List<int>();\n        int left = 0, right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalin = true;\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]!= q[q.Count - i - 1]) {\n                isPalin = false;\n                break;\n            }\n        }\n        int total = 0;\n        foreach (var e in q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i]!= arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        var cnt1 = 0;\n        foreach (var s in lst1) {\n            cnt1 += s.Length;\n        }\n        var cnt2 = 0;\n        foreach (var s in lst2) {\n            cnt2 += s.Length;\n        }\n        return cnt1 <= cnt2? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        int root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D');\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        return $\"db{Convert.ToString(dec, 2)}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        var length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        return n == 1? 1 : 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        return Convert.ToString(n, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(\" \");\n        var result = new List<string>();\n        foreach (var word in words) {\n            var sortedWord = new List<char>(word);\n            sortedWord.Sort();\n            result.Add(new string(sortedWord.ToArray()));\n        }\n        return string.Join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<IList<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        coords.Sort((a, b) => {\n            if (a[0] == b[0]) {\n                return a[1] - b[1];\n            }\n            return a[0] - b[0];\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        } else {\n            return arr.OrderBy(x => x).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = (int)ch + 4;\n            if (shifted > (int)'z') {\n                shifted -= 26;\n            }\n            result.Add((char)shifted);\n        }\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new SortedSet<int>(lst);\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl.Skip(1).First();\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, \"[.!?]\\\\s*\");\n        return sentences.Where(sentence => sentence.Length >= 2).Sum(sentence => sentence.Substring(0, 2) == \"I \");\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        return x is int && y is int && z is int && (x + y == z || x + z == y || y + z == x);\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new List<char>();\n        foreach (var ch in message) {\n            if (Char.IsLetter(ch)) {\n                var ch1 = Char.IsLower(ch)? Char.ToUpper(ch) : Char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                result.Add(ch1);\n            } else {\n                result.Add(ch);\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; Math.Floor(Math.Sqrt(n)) + 1 > i; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = lst.Where(n => IsPrime(n)).ToList();\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max().ToString();\n        return largest.Sum(c => int.Parse(c.ToString()));\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d.Count == 0) {\n            return false;\n        }\n        return all(c.IsLower() for c in d.Keys) || all(c.IsUpper() for c in d.Keys);\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            if (primes.TrueForAll(p => num % p!= 0)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return Math.Abs(a % 10) * Math.Abs(b % 10);\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        return s.Length / 2;\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        var num = float.Parse(value);\n        return (int)Math.Round(num);\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        return new List<int>(Enumerable.Range(n, 2 * n));\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        return Regex.Split(s, \"[, ]\").Where(w => w.Length > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if x!= y else -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        var rAvg = (m + n) / 2.0 + 0.5;\n        return Convert.ToString(rAvg, 2);\n    }\n}\n",
            "class Global {\n    public static bool AllDigitsOdd(string s) {\n        foreach (var digit in s) {\n            if (Convert.ToInt32(digit) % 2!= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static IList<int> UniqueDigits(IList<int> x) {\n        return x.Where(num => AllDigitsOdd(num.ToString())).OrderBy(num => num).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sortedArr = new List<int>(arr.Where(x => 1 <= x && x <= 9).OrderByDescending(x => x));\n        return sortedArr.Select(x => digitNames[x - 1]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>(n + 1);\n        for (int i = 1; i <= n; i++) {\n            nums.Add(i);\n        }\n        var result = new List<int>(n + 1);\n        for (int i = 1; i <= n; i++) {\n            result.Add(i % 2!= 0? nums.Take(i).Sum() : nums.Take(i).Aggregate((x, y) => x * y));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == txt.Reverse();\n    }\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int> { 0, 0 };\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[i % 2] += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        var nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(d => int.Parse(d));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => DigitsSum(n) > 0);\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.Skip(i).SequenceEqual(sortedArr.Take(arr.Count - i)) && arr.Take(i).SequenceEqual(sortedArr.Skip(arr.Count - i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        var oddCnt = 0;\n        foreach (var num in lst1) {\n            if (num % 2!= 0) {\n                oddCnt++;\n            }\n        }\n        var evenCnt = 0;\n        foreach (var num in lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(\" \");\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                freq[w] = freq.GetOrDefault(w, 0) + 1;\n            }\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = freq.Values.Max();\n            foreach (var kvp in freq) {\n                if (kvp.Value == maxFreq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new List<char>();\n        foreach (var ch in s) {\n            if (!c.Contains(ch)) {\n                s1.Add(ch);\n            }\n        }\n        var s1Str = new string(s1.ToArray());\n        return new List<string> { s1Str, \"yes\" if s1Str == s1Str.Reverse() else \"no\" };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = 0;\n            foreach (var d in num) {\n                if (d % 2 == 1) {\n                    n++;\n                }\n            }\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Math.Min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Select(arr => (int)Math.Ceiling(arr.Sum() / (double)capacity)).Sum();\n    }\n}\n",
            "class Global {\n    public static int CountOnes(int num) {\n        return Convert.ToString(num, 2).Count(c => c == '1');\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        return arr.OrderBy(x => (CountOnes(x), x)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = s.Split(\" \");\n        return words.Where(w => w.Length > 0 && w.Count(c => c.IsLower() && c.ToString() in consonants) == n).ToList();\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i > 0; i--) {\n            if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n                return word[i];\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        var s1 = lst[0] + lst[1];\n        var s2 = lst[1] + lst[0];\n        return \"Yes\" if Check(s1) || Check(s2) else \"No\";\n    }\n    public static bool Check(string s) {\n        int depth = 0;\n        foreach (var ch in s) {\n            if (ch == \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        return arr.OrderByDescending(x => x).Take(k).ToList();\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2!= 0).Sum();\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        return arr.Take(k).Where(n => n.ToString().Length <= 2).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int> { 1 };\n        while (n!= 1) {\n            if (n % 2!= 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length!= 10 || date[2]!= \"-\" || date[5]!= \"-\") {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m in new int[] {1, 3, 5, 7, 8, 10, 12} && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in new int[] {4, 6, 9, 11} && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            return new List<string> {\n                txt.Count(c => c.IsLower() && c.ToOrd() % 2 == 0).ToString()\n            };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i-1] > lst[i]) {\n                return false;\n            }\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq[i] = freq.GetOrDefault(i, 0) + 1;\n        }\n        return freq.Values.Max() <= 2;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        var l = Math.Max(interval1[0], interval2[0]);\n        var r = Math.Min(interval1[1], interval2[1]);\n        var length = r - l;\n        return \"YES\" if length > 0 && IsPrime(length) else \"NO\";\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (var i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        int sign = -1 if arr.Count(n => n < 0) % 2 == 1 else 1;\n        return sign * arr.Sum(n => Math.Abs(n));\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        var n = grid.Count;\n        var minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i!= 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j!= 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i!= n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j!= n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(temp);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(1 if i % 2 == 0 else minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        var seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = new List<int>();\n        foreach (var d in n.ToString()) {\n            if (int.Parse(d) % 2 == 1) {\n                odds.Add(int.Parse(d));\n            }\n        }\n        return odds.Aggregate(1, (x, y) => x * y) if odds.Count > 0 else 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Add(i);\n            } else if (s[i] == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.Count;\n        foreach (var idx in openIdx) {\n            if (i < l && idx < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        return lst.Select(n => Math.Pow(Math.Ceiling(n), 2)).Sum();\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        var last = txt.Substring(txt.LastIndexOf(' ') + 1);\n        return last.Length == 1 && char.IsLetter(last[0]);\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Count > 0? idx[0] : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = new List<int>();\n        var pos = new List<int>();\n        foreach (var i in lst) {\n            if (i < 0) {\n                neg.Add(i);\n            } else if (i > 0) {\n                pos.Add(i);\n            }\n        }\n        var maxNeg = neg.Count > 0? neg.Max() : (int?)null;\n        var minPos = pos.Count > 0? pos.Min() : (int?)null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        double? a1 = null;\n        double? b1 = null;\n        if (a is string) {\n            a1 = double.Parse(a.ToString().Replace(',', '.'));\n        } else if (a is int) {\n            a1 = (double)a;\n        } else if (a is double) {\n            a1 = (double)a;\n        } else {\n            throw new Exception(\"Type Error\");\n        }\n        if (b is string) {\n            b1 = double.Parse(b.ToString().Replace(',', '.'));\n        } else if (b is int) {\n            b1 = (double)b;\n        } else if (b is double) {\n            b1 = (double)b;\n        } else {\n            throw new Exception(\"Type Error\");\n        }\n        if (a1 == b1) {\n            return null;\n        } else if (a1 > b1) {\n            return a1;\n        } else {\n            return b1;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\", RegexOptions.Compiled).Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length!= 2 ||!lst[1] in suf || lst[0].Length == 0 ||!Char.IsLetter(lst[0][0]) || lst[0].Count(x => Char.IsDigit(x)) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += Math.Pow(lst[i], 2);\n            } else if (i % 4 == 0) {\n                result += Math.Pow(lst[i], 3);\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        return string.Join(\" \", sentence.Split(\" \").Where(w => Math.Sqrt(w.Length) % 1 == 0));\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split(\"/\");\n        var ns = n.Split(\"/\");\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        var nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(d => int.Parse(d));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(n => DigitsSum(n)).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        return nums.Count(n => n > 10 && n % 2 == 1 && n.ToString()[0] in odds);\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) ||!names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        result.Sort((x, y) => {\n            if (x.Length == y.Length) {\n                return x.CompareTo(y);\n            }\n            return x.Length - y.Length;\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        return lst.Where(n => n >= 0 && n % 2 == 1).Select(n => n * n).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        return new List<int>(Math.Abs(x - y) for (x, y) in zip(game, guess));\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        int maxS = int.MinValue;\n        string maxExt = \"\";\n        foreach (var ext in extensions) {\n            int upper = 0;\n            foreach (var c in ext) {\n                if (char.IsUpper(c)) {\n                    upper++;\n                }\n            }\n            int lower = ext.Length - upper;\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (b.Substring(i) + b.Substring(0, i) in a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = num.ToString();\n        var even = ds.Count(d => (int)d % 2 == 0);\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new List<string>();\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int> { a, b, c };\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        int maxCnt = 0;\n        string maxW = \"\";\n        foreach (var w in words) {\n            int cnt = new HashSet<char>(w).Count;\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> { num + need, remaining - need };\n        } else {\n            return new List<int> { num + remaining, 0 };\n        }\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = operators.ToArray();\n        var nums = operands.ToArray();\n        int i = ops.Length - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = Math.Pow(nums[i], nums[i + 1]);\n                nums = nums.Take(i + 1).Concat(nums.Skip(i + 2)).ToArray();\n                ops = ops.Take(i).Concat(ops.Skip(i + 1)).ToArray();\n                i -= 1;\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.Length) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums = nums.Take(i + 1).Concat(nums.Skip(i + 2)).ToArray();\n                ops = ops.Take(i).Concat(ops.Skip(i + 1)).ToArray();\n                i -= 1;\n            }\n            else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums = nums.Take(i + 1).Concat(nums.Skip(i + 2)).ToArray();\n                ops = ops.Take(i).Concat(ops.Skip(i + 1)).ToArray();\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.Length) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums = nums.Take(i + 1).Concat(nums.Skip(i + 2)).ToArray();\n                ops = ops.Take(i).Concat(ops.Skip(i + 1)).ToArray();\n                i -= 1;\n            }\n            else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums = nums.Take(i + 1).Concat(nums.Skip(i + 2)).ToArray();\n                ops = ops.Take(i).Concat(ops.Skip(i + 1)).ToArray();\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (!Char.IsLetter(ch)) {\n                result.Add(ch);\n            } else if (Char.IsUpper(ch)) {\n                result.Add(Char.ToLower(ch));\n            } else if (Char.IsLower(ch)) {\n                result.Add(Char.ToUpper(ch));\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        var md5Hash = MD5.Create();\n        var txtBytes = System.Text.Encoding.UTF8.GetBytes(txt);\n        md5Hash.ComputeHash(txtBytes);\n        var md5Encoded = BitConverter.ToString(md5Hash.Hash).Replace(\"-\", \"\").ToLower();\n        return md5Encoded;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        var lower = Math.Max(2, Math.Min(a, b));\n        var upper = Math.Min(8, Math.Max(a, b));\n        return new List<int>(\n            from i in range(lower, upper + 1)\n            where i % 2 == 0\n            select i\n        );\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[i].abs() - numbers[j].abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = <String>[];\n    var currentGroup = \"\";\n    var parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i!= 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split();\n    for (var group in parenGroups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    int nSum = numbers.reduce((a, b) => a + b);\n    int nProduct = numbers.reduce((a, b) => a * b);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = double.negativeInfinity;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join('');\n}\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reversed.join('');\n        }\n    }\n    return '';\n}\n",
            "String stringXor(String a, String b) {\n    return a.characters.zip(b.characters).map((pair) => pair.first == pair.second? \"0\" : \"1\").join();\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    while (b!= 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return List.generate(n + 1, (i) => i.toString()).join(\" \");\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    var notes = musicString.split();\n    return notes.map((note) => durations[note]).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    var times = 0;\n    for (var i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n    numList.sort((a, b) => numDict[a].compareTo(numDict[b]));\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    numbers.sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < numbers.length; i++) {\n        double diff = numbers[i] - numbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i - 1], numbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    var minNum = numbers.reduce(min);\n    var maxNum = numbers.reduce(max);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.whereType<int>().toList();\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n //= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = <int, int>{};\n    for (int num in numbers) {\n        counts[num] = counts.putIfAbsent(num, () => 0) + 1;\n    }\n    return numbers.where((num) => counts[num] == 1).toList();\n}\n",
            "String flipCase(String s) {\n    return s.replaceAllMapped(\n        RegExp(r'[^a-zA-Z]'),\n        (Match m) => m.group(0),\n    ).toUpperCase();\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join();\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.getRange(0, l.length, 3).toList();\n    sortedThird.sort();\n    return [sortedThird[i ~/ 3] if i % 3 == 0 else l[i] for i in l.length];\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.toSet().toList();\n}\n",
            "int maxElement(List<int> l) {\n    return l.isEmpty? 0 : l.reduce(max);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += str(i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.where((e) => e % 2 == 0).toList();\n    sortedEven.sort();\n    return [sortedEven[i ~/ 2] if i % 2 == 0 else l[i] for i in range(l.length)];\n}\n",
            "String encodeCyclic(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join();\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    var f = [0, 1];\n    int cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = <int>{};\n    for (int num in l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    var digits = <String>[];\n    while (x > 0) {\n        digits.add(x % bas);\n        x //= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    var sl = l.toList();\n    sl.sort();\n    if (l.length % 2!= 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        int ch = s.codeUnitAt(i);\n        result.add(String.fromCharCode(((ch - 97 + 5) % 26) + 97));\n    }\n    return result.join();\n}\nString decodeShift(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        int ch = s.codeUnitAt(i);\n        result.add(String.fromCharCode(((ch - 97 + 21) % 26) + 97));\n    }\n    return result.join();\n}\n",
            "String removeVowels(String txt) {\n    return txt.replaceAll(RegExp(r'[aeiouAEIOU]'), '');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return s0.toSet() == s1.toSet();\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            depth += 1;\n        } else if (brackets[i] == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = [y - x for x, y in zip(l, l.skip(1))];\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return l1.toSet().intersection(l2.toSet()).toList();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n ~/= i;\n        } else {\n            i += 1;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) ~/ 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets.characters) {\n        if (b == \"(\") {\n            depth += 1;\n        } else if (b == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    return [xs[i] * i for i in range(1, xs.length)];\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    var xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.replaceAll(RegExp(r'[^A-Z]'), '').characters.map((c) => c.codeUnit).reduce((a, b) => a + b);\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.index('apples') - 1]);\n    var oranges = int.parse(words[words.index('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = arr.where((n) => n % 2 == 0).toList();\n    if (evens.isEmpty) {\n        return [];\n    }\n    var minEven = evens.reduce(min);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        freqs[n] = freqs.putIfAbsent(n, () => 0) + 1;\n    }\n    var goodVals = <int>[];\n    for (int k in freqs.keys) {\n        if (freqs[k] >= k) {\n            goodVals.add(k);\n        }\n    }\n    return goodVals.isEmpty? -1 : goodVals.reduce(max);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    lst.sort();\n    var result = <int>[];\n    var left = 0;\n    var right = lst.length - 1;\n    while (left <= right) {\n        result.add(lst[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(lst[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool isPalin = q.every((e) => e == q.last);\n    int total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!= arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    var cnt1 = lst1.fold(0, (sum, s) => sum + s.length);\n    var cnt2 = lst2.fold(0, (sum, s) => sum + s.length);\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    var root = a.round() ** (1.0 / 3.0);\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.length - num.replaceAll(\"2357BD\", \"\").length;\n}\n",
            "String decimalToBinary(int dec) {\n    return \"db\" + dec.toRadixString(2) + \"db\";\n}\n",
            "bool isHappy(String s) {\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor(); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    return bin(n.toString().split('').map((e) => int.parse(e)).reduce((a, b) => a + b)).substring(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.where((i, x) => i % 2 == 1 && x % 2 == 0).map((i, x) => x).sum();\n}\n",
            "String antiShuffle(String s) {\n    var words = s.split(\" \").map((word) => word.split(\"\").toList()).toList();\n    words.sort((a, b) => a.compareTo(b));\n    return words.map((word) => word.join()).join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0].compareTo(b[0]) || -a[1].compareTo(b[1]));\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr.last) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.toList();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        int shifted = s.codeUnitAt(i) + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(String.fromCharCode(shifted));\n    }\n    return result.join();\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList()..sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = s.split(RegExp(r\"[.!?]\\s*\"));\n    return sentences.where((sentence) => sentence.length >= 2).where((sentence) => sentence.startsWith(\"I \")).length;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    return x is int && y is int && z is int && (x + y == z || x + z == y || y + z == x);\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = <String>[];\n    for (var ch in message) {\n        if (ch.isAlpha) {\n            var ch1 = ch.toUpperCase() if ch.isLowercase else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    var primes = lst.where((n) => isPrime(n)).toList();\n    if (primes.isEmpty) {\n        return 0;\n    }\n    var largest = primes.reduce(max);\n    return largest.toString().split('').map((digit) => int.parse(digit)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String,String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((c) => c.isLowercase) || d.keys.every((c) => c.isUppercase);\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num in Iterable.generate(n - 1, (i) => i + 2)) {\n        if (primes.every((p) => num % p!= 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    return s.split('').where((c) => c.length % 2 == 0 && c.toUpperCase() == c).length;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return num.round();\n    } else {\n        return (num - 0.5).round();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return [n + 2 * i for i in Iterable.generate(n)];\n}\n",
            "List<String> wordsString(String s) {\n    return s.split(RegExp(r\"[, ]\")).where((w) => w.length > 0).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if (x!= y) else -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int rAvg = (m + n) ~/ 2 + 1;\n    return rAvg.toRadixString(2);\n}\n",
            "bool allDigitsOdd(String s) {\n    return s.allMatches(RegExp(r'\\d')).every((Match m) => int.parse(m.group(0)) % 2!= 0);\n}\nList<int> uniqueDigits(List<int> x) {\n    return x.where((num) => allDigitsOdd(num.toString())).toList();\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.where((x) => 1 <= x && x <= 9).toList();\n    sortedArr.sort((a, b) => b.compareTo(a));\n    return digitNames.sublist(0, sortedArr.length);\n}\n",
            "List<int> f(int n) {\n    var nums = List.generate(n + 1, (i) => i + 1);\n    return nums.asMap().entries.map((e) {\n        if (e.key % 2!= 0) {\n            return e.value.reduce((x, y) => x + y);\n        } else {\n            return e.value.reduce((x, y) => x * y);\n        }\n    }).toList();\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nint countNums(List<int> arr) {\n    return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    var sortedArr = arr.toList();\n    sortedArr.sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) && arr.sublist(0, i) == sortedArr.sublist(arr.length - i, arr.length)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    var oddCnt = lst1.where((num) => num % 2!= 0).length;\n    var evenCnt = lst2.where((num) => num % 2 == 0).length;\n    return evenCnt >= oddCnt? \"YES\" : \"NO\";\n}\n",
            "Map<String,int> histogram(String test) {\n    var freq = <String,int>{};\n    var words = test.split(\" \").where((w) => w.length > 0).toList();\n    for (var w in words) {\n        freq[w] = freq.putIfAbsent(w, () => 0) + 1;\n    }\n    var result = <String,int>{};\n    if (freq.length > 0) {\n        var maxFreq = freq.values.reduce(max);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join('');\n}\nList<String> reverseDelete(String s, String c) {\n    var s1 = s.split('').where((ch) =>!c.contains(ch)).join('');\n    return [s1, isPalindrome(s1)? 'yes' : 'no'];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (String num in lst) {\n        int n = num.codeUnits.where((int d) => d % 2 == 1).length;\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => ceil(arr.reduce((a, b) => a + b) / capacity)).sum();\n}\n",
            "int countOnes(int num) {\n    return num.toRadixString(2).count(\"1\");\n}\nList<int> sortArray(List<int> arr) {\n    arr.sort((a, b) => countOnes(a).compareTo(countOnes(b)) || a.compareTo(b));\n    return arr;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \").where((w) => w.length > 0).toList();\n    return words.where((w) => w.toLowerCase().split(\"\").where((c) => c in consonants).length == n).toList();\n}\n",
            "String getClosestVowel(String word) {\n    const vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nString matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    return arr.sort().reversed().take(k).toList();\n}\n",
            "int solution(List<int> lst) {\n    return lst.where((x) => x % 2!= 0 && x % 2 == 0).reduce((a, b) => a + b);\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.take(k).where((n) => n.toString().length <= 2).sum();\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = [1];\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz.sorted();\n}\n",
            "bool validDate(String date) {\n    if (date.length!= 10 || date[2]!= \"-\" || date[5]!= \"-\") {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = -1;\n    if (arr.where((n) => n < 0).length % 2 == 1) {\n        sign = 1;\n    }\n    return sign * arr.map((n) => n.abs()).reduce((a, b) => a + b);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i!= 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j!= 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i!= n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j!= n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = min(temp);\n            }\n        }\n    }\n    var result = <int>[];\n    for (int i = 0; i < k; i++) {\n        result.add(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = n.toString().split('').where((d) => int.parse(d) % 2 == 1).map((d) => int.parse(d)).toList();\n    return odds.reduce((x, y) => x * y) if odds.length > 0 else 0;\n}\n",
            "bool isNested(String s) {\n    var openIdx = <int>[];\n    var closeIdx = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        var ch = s[i];\n        if (ch == '[') {\n            openIdx.add(i);\n        } else if (ch == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.reversed;\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((n) => pow(n.ceil(), 2)).reduce((a, b) => a + b);\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    return txt.substring(txt.lastIndexOf(' ') + 1).length == 1 &&\n        txt.substring(txt.lastIndexOf(' ') + 1)[0].isAlphabetic;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = [i for i in range(1, arr.length) if arr[i] < arr[i - 1]];\n    return idx.isEmpty? -1 : idx.reduce(max);\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.where((i) => i < 0).toList();\n    var pos = lst.where((i) => i > 0).toList();\n    var maxNeg = neg.isEmpty? null : neg.reduce(max);\n    var minPos = pos.isEmpty? null : pos.reduce(min);\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        return double.parse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        return a.toDouble();\n    } else if (a is double) {\n        return a;\n    }\n    throw RuntimeError(\"Type Error\");\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length!= 2 ||!lst[1] in suf || lst[0].length == 0 ||!lst[0][0].isAlphabetic || lst[0].where((x) => x.isDigit).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    return words.where((w) => isPrime(w.length)).join(\" \");\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.toList()..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    return nums.where((n) => n > 10 && n % 2 == 1 && n.toString()[0] in odds).length;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) ||!names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    return lst.where((s) => s.length % 2 == 0).toList()\n       .sorted((a, b) => a.length.compareTo(b.length));\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => n * n).sum();\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return game.map((x, i) => x - guess[i]).toList();\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    var maxS = double.negativeInfinity;\n    String maxExt = \"\";\n    for (String ext in extensions) {\n        var upper = ext.length - ext.toLowerCase().length;\n        var lower = ext.length - ext.toUpperCase().length;\n        var s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    var ds = num.abs().toString();\n    var even = ds.where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = <String>[];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c].sorted();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    var maxCnt = 0;\n    var maxW = \"\";\n    for (var w in words) {\n        var cnt = w.toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i] ** nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        var ch = s[i];\n        if (!ch.isAlpha) {\n            result.add(ch);\n        } else if (ch.isUpper) {\n            result.add(ch.toLowerCase());\n        } else if (ch.isLower) {\n            result.add(ch.toUpperCase());\n        }\n    }\n    return result.join();\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    var md5Hash = md5.convert(txt.codeUnits);\n    return md5Hash.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    return [i for i in range(lower, upper + 1) if i % 2 == 0];\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []string{}\n    currentGroup := \"\"\n    parens := strings.Replace(parenString, \" \", \"\", -1)\n    for _, ch := range parens {\n        if ch == \"(\" {\n            stk = append(stk, string(ch))\n            currentGroup += string(ch)\n        } else if ch == \")\" {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := float64(0)\n    for _, n := range numbers {\n        mean += n\n    }\n    mean /= float64(len(numbers))\n    deviation := float64(0)\n    for _, n := range numbers {\n        deviation += math.Abs(n - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n        if i!= 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    return filter(strs, func(s string) bool {\n        return strings.Contains(s, substring)\n    })\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    for _, n := range numbers {\n        nSum += n\n    }\n    nProduct := 1\n    for _, n := range numbers {\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := float64(-math.MaxFloat64)\n    result := make([]int, 0)\n    for _, num := range numbers {\n        maxSoFar = math.Max(maxSoFar, float64(num))\n        result = append(result, int(maxSoFar))\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    return s == Reverse(s)\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s + Reverse(s[:i])\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a string, b string) string {\n    return strings.Join(\n        []string{\n            strings.Repeat(\"0\", len(a)),\n            strings.Repeat(\"1\", len(b)),\n        },\n        \"\",\n    )\n}\n",
            "func Longest(strs []string) *string {\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}\n",
            "func GreatestCommonDivisor(a, b int) int {\n    for b!= 0 {\n        a, b = b, a%b\n    }\n    return a\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, len(s)+1)\n    for i := range s {\n        prefixes[i+1] = s[:i+1]\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    return strings.Join(strings.Fields(fmt.Sprint(range(n+1))), \" \")\n}\n",
            "func CountDistinctCharacters(s string) int {\n    return len(make(map[rune]struct{}, len(s)))\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes := strings.Split(musicString, \" \")\n    result := make([]int, 0)\n    for _, note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s) - len(substring) + 1; i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := []string{}\n    for _, n := range strings.Split(numbers, \" \") {\n        if _, ok := numDict[n]; ok {\n            numList = append(numList, n)\n        }\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sortedNumbers := make([]float64, len(numbers))\n    copy(sortedNumbers, numbers)\n    sort.Float64s(sortedNumbers)\n    minDiff := math.Inf(1)\n    closestPair := []float64{}\n    for i := 1; i < len(sortedNumbers); i++ {\n        diff := sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{sortedNumbers[i - 1], sortedNumbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.MinFloat64\n    maxNum := math.MaxFloat64\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    }\n    return [(num - minNum) / (maxNum - minNum) for num := range numbers]\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := make([]int, 0)\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n            result = append(result, v.(int))\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n/i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num] = counts[num] + 1\n    }\n    res := make([]int, 0)\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune(s)\n    for i, ch := range flipped {\n        if!unicode.IsLetter(ch) {\n            continue\n        }\n        if unicode.IsLower(ch) {\n            flipped[i] = unicode.ToUpper(ch)\n        } else {\n            flipped[i] = unicode.ToLower(ch)\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    return filter(strs, func(s string) bool { return strings.HasPrefix(s, prefixStr) })\n}\nfunc filter(strs []string, predicate func(string) bool) []string {\n    result := make([]string, 0)\n    for _, s := range strs {\n        if predicate(s) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    result := []int{}\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := range xs {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := make([]int, 0)\n    for i := 0; i < len(l); i += 3 {\n        sortedThird = append(sortedThird, sort.IntSlice(l[i:i+3]).Sort()[0])\n    }\n    return sortedThird\n}\n",
            "func ListUnique(l []int) []int {\n    return sort.IntSlice(l).Sort()\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, e := range l {\n        if e > max {\n            max = e\n        }\n    }\n    return max\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := make([]int, 0)\n    for i := 0; i < len(l); i += 2 {\n        sortedEven = append(sortedEven, l[i])\n    }\n    sortedEven.Sort()\n    result := make([]int, 0)\n    for i := 0; i < len(l); i += 2 {\n        if i%2 == 0 {\n            result = append(result, sortedEven[i//2])\n        } else {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    result := []byte{}\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result = append(result, s[i:]...)\n        } else {\n            result = append(result, s[i+1:i+3]...)\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = []int{f[1], f[0] + f[1]}\n        if IsPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := map[int]bool{}\n    for _, num := range l {\n        if _, ok := seen[-num]; ok {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := make([]byte, 0)\n    for x > 0 {\n        digits = append(digits, byte(x%bas) + '0')\n        x /= bas\n    }\n    return string(digits[len(digits)-1 : 0 : -1])\n}\n",
            "func TriangleArea(a, h int) float64 {\n    return float64(a*h) / 2\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sl := make([]float64, len(l))\n    copy(sl, l)\n    sort.Float64s(sl)\n    if len(l)%2!= 0 {\n        return sl[len(l)/2]\n    }\n    return (sl[len(l)/2] + sl[len(l)/2-1]) / 2\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == Reverse(txt)\n}\nfunc Reverse(txt string) string {\n    runes := []rune(txt)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((int(ch) - 97 + 5) % 26) + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((int(ch) - 97 + 21) % 26) + 97)\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := make([]byte, 0)\n    for _, char := range txt {\n        if string(char) not in vowels {\n            result = append(result, byte(char))\n        }\n    }\n    return string(result)\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return len(s0) == len(s1) && len(s0) == len(strings.Intersect(s0, s1))\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := 0; i < len(l)-1; i++ {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(x <= 0 for x in diff) || all(x >= 0 for x in diff)\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    return sorted(list(set(l1) & set(l2)))\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i == 0 {\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return (n * (n + 1)) / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth += 1\n        } else if b == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs))\n    for i := 1; i < len(xs); i++ {\n        result[i] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for _, c := range s {\n        if strings.Contains(vowels, string(c)) || (c == 'y' && len(s) == 1) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    xStr := fmt.Sprintf(\"%d\", x)\n    if shift > len(xStr) {\n        return xStr[::-1]\n    }\n    return xStr[len(xStr)-shift:] + xStr[:len(xStr)-shift]\n}\n",
            "func DigitSum(s string) int {\n    return strings.CountFunc(s, func(c rune) bool { return unicode.IsUpper(c) })\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples, oranges := 0, 0\n    for _, word := range words {\n        if word == \"apples\" {\n            apples = apples + 1\n        } else if word == \"oranges\" {\n            oranges = oranges + 1\n        }\n    }\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, n := range evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    return []int{minEven, arr.Index(minEven)}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n] += 1\n    }\n    goodVals := make([]int, 0)\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) == 0 {\n        return -1\n    }\n    return max(goodVals)\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := make([]int, 0, len(lst))\n    for i := 0; i < len(lst); i += 2 {\n        result = append(result, sl[i])\n        if i+1 < len(lst) {\n            result = append(result, sl[i+1])\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2.0\n        return math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q)/2; i++ {\n        if q[i]!= q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, e := range q {\n        total += e\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i]!= arr[len(arr)-i-1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    cnt2 := 0\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i*i <= a; i++ {\n        if IsPrime(i) {\n            for ; a%i == 0; a /= i {\n                cnt += 1\n            }\n        }\n    }\n    if a > 1 {\n        cnt += 1\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = abs(a)\n    root := int(math.Pow(float64(a), 1.0/3.0))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    return len(strings.Split(num, \"2357BD\"))\n}\n",
            "func DecimalToBinary(dec int) string {\n    return fmt.Sprintf(\"db%bdb\", dec)\n}\n",
            "func IsHappy(s string) bool {\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, 0)\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(length)))); i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2*9*(10**(n-2))\n}\n",
            "func Solve(n int) string {\n    return fmt.Sprintf(\"%b\", n)\n}\n",
            "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i, word := range words {\n        words[i] = strings.Join(sort.StringSlice(word), \"\")\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := make([][]int, 0)\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    return sorted(coords, func(a, b []int) bool {\n        if a[0]!= b[0] {\n            return a[0] < b[0]\n        }\n        return a[1] > b[1]\n    })\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []\n    }\n    if (arr[0] + arr[len(arr)-1])%2 == 0 {\n        return sort.Slice(arr, func(i, j int) bool { return arr[i] > arr[j] })\n    }\n    return sort.Slice(arr, func(i, j int) bool { return arr[i] < arr[j] })\n}\n",
            "func Encrypt(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        shifted := rune(ch) + 4\n        if shifted > rune('z') {\n            shifted -= 26\n        }\n        result = append(result, shifted)\n    }\n    return string(result)\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make([]int, 0)\n    for _, e := range lst {\n        if len(sl) == 0 || e < sl[len(sl)-1] {\n            sl = append(sl, e)\n        }\n    }\n    if len(sl) < 2 {\n        return nil\n    }\n    return &sl[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := regexp.MustCompile(\"[.!?]\\\\s*\").Split(s, -1)\n    return sum(len(sentence) >= 2 && sentence[:2] == \"I \" for sentence in sentences)\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if _, ok := x.(int); ok && _, ok := y.(int); ok && _, ok := z.(int); ok {\n        if (x.(int) + y.(int) == z.(int)) || (x.(int) + z.(int) == y.(int)) || (y.(int) + z.(int) == x.(int)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []rune{}\n    for _, ch := range message {\n        if ch.IsLetter() {\n            ch1 := ch.Upper() if ch.IsLower() else ch.Lower()\n            if strings.Contains(vowels, string(ch1)) {\n                ch1 = rune(int(ch1) + 2)\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := []int{}\n    for _, n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := strings.Join(strings.Split(fmt.Sprint(max(primes)), \" \"), \"\")\n    return sum(int(digit) for digit := range largest)\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    return all(c.IsLower() for c := range d) || all(c.IsUpper() for c := range d)\n}\n",
            "func CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num <= n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    return len(strings.Split(strings.Replace(s, vowels, \"\", -1), \"\"))\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\n",
            "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2*i\n    }\n    return result\n}\n",
            "func WordsString(s string) []string {\n    return regexp.MustCompile(\"[, ]\").Split(s, -1)\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x == y {\n        return -1\n    }\n    return y - 1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2.0 + 0.5)\n    return &strconv.FormatInt(int64(rAvg), 2)\n}\n",
            "func AllDigitsOdd(s string) bool {\n    for _, digit := range s {\n        if int(digit)%2!= 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc UniqueDigits(x []int) []int {\n    return sorted(filter(AllDigitsOdd, map(str, x)))\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := []int{}\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Slice(sortedArr, func(i, j int) bool { return sortedArr[i] > sortedArr[j] })\n    result := []string{}\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2!= 0 {\n            result[i] = sum(nums[:i])\n        } else {\n            result[i] = reduce(func(x, y int) int { return x * y }, nums[:i], 1)\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == Reverse(txt)\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := []int{0, 0}\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(strconv.Itoa(i)) {\n            cnt[i%2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func DigitsSum(n int) int {\n    nStr := fmt.Sprintf(\"%d\", n)\n    if n >= 0 {\n        return strings.Sum(strings.Split(nStr, \"\"))\n    }\n    return (int(nStr[:2]) * 2) + DigitsSum(abs(n))\n}\nfunc CountNums(arr []int) int {\n    return len(filter(func(n int) bool { return DigitsSum(n) > 0 }, arr))\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr)-i] && arr[:i] == sortedArr[len(arr)-i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    for _, num := range lst1 {\n        if num%2!= 0 {\n            oddCnt++\n        }\n    }\n    evenCnt := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Split(test, \" \")\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w]++\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n        }\n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    return s == strings.Join(strings.Split(s, \"\"), \"\")\n}\nfunc ReverseDelete(s string, c string) []string {\n    s1 := strings.Join(strings.Split(s, \"\"), \"\")\n    return []string{s1, \"yes\" if IsPalindrome(s1) else \"no\"}\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, 0)\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, rs.Replace(\"i\", strconv.Itoa(n)))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum = min(curSum+n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    return int(math.Ceil(float64(sum(arr)) / capacity))\n}\n",
            "func CountOnes(num int) int {\n    return strings.Count(fmt.Sprintf(\"%b\", num), \"1\")\n}\nfunc SortArray(arr []int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        return CountOnes(arr[i]) < CountOnes(arr[j]) || (CountOnes(arr[i]) == CountOnes(arr[j]) && arr[i] < arr[j])\n    })\n    return arr\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Split(s, \" \")\n    return filter(func(w string) bool {\n        return len(filter(func(c rune) bool {\n            return c >= 'a' && c <= 'z' && strings.Contains(consonants, string(c))\n        }, []rune(w))) == n\n    }, words)\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i] == vowels[0] && word[i-1]!= vowels[0] && word[i+1]!= vowels[0] {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func Check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    return \"Yes\" if Check(s1) || Check(s2) else \"No\"\n}\n",
            "func Maximum(arr []int, k int) []int {\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    return sum(x for i, x := range lst if i%2 == 0 && x%2!= 0)\n}\n",
            "func AddElements(arr []int, k int) int {\n    result := 0\n    for _, n := range arr[:k] {\n        if len(strconv.Itoa(n)) <= 2 {\n            result += n\n        }\n    }\n    return result\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n!= 1 {\n        if n%2!= 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n = n/2\n        }\n    }\n    return sort.IntSlice(collatz)\n}\n",
            "func ValidDate(date string) bool {\n    if len(date)!= 10 || date[2]!= \"-\" || date[5]!= \"-\" {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        return d >= 1 && d <= 31\n    }\n    if m == 4 || m == 6 || m == 9 || m == 11 {\n        return d >= 1 && d <= 30\n    }\n    if m == 2 {\n        return d >= 1 && d <= 29\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{fmt.Sprintf(\"%d\", len([c for c in txt if c >= 'a' && c <= 'z' && ord(c) % 2 == 0]))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= math.Floor(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    return \"YES\" if length > 0 && IsPrime(length) else \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if 0 in arr {\n        return new(int)\n    }\n    sign := -1\n    if len([n for n in arr if n < 0]) % 2 == 1 {\n        sign = 1\n    }\n    return new(int)\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i!= 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j!= 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i!= n - 1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j!= n - 1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        result = append(result, 1 if i%2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range []byte(fmt.Sprint(n)) {\n        if int(d) % 2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    result := 1\n    for _, o := range odds {\n        result *= o\n    }\n    return result\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx = reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n    }\n    return cnt >= 2\n}\nfunc Reverse(s []int) []int {\n    for i := len(s)/2 - 1; i >= 0; i-- {\n        j := len(s) - 1 - i\n        s[i], s[j] = s[j], s[i]\n    }\n    return s\n}\n",
            "func SumSquares(lst []float64) int {\n    return int(math.Ceil(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math.Sqrt(math",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && unicode.IsLetter(rune(last[0]))\n}\n",
            "func CanArrange(arr []int) int {\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            return i\n        }\n    }\n    return -1\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := make([]int, 0)\n    pos := make([]int, 0)\n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, i)\n        } else if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n    maxNeg := 0\n    if len(neg) > 0 {\n        maxNeg = neg[0]\n        for _, i := range neg[1:] {\n            if i > maxNeg {\n                maxNeg = i\n            }\n        }\n    }\n    minPos := 0\n    if len(pos) > 0 {\n        minPos = pos[0]\n        for _, i := range pos[1:] {\n            if i < minPos {\n                minPos = i\n            }\n        }\n    }\n    return []*int{&maxNeg, &minPos}\n}\n",
            "func AnyToReal(o interface{}) float64 {\n    switch o.(type) {\n    case string:\n        return strings.Replace(o.(string), \",\", \".\", -1)\n    case int:\n        return float64(o.(int))\n    case float64:\n        return o.(float64)\n    default:\n        panic(\"Type Error\")\n    }\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := AnyToReal(a)\n    b1 := AnyToReal(b)\n    if a1 == b1 {\n        return nil\n    }\n    if a1 > b1 {\n        return &a1\n    }\n    return &b1\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\").Replace(\" \", \"_\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst)!= 2 ||!strings.Contains(suf, lst[1]) || len(lst[0]) == 0 ||!unicode.IsLetter(rune(lst[0][0])) || len([x for x in lst[0] if unicode.IsDigit(rune(x))]) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := range lst {\n        if i%3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i%4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    return strings.Join([w for w in words if IsPrime(len(w))], \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num := int(xs[0]) * int(ns[0])\n    den := int(xs[1]) * int(ns[1])\n    return num%den == 0\n}\n",
            "func DigitsSum(n int) int {\n    nStr := fmt.Sprintf(\"%d\", n)\n    if n >= 0 {\n        return strings.Sum(strings.Split(nStr, \"\"))\n    }\n    return (int(nStr[:2]) * 2) + DigitsSum(abs(n))\n}\nfunc OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return DigitsSum(nums[i]) < DigitsSum(nums[j])\n    })\n    return nums\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    return len(filter(func(n int) bool { return n > 10 && n%2 == 1 && string(n)[0] in odds }, nums))\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i*i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2))//6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if planet1 not in names || planet2 not in names {\n        return []string{}\n    }\n    l := names.index(planet1)\n    r := names.index(planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1:r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := make([]string, 0)\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return len(result[i]) < len(result[j]) || (len(result[i]) == len(result[j]) && result[i] < result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    return sum(n * n for n in lst if n >= 0 && n % 2 == 1)\n}\n",
            "func Compare(game []int, guess []int) []int {\n    return []int{abs(x - y) for x, y in zip(game, guess)}\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := float64(-math.MaxFloat64)\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := len([c for c in ext if unicode.IsUpper(c)])\n        lower := len([c for c in ext if unicode.IsLower(c)])\n        s := float64(upper - lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return className + \".\" + maxExt\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:] + b[:i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := []byte(fmt.Sprintf(\"%d\", math.Abs(num)))\n    even := 0\n    for _, d := range ds {\n        if int(d)%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}\n    res := []string{}\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0]*s[0] + s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(make(map[rune]struct{}, len(w)))\n        for _, r := range w {\n            cnt++\n        }\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    }\n    return []int{num + remaining, 0}\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := operators\n    nums := operands\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i + 1])))\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] // nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    result := []rune(s)\n    for i, ch := range result {\n        if!unicode.IsLetter(ch) {\n            continue\n        }\n        if unicode.IsUpper(ch) {\n            result[i] = unicode.ToLower(ch)\n        } else {\n            result[i] = unicode.ToUpper(ch)\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    txtBytes := []byte(txt)\n    md5Hash.Write(txtBytes)\n    md5Encoded := md5Hash.Sum(nil)\n    return (*string)(md5Encoded)\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    return []int{i for i := lower; i <= upper; i += 2}\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new Stack<Character>();\n        var currentGroup = \"\";\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = numbers.stream().mapToDouble(x -> x).average().getAsDouble();\n        double deviation = numbers.stream().mapToDouble(x -> Math.abs(x - mean)).sum();\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i!= 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split();\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        for (Integer n : numbers) {\n            nSum += n;\n        }\n        int nProduct = 1;\n        for (Integer n : numbers) {\n            nProduct *= n;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        var maxSoFar = Double.NEGATIVE_INFINITY;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (s.equals(new StringBuilder(s).reverse().toString())) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.substring(i).equals(new StringBuilder(s.substring(i)).reverse().toString())) {\n                return s + s.substring(0, i).reverse();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        return String.join(\"\", IntStream.range(0, a.length()).mapToObj(i -> a.charAt(i) == b.charAt(i)? \"0\" : \"1\").toArray(String[]::new));\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        return b == 0? a : greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        return String.join(\" \", IntStream.range(1, n + 1).mapToObj(String::valueOf).toArray(String[]::new));\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return new HashSet<Character>(s.toLowerCase().toCharArray()).size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<String, Integer>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = Arrays.asList(musicString.split());\n        return notes.stream().map(durations::get).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n        var numList = new ArrayList<String>();\n        for (String num : numbers.split(\" \")) {\n            if (numDict.containsKey(num)) {\n                numList.add(num);\n            }\n        }\n        numList.sort(Comparator.comparingInt(numDict::get));\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = numbers.stream().sorted().collect(Collectors.toList());\n        double minDiff = Double.POSITIVE_INFINITY;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(sortedNumbers.get(i - 1));\n                closestPair.add(sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.POSITIVE_INFINITY;\n        double maxNum = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            minNum = Math.min(minNum, num);\n            maxNum = Math.max(maxNum, num);\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>(Collections.nCopies(numbers.size(), 0.0));\n        } else {\n            return new ArrayList<Double>(numbers.stream().map(num -> (num - minNum) / (maxNum - minNum)).collect(Collectors.toList()));\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream()\n           .filter(x -> x instanceof Integer)\n           .map(x -> (Integer) x)\n           .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        var flipped = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.add(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.add(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.add(Character.toLowerCase(ch));\n            }\n        }\n        return String.valueOf(flipped);\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream().filter(s -> s.startsWith(prefixStr)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(num -> num > 0).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>(Arrays.stream(l).sorted().toArray(Integer[]::new));\n        return IntStream.range(0, l.size()).mapToObj(i -> sortedThird.get(i // 3) if i % 3 == 0 else l.get(i)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return new ArrayList<Integer>(new HashSet<Integer>(l));\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.valueOf(i).count(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>(Arrays.stream(l).filter(i -> i % 2 == 0).sorted());\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            result.add(sortedEven.get(i // 2) if i % 2 == 0 else l.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3));\n                result.append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int primeFib(int n) {\n        var f = new int[]{0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt += 1;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (Integer num : l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        var digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(Integer.toString(x % bas));\n            x /= bas;\n        }\n        return String.join(\"\", digits);\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return a * h / 2.0;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        var fib = new int[]{0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2!= 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int _ = 0; _ < n; _++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char)((ch - 97 + 5) % 26 + 97));\n        }\n        return result.toString();\n    }\n    public static String decodeShift(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char)((ch - 97 + 21) % 26 + 97));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        var vowels = \"aeiouAEIOU\";\n        return txt.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(s0.toCharArray()).equals(new HashSet<Character>(s1.toCharArray()));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        return new ArrayList<Integer>(new HashSet<Integer>(l1).intersection(new HashSet<Integer>(l2)));\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return IntStream.rangeClosed(1, n).sum();\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        var vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'y' || s.charAt(i) == 'Y') {\n                cnt++;\n            } else if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        return s.chars().filter(c -> Character.isUpperCase(c)).sum();\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[words.indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[words.indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = new ArrayList<Integer>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.isEmpty()) {\n            return new ArrayList<Integer>();\n        }\n        int minEven = Collections.min(evens);\n        return Arrays.asList(minEven, arr.indexOf(minEven));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = new ArrayList<Integer>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        return goodVals.isEmpty()? -1 : Collections.max(goodVals);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        Collections.sort(lst);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = lst.size() - 1;\n        while (left <= right) {\n            result.add(lst.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(lst.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i)!= q.get(q.size() - i - 1)) {\n                isPalin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int e : q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i)!= arr.get(arr.size() - i - 1)) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return cnt1 <= cnt2? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        return num.replaceAll(\"[^2357BD]\", \"\").length();\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        return n == 1? 1 : 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        for (char d : Integer.toString(n).toCharArray()) {\n            digitsSum += Integer.parseInt(d);\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        return lst.stream().filter(x -> x % 2 == 1 && x % 2 == 0).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        var words = Arrays.stream(s.split(\" \")).map(word -> new StringBuilder(word).sort().toString()).toArray(String[]::new);\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        coords.sort(Comparator.comparingInt(a -> a.get(0)).thenComparingInt(a -> -a.get(1)));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            Collections.sort(arr, Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(new HashSet<Integer>(lst));\n        Collections.sort(sl);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        var sentences = s.split(\"[.!?]\\\\s*\");\n        return Arrays.stream(sentences).filter(sentence -> sentence.length() >= 2).mapToInt(sentence -> sentence.startsWith(\"I \")).sum();\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        return (x instanceof Integer && y instanceof Integer && z instanceof Integer &&\n                (x + y == z || x + z == y || y + z == x));\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new ArrayList<Character>();\n        for (char ch : message.toCharArray()) {\n            if (Character.isAlphabetic(ch)) {\n                char ch1 = Character.isLowerCase(ch)? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.contains(ch1)) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.add(ch1);\n            } else {\n                result.add(ch);\n            }\n        }\n        return String.valueOf(result);\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (Integer n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.isEmpty()) {\n            return 0;\n        }\n        var largest = String.valueOf(Collections.max(primes));\n        return Arrays.stream(largest.split(\"\"))\n           .mapToInt(Integer::parseInt)\n           .sum();\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        return!d.isEmpty() && (all(c.isLower() for c : d.keySet()) || all(c.isUpper() for c : d.keySet()));\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num <= n; num++) {\n            if (all(num % p!= 0 for p : primes)) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        return (int) s.chars().filter(c -> c % 2 == 0 && \"AEIOU\".contains((char) c)).count();\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        return (int) (num + (num >= 0? 0.5 : -0.5));\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\"[, ]\"));\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if (x!= y) else -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (int)((m + n) / 2.0 + 0.5);\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static boolean allDigitsOdd(String s) {\n        return s.chars().allMatch(c -> c % 2!= 0);\n    }\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream().filter(num -> allDigitsOdd(Integer.toString(num))).sorted().collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        var sortedArr = arr.stream().filter(x -> 1 <= x && x <= 9).sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n        return sortedArr.stream().map(x -> digitNames.get(x - 1)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i % 2!= 0? nums.subList(0, i).stream().mapToInt(Integer::intValue).sum() : nums.subList(0, i).stream().mapToInt(Integer::intValue).reduce(1, (x, y) -> x * y));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new ArrayList<Integer>(Arrays.asList(0, 0));\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(Integer.toString(i))) {\n                cnt.set(i % 2, cnt.get(i % 2) + 1);\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return Arrays.stream(nStr.split(\"\"))\n               .mapToInt(Integer::parseInt)\n               .sum();\n        } else {\n            return Math.abs(n) % 10 * 2 + digitsSum(Math.abs(n) / 10);\n        }\n    }\n    public static int countNums(List<Integer> arr) {\n        return Arrays.stream(arr.toArray())\n           .filter(n -> digitsSum(n) > 0)\n           .count();\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        var sortedArr = arr.stream().sorted().collect(Collectors.toList());\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, arr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        for (Integer num : lst1) {\n            if (num % 2!= 0) {\n                oddCnt++;\n            }\n        }\n        int evenCnt = 0;\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = Arrays.stream(test.split(\" \")).filter(w -> w.length() > 0).collect(Collectors.toList());\n        for (String w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = Collections.max(freq.values());\n            for (String k : freq.keySet()) {\n                if (freq.get(k) == maxFreq) {\n                    result.put(k, freq.get(k));\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        var s1 = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(ch)) {\n                s1.append(ch);\n            }\n        }\n        var result = new ArrayList<String>();\n        result.add(s1.toString());\n        result.add(\"yes\" if s1.toString().equals(new StringBuilder(s1.toString()).reverse().toString()) else \"no\");\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                if (d % 2 == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Math.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream().map(arr -> (int) Math.ceil(arr.stream().mapToInt(Integer::intValue).sum() / capacity)).sum();\n    }\n}\n",
            "class Global {\n    public static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n    public static List<Integer> sortArray(List<Integer> arr) {\n        arr.sort(Comparator.comparingInt(Global::countOnes).thenComparingInt(x -> x));\n        return arr;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = Arrays.asList(s.split(\" \"));\n        return words.stream().filter(w -> w.length() > 0 && w.chars().filter(c -> Character.toLowerCase(c) in consonants).count() == n).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (word.charAt(i) == vowels.charAt(0) && word.charAt(i - 1)!= vowels.charAt(0) && word.charAt(i + 1)!= vowels.charAt(0)) {\n                return word.charAt(i);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return check(s1) || check(s2)? \"Yes\" : \"No\";\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        return Arrays.stream(arr).sorted().skip(arr.length - k).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        return lst.stream().filter(x -> x % 2 == 0 && x % 2!= 0).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return Arrays.stream(arr.subList(0, k).toArray(Integer[]::new))\n           .filter(n -> String.valueOf(n).length() <= 2)\n           .mapToInt(Integer::intValue)\n           .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        collatz.add(1);\n        while (n!= 1) {\n            if (n % 2!= 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length()!= 10 || date.charAt(2)!= \"-\" || date.charAt(5)!= \"-\") {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        return (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31 || (m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30 || m == 2 && d >= 1 && d <= 29;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            var result = new ArrayList<String>();\n            result.add(String.valueOf(txt.chars().filter(c -> c < 128 && c % 2 == 0).count()));\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        var freq = new HashMap<Integer, Integer>();\n        for (Integer i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return Collections.max(freq.values(), Comparator.comparingInt(Integer::intValue)) <= 2;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return \"YES\" + (length > 0 && isPrime(length)? \"\" : \"NO\");\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = -1 * (int) Arrays.stream(arr.toArray()).filter(n -> n < 0).count() % 2;\n        return Optional.of(sign * Arrays.stream(arr.toArray()).map(n -> Math.abs(n)).sum());\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    var temp = new ArrayList<Integer>();\n                    if (i!= 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j!= 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i!= n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j!= n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(temp);\n                }\n            }\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(1 if i % 2 == 0 else minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        var seq = new ArrayList<Integer>();\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (char d : String.valueOf(n).toCharArray()) {\n            if (Integer.parseInt(String.valueOf(d)) % 2 == 1) {\n                odds.add(Integer.parseInt(String.valueOf(d)));\n            }\n        }\n        return odds.stream().reduce(1, (x, y) -> x * y);\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream().map(n -> Math.pow(Math.ceil(n), 2)).reduce(0, Integer::sum);\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        int lastIndex = txt.lastIndexOf(' ');\n        if (lastIndex == -1) {\n            return false;\n        }\n        String last = txt.substring(lastIndex + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        int[] idx = new int[arr.size() - 1];\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx[i - 1] = i;\n            }\n        }\n        return Arrays.stream(idx).max().orElse(-1);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else if (i > 0) {\n                pos.add(i);\n            }\n        }\n        var maxNeg = neg.isEmpty()? null : Collections.max(neg);\n        var minPos = pos.isEmpty()? null : Collections.min(pos);\n        return Arrays.asList(maxNeg, minPos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        if (a instanceof String) {\n            return Optional.of(Double.valueOf(((String) a).replace(',', '.')));\n        } else if (a instanceof Integer) {\n            return Optional.of(Double.valueOf((Integer) a));\n        } else if (a instanceof Double) {\n            return Optional.of((Double) a);\n        }\n        throw new RuntimeException(\"Type Error\");\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length!= 2 ||!lst[1].equals(\"txt\") &&!lst[1].equals(\"exe\") &&!lst[1].equals(\"dll\") || lst[0].length() == 0 ||!Character.isLetter(lst[0].charAt(0)) || Arrays.stream(lst[0].split(\"\")).filter(x -> Character.isDigit(x.charAt(0))).count() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        var words = sentence.split(\" \");\n        return String.join(\" \", Arrays.stream(words).filter(w -> isPrime(w.length())).toArray(String[]::new));\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return Arrays.stream(nStr.split(\"\"))\n               .mapToInt(Integer::parseInt)\n               .sum();\n        } else {\n            return Math.abs(n) % 10 * 2 + digitsSum(Math.abs(n) / 10);\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream()\n           .sorted(Comparator.comparingInt(Global::digitsSum))\n           .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        return nums.stream()\n           .filter(n -> n > 10 && n % 2 == 1 && Character.toString(n.charAt(0)).equals(\"13579\"))\n           .count();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        var names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) ||!names.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream()\n           .filter(n -> n >= 0 && n % 2 == 1)\n           .map(n -> n * n)\n           .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        return IntStream.range(0, game.size())\n           .mapToObj(i -> Math.abs(game.get(i) - guess.get(i)))\n           .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxS = Integer.MIN_VALUE;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = (int) ext.chars().filter(c -> Character.isUpperCase(c)).count();\n            int lower = (int) ext.chars().filter(c -> Character.isLowerCase(c)).count();\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.substring(i).concat(b.substring(0, i)).equals(a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = String.valueOf(Math.abs(num));\n        var even = (int) ds.chars().filter(c -> c % 2 == 0).count();\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        var values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        var numerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        var res = new ArrayList<String>();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        var s = Arrays.stream(new int[] {a, b, c}).sorted().toArray();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<Character>(w.toCharArray()).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = new ArrayList<String>(operators);\n        var nums = new ArrayList<Integer>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isAlphabetic(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null) {\n            return null;\n        }\n        try {\n            MessageDigest md5Hash = MessageDigest.getInstance(\"MD5\");\n            byte[] txtBytes = txt.getBytes();\n            md5Hash.update(txtBytes);\n            byte[] md5Encoded = md5Hash.digest();\n            return Optional.of(new String(md5Encoded, \"UTF-8\"));\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        return IntStream.rangeClosed(lower, upper).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    const deviation = numbers.reduce((a, b) => a + Math.abs(b - mean));\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i!== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split();\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter((s) => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((a, b) => a + b, 0);\n    const nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    let maxSoFar = -Infinity;\n    const result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a, b) => {\n    return a.split(\"\").map((x, i) => x ^ b[i]).join(\"\");\n}\n",
            "export const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    return Array.from({length: n + 1}, (_, i) => i).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes = musicString.split();\n    return notes.map((note) => durations[note]);\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter((x) => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n};\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    return values.filter((x) => typeof x === \"number\");\n}\n",
            "export const strLength = (s) => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n //= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    return numbers.filter((num) => counts[num] === 1);\n}\n",
            "export const flipCase = (s) => {\n    return s.replace(/[a-z]/gi, (ch) => ch.toUpperCase()).replace(/[A-Z]/gi, (ch) => ch.toLowerCase());\n}\n",
            "export const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter((s) => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter((num) => num > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = l.filter((e, i) => i % 3 === 0).sort();\n    return l.map((e, i) => sortedThird[i // 3] || e);\n}\n",
            "export const listUnique = (l) => {\n    return [...new Set(l)].sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l) => {\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.filter((e, i) => i % 2 === 0).sort();\n    return l.map((e, i) => (i % 2 === 0? sortedEven[i // 2] : e));\n}\n",
            "export const encodeCyclic = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n ** 2;\n}\n",
            "export const incrList = (l) => {\n    return l.map((i) => i + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x //= bas;\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = l.slice().sort((a, b) => a - b);\n    if (l.length % 2!== 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97));\n    }\n    return result.join(\"\");\n}\nexport const decodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97));\n    }\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.split(\"\").filter((char) =>!vowels.includes(char)).join(\"\");\n}\n",
            "export const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0) === new Set(s1);\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    return l1.filter((e) => l2.includes(e));\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n //= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    return Array.from({ length: n + 1 }, (_, i) => i).reduce((a, b) => a + b, 0);\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n) => {\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    return s.split(\"\").reduce((sum, c) => sum + (c.toUpperCase().charCodeAt(0) - 64), 0);\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.index('apples') - 1]);\n    const oranges = parseInt(words[words.index('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = arr.filter((n) => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    const goodVals = [];\n    for (const [k, v] of Object.entries(freqs)) {\n        if (v >= k) {\n            goodVals.push(k);\n        }\n    }\n    return goodVals.length? Math.max(...goodVals) : -1;\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((e, i) => e === q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return lst1.length <= lst2.length? lst1 : lst2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    a = Math.abs(a);\n    const root = Math.floor(Math.pow(a, 1 / 3));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num) => {\n    return num.split(\"\").filter((x) => x === \"2\" || x === \"3\" || x === \"5\" || x === \"7\" || x === \"B\" || x === \"D\").length;\n}\n",
            "export const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s) => {\n    const set = new Set();\n    while (s!== 1 &&!set.has(s)) {\n        set.add(s);\n        s = s.toString().split(\"\").reduce((a, b) => a + b ** 2, 0);\n    }\n    return s === 1;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(length)) >= i; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "export const solve = (n) => {\n    const digitsSum = Array.from(String(n), Number).reduce((a, b) => a + b, 0);\n    return (digitsSum >>> 0).toString(2);\n}\n",
            "export const add = (lst) => {\n    return lst.filter((x, i) => i % 2 === 1 && x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \").map((word) => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] - b[0] || -a[1] + b[1]);\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    const result = [];\n    for (const ch of s) {\n        const shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 122) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = [...new Set(lst)].sort((a, b) => a - b);\n    return sl.length < 2? null : sl[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.reduce((acc, sentence) => {\n        if (sentence.length >= 2) {\n            return acc + (sentence.slice(0, 2) === \"I \");\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const anyInt = (x, y, z) => {\n    return (\n        typeof x === \"number\" &&\n        typeof y === \"number\" &&\n        typeof z === \"number\" &&\n        (x + y === z || x + z === y || y + z === x)\n    );\n}\n",
            "const vowels = \"aeiouAEIOU\";\nexport const encode = (message) => {\n    const result = [];\n    for (const ch of message) {\n        if (ch.isAlpha()) {\n            const ch1 = ch.toUpperCase() if ch.isLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = primes.reduce((a, b) => a > b? a : b);\n    return largest.toString().split(\"\").reduce((a, b) => a + +b, 0);\n}\n",
            "export const checkDictCase = (d) => {\n    if (!d) {\n        return false;\n    }\n    return Array.from(d.keys()).every((c) => c.toLowerCase() === c) || Array.from(d.keys()).every((c) => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num <= n; num++) {\n        if (primes.every(p => num % p!== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n",
            "export const countUpper = (s) => {\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && \"AEIOU\".includes(c)).length;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    return num >= 0? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\n}\n",
            "export const makeAPile = (n) => {\n    return Array.from({length: n}, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s) => {\n    return s.split(/[, ]/).filter((w) => w.length > 0);\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 if (x!== y) else -1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2.0);\n    return rAvg.toString(2);\n}\n",
            "export const allDigitsOdd = (s) => {\n    return s.split(\"\").every((digit) => {\n        return Number(digit) % 2!== 0;\n    });\n}\nexport const uniqueDigits = (x) => {\n    return x.filter((num) => {\n        return allDigitsOdd(num.toString());\n    }).sort((a, b) => a - b);\n}\n",
            "const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\nexport const byLength = (arr) => {\n    const sortedArr = arr.filter(x => 1 <= x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    return nums.map((i, j) => (i % 2!== 0? nums.slice(0, j + 1).reduce((x, y) => x + y, 0) : nums.slice(0, j + 1).reduce((x, y) => x * y, 1)));\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr) => {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr) => {\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join(\"\") === sortedArr.slice(0, arr.length - i).join(\"\") && arr.slice(0, i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\")) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const oddCnt = lst1.filter(num => num % 2!== 0).length;\n    const evenCnt = lst2.filter(num => num % 2 === 0).length;\n    return evenCnt >= oddCnt? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = test.split(\" \").filter((w) => w.length > 0);\n    for (const w of words) {\n        freq[w] = freq[w] + 1 || 1;\n    }\n    const result = {};\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const [k, v] of Object.entries(freq)) {\n            if (v === maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s, c) => {\n    const s1 = s.split(\"\").filter((ch) =>!c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1)? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = num.split(\"\").reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    return grid.map(arr => Math.ceil(arr.reduce((a, b) => a + b, 0) / capacity)).reduce((a, b) => a + b, 0);\n}\n",
            "export const countOnes = (num) => {\n    return num.toString(2).split(\"1\").length - 1;\n}\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => countOnes(a) - countOnes(b) || a - b);\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => c.toLowerCase() in consonants).length === n);\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (word[i] in vowels && word[i - 1]!== vowels && word[i + 1]!== vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const check = (s) => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return check(s1) || check(s2)? \"Yes\" : \"No\";\n}\n",
            "export const maximum = (arr, k) => {\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst) => {\n    return lst.reduce((acc, cur, i) => acc + (i % 2 === 0 && cur % 2!== 0? cur : 0), 0);\n}\n",
            "export const addElements = (arr, k) => {\n    return arr.slice(0, k).reduce((acc, n) => acc + (n <= 99? n : 0), 0);\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n!== 1) {\n        if (n % 2!== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date) => {\n    if (date.length!== 10 || date[2]!== \"-\" || date[5]!== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m === 1 || m === 3 || m === 5 || m === 7 || m === 8 || m === 10 || m === 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m === 4 || m === 6 || m === 9 || m === 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m === 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.split(\"\").filter((c) => c.toLowerCase() && c.charCodeAt(0) % 2 === 0).length];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = freq.get(i, 0) + 1;\n    }\n    return Math.max(...Object.values(freq), 0) <= 2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return \"YES\" if (length > 0 && isPrime(length)) else \"NO\";\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1? -1 : 1;\n    return sign * arr.reduce((a, b) => a + Math.abs(b), 0);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i!== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j!== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i!== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j!== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1 if i % 2 === 0 else minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = n.toString().split(\"\").filter(d => parseInt(d) % 2 === 1);\n    return odds.reduce((x, y) => x * y, 1) || 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    return lst.map((n) => Math.pow(Math.ceil(n), 2)).reduce((a, b) => a + b, 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    const last = txt.slice(txt.lastIndexOf(' ') + 1);\n    return last.length === 1 && last.toLowerCase() >= 'a' && last.toLowerCase() <= 'z';\n}\n",
            "export const canArrange = (arr) => {\n    const idx = arr.slice(1).reduce((acc, cur, i) => {\n        if (cur < arr[i - 1]) {\n            acc.push(i);\n        }\n        return acc;\n    }, []);\n    return idx.length? Math.max(...idx) : -1;\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0? Math.max(...neg) : null;\n    const minPos = pos.length > 0? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o) => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return parseFloat(o);\n    } else if (typeof o === \"number\") {\n        return o;\n    }\n    throw new Error(\"Type Error\");\n}\nexport const compareOne = (a, b) => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length!== 2 ||!lst[1] in suf || lst[0].length === 0 ||!lst[0][0].match(/[a-zA-Z]/g) || lst[0].match(/[0-9]/g).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((a, b) => a + parseInt(b), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(b) - digitsSum(a));\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && n.toString()[0] in odds).length;\n}\n",
            "export const getMaxTriples = (n) => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nexport const bf = (planet1, planet2) => {\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    return lst.filter(s => s.length % 2 === 0).sort((a, b) => {\n        if (a.length!== b.length) {\n            return b.length - a.length;\n        }\n        return a.localeCompare(b);\n    });\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    return lst.filter(n => n >= 0 && n % 2 === 1).map(n => n * n).reduce((a, b) => a + b, 0);\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter((c) => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter((c) => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = String(Math.abs(num));\n    const even = ds.split(\"\").filter((d) => d.charCodeAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] *= nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] += nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    const result = [];\n    for (const ch of s) {\n        if (ch.toLowerCase() === ch) {\n            result.push(ch.toUpperCase());\n        } else {\n            result.push(ch.toLowerCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = md5(txt);\n    return md5Hash;\n}\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [...Array(upper - lower + 1).keys()].map((i) => lower + i).filter((i) => i % 2 === 0);\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.removeAt(stk.lastIndex)\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    val deviation = numbers.map { abs(it - mean) }.sum()\n    return deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in numbers.indices) {\n        if (i!= 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split()\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.reduce { x, y -> x * y }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Float.NEGATIVE_INFINITY\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = maxOf(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in s.indices) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    return a.zip(b).map { (x, y) -> if (x == y) \"0\" else \"1\" }.joinToString(\"\")\n}\n",
            "fun longest(strs: List<String>): String? {\n    return strs.maxByOrNull { it.length }\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    return if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return \" \".join(List(n + 1) { i -> i.toString() })\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    return s.toLowerCase().toSet().size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split()\n    return notes.map { durations[it] }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in s.length - substring.length downTo 0) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = numbers.split(\" \").filter { it in numDict }\n    return numList.sortedWith(compareBy { numDict[it] }).joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.POSITIVE_INFINITY\n    var closestPair = listOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.minOrNull()!!\n    val maxNum = numbers.maxOrNull()!!\n    return if (minNum == maxNum) {\n        List(numbers.size) { 0.0 }\n    } else {\n        numbers.map { (it - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filterIsInstance<Int>()\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = numbers.groupingBy { it }.eachCount()\n    return numbers.filter { counts[it] == 1 }\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.add(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.add(ch.toUpperCase())\n        } else if (ch.isUpperCase()) {\n            flipped.add(ch.toLowerCase())\n        }\n    }\n    return flipped.joinToString(\"\")\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * x.pow(i)\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sorted()[::3]\n    return l.mapIndexed { i, _ -> if (i % 3 == 0) sortedThird[i // 3] else l[i] }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    return l.sorted().distinct()\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    return l.maxOrNull()?: 0\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 1..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += str(i).count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.sorted()[::2]\n    return l.mapIndexed { i, _ -> if (i % 2 == 0) sortedEven[i // 2] else l[i] }\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = mutableListOf<Char>()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i))\n        } else {\n            result.append(s[i + 1])\n            result.append(s[i + 2])\n            result.append(s[i])\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    var f = listOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = listOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    val digits = mutableListOf<String>()\n    var n = x\n    while (n > 0) {\n        digits.add(n % bas.toString())\n        n /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble() * h / 2.0\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = arrayOf(0, 0, 2, 0)\n    for (i in 4 until n + 1) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    return if (l.size % 2!= 0) sl[l.size / 2] else (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    repeat(n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        result.add(\n            ((((ord(ch) - 97 + 5) % 26) + 97).toChar())\n        )\n    }\n    return result.joinToString(\"\")\n}\nfun decodeShift(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        result.add(\n            ((((ord(ch) - 97 + 21) % 26) + 97).toChar())\n        )\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return txt.filter { it!in vowels }\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { x -> x < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    return if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"<\") {\n            depth += 1\n        } else if (b == \">\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zipWithNext().map { it.second - it.first }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return l1.intersect(l2).sorted()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return (1..n).sum()\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"(\") {\n            depth += 1\n        } else if (b == \")\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    return xs.mapIndexed { i, x -> x * i }\n}\n",
            "fun fibfib(n: Int): Int {\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in s.indices) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reversed()\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumOf { it.toInt() }\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(' ')\n    val apples = words.indexOf(\"apples\") - 1\n    val oranges = words.indexOf(\"oranges\") - 1\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.minOrNull()!!\n    return listOf(minEven, arr.indexOf(minEven))\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        freqs[n] = freqs.getOrDefault(n, 0) + 1\n    }\n    val goodVals = freqs.filter { it.value >= it.key }.keys\n    return goodVals.maxOrNull()?: -1\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty()) {\n        return false\n    }\n    val isPalin = q.all { it == q[q.size - it - 1] }\n    val total = q.sum()\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i]!= arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumOf { it.length }\n    val cnt2 = lst2.sumOf { it.length }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    return if (n < 2) false else (2 until floor(sqrt(n.toDouble())).toInt()).none { n % it == 0 }\n}\nfun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2 until a + 1) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    return if (n < 2) x == n else x % (n * n) == 0\n}\n",
            "fun isCube(a: Int): Boolean {\n    val root = Math.round(Math.pow(a.toDouble(), 1.0 / 3.0)).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    return num.count { it in \"2357BD\" }\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = dec.toBinaryString()\n    return \"db$binarydb\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    val set = mutableSetOf<Int>()\n    var sum = 0\n    for (c in s) {\n        sum += (c - '0') * (c - '0')\n        if (sum in set) {\n            return false\n        }\n        set.add(sum)\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\")\n        } else if (g > 3.7) {\n            result.add(\"A\")\n        } else if (g > 3.3) {\n            result.add(\"A-\")\n        } else if (g > 3.0) {\n            result.add(\"B+\")\n        } else if (g > 2.7) {\n            result.add(\"B\")\n        } else if (g > 2.3) {\n            result.add(\"B-\")\n        } else if (g > 2.0) {\n            result.add(\"C+\")\n        } else if (g > 1.7) {\n            result.add(\"C\")\n        } else if (g > 1.3) {\n            result.add(\"C-\")\n        } else if (g > 1.0) {\n            result.add(\"D+\")\n        } else if (g > 0.7) {\n            result.add(\"D\")\n        } else if (g > 0.0) {\n            result.add(\"D-\")\n        } else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2 until sqrt(length.toDouble()).toInt() + 1) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    return if (n == 1) 1 else 2 * 9 * (10.0.pow(n - 2.0)).toInt()\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = n.toString().sumOf { it.digitToInt() }\n    return Integer.toBinaryString(digitsSum)\n}\n",
            "fun add(lst: List<Int>): Int {\n    return lst.filterIndexed { i, x -> i % 2 == 1 && x % 2 == 0 }.sum()\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { word -> word.sorted() }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    return coords.sortedWith(compareBy({ it[0] }, { -it[1] }))\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) {\n        return emptyList()\n    }\n    if ((arr[0] + arr.last()) % 2 == 0) {\n        return arr.sortedDescending()\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "fun encrypt(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        val shifted = ch.code + 4\n        if (shifted > 'z'.code) {\n            shifted -= 26\n        }\n        result.add(shifted.toChar())\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.sorted().distinct()\n    return if (sl.size < 2) null else sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.split(\"[.!?]\\\\s*\".toRegex())\n    return sentences.filter { it.length >= 2 }.map { it.startsWith(\"I \") }.sum()\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    return (x is Int && y is Int && z is Int && (x + y == z || x + z == y || y + z == x))\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                ch1 = ch1.plus(2)\n            }\n            result.add(ch1)\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2 until sqrt(n).toInt() + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) {\n        return 0\n    }\n    val largest = primes.maxOrNull()!!\n    return largest.toString().sumOf { it.digitToInt() }\n}\n",
            "fun checkDictCase(d: Map<String,String>): Boolean {\n    return if (d.isEmpty()) false else (d.keys.all { it.isLowerCase() } || d.keys.all { it.isUpperCase() })\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2..n) {\n        if (primes.all { num % it!= 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filterIndexed { i, c -> i % 2 == 0 && c in vowels }.count()\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toFloat()\n    return if (num >= 0) num.toInt() + 0.5 else num.toInt() - 0.5\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (0 until n).map { n + 2 * it }\n}\n",
            "fun wordsString(s: String): List<String> {\n    return s.split(\",|\\\\s\".toRegex())\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    return if (x > y) -1 else if (y % 2 == 0) y else if (x!= y) y - 1 else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    val rAvg = (m + n) / 2.0 + 0.5\n    return if (rAvg.toInt() == rAvg) bin(rAvg.toInt())[2:] else null\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    return s.all { it.toInt() % 2!= 0 }\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    return x.filter { allDigitsOdd(it.toString()) }.sorted()\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { it in 1..9 }.sortedDescending()\n    return sortedArr.map { digitNames[it - 1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, _ ->\n        if (i % 2!= 0) nums.take(i).sum() else nums.take(i).reduce { x, y -> x * y }\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = mutableListOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) nStr.sumOf { it.digitToInt() } else (nStr[0].digitToInt() * 2 + digitsSum(abs(n)))\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.count { digitsSum(it) > 0 }\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, arr.size)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.count { it % 2!= 0 }\n    val evenCnt = lst2.count { it % 2 == 0 }\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String,Int> {\n    val freq = mutableMapOf<String,Int>()\n    val words = test.split(\" \").filter { it.length > 0 }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = mutableMapOf<String,Int>()\n    if (freq.size > 0) {\n        val maxFreq = freq.values.max()!!\n        for ((k, v) in freq) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it!in c }\n    return listOf(s1, \"yes\" if isPalindrome(s1) else \"no\")\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.count { it.code % 2 == 1 }\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.map { ceil(it.sum() / capacity.toDouble()).toInt() }.sum()\n}\n",
            "fun countOnes(num: Int): Int {\n    return Integer.bitCount(num)\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedWith(compareBy({ countOnes(it) }, { it }))\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.length > 0 }\n    return words.filter { it.count { c -> c.toLowerCase() in consonants } == n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in (word.length - 2) downTo 0 step 1) {\n        if (word[i] in vowels && word[i - 1]!in vowels && word[i + 1]!in vowels) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == \"(\") {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\nfun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    return arr.sorted().takeLast(k).toList()\n}\n",
            "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { i, x -> i % 2 == 0 && x % 2!= 0 }.sum()\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf(1)\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (date.length!= 10 || date[2]!= \"-\" || date[5]!= \"-\") {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    return when (m) {\n        1, 3, 5, 7, 8, 10, 12 -> d in 1..31\n        4, 6, 9, 11 -> d in 1..30\n        2 -> d in 1..29\n        else -> false\n    }\n}\n",
            "fun splitWords(txt: String): List<String> {\n    return if (txt.contains(\" \")) txt.split(\" \") else if (txt.contains(\",\")) txt.split(\",\") else listOf(txt.filter { it.isLowerCase() && it.toInt() % 2 == 0 }.length.toString())\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    for (i in 1 until lst.size) {\n        if (lst[i-1] > lst[i]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2 until floor(sqrt(n.toDouble())).toInt() + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n    val sign = if (arr.count { it < 0 } % 2 == 1) -1 else 1\n    return sign * arr.map { it.abs() }.sum()\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i!= 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j!= 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i!= n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j!= n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    val seq = mutableListOf(1, 3)\n    for (i in 2 until n + 1) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().filter { it.toInt() % 2 == 1 }.map { it.toInt() }\n    return odds.reduce { x, y -> x * y } if odds.isNotEmpty() else 0\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for (i in s.indices) {\n        if (s[i] == '[') {\n            openIdx.add(i)\n        } else if (s[i] == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    return lst.map { ceil(it).pow(2) }.sum()\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    val idx = arr.withIndex().filter { it.value < it.previous() }.map { it.index }\n    return idx.maxOrNull()?: -1\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = if (neg.isEmpty()) null else neg.maxOrNull()\n    val minPos = if (pos.isEmpty()) null else pos.minOrNull()\n    return listOf(maxNeg, minPos)\n}\n",
            "fun anyToReal(o: Any): Double {\n    return when (o) {\n        is String -> o.replace(',', '.').toDouble()\n        is Int -> o.toDouble()\n        is Double -> o\n        else -> throw RuntimeException(\"Type Error\")\n    }\n}\nfun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    return if (a1 == b1) null else if (a1 > b1) a1 else b1\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replace(\" \", \"_\").replace(Regex(\"\\\\s{3,}\"), \"-\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size!= 2 ||!lst[1] in suf || lst[0].isEmpty() ||!lst[0][0].isLetter() || lst[0].filter { it.isDigit() }.size > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i]\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.filter { isPrime(it.length) }.joinToString(\" \")\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.sumOf { it.digitToInt() }\n    } else {\n        (nStr[0].digitToInt() * 2 + digitsSum(abs(n)))\n    }\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedBy { digitsSum(it) }\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.count { n -> n > 10 && n % 2 == 1 && n.toString()[0] in odds }\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    val c = IntArray(3)\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1!in names || planet2!in names) {\n        return emptyList()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        l to r\n    }\n    if (l == r) {\n        return emptyList()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { it.length % 2 == 0 }\n    return result.sortedWith(compareBy({ it.length }, { it }))\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2 until sqrt(n).toInt() + 1) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    return lst.filter { it >= 0 && it % 2 == 1 }.map { it * it }.sum()\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.zip(guess).map { (x, y) -> abs(x - y) }\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = -Float.MAX_VALUE\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { it.isUpperCase() }\n        val lower = ext.count { it.isLowerCase() }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"$className.$maxExt\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    return if (a.length < b.length) false else b.substring(b.length) + b.substring(0, b.length) in a\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.toString().toCharArray()\n    val even = ds.count { it.toInt() % 2 == 0 }\n    return listOf(even, ds.size - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val sorted = listOf(a, b, c).sorted()\n    return sorted[0] * sorted[0] + sorted[1] * sorted[1] == sorted[2] * sorted[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    return if (need <= remaining) {\n        listOf(num + need, remaining - need)\n    } else {\n        listOf(num + remaining, 0)\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i].toDouble().pow(nums[i + 1].toDouble()).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i--\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        }\n        i++\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (ch.isLetter()) {\n            result.add(if (ch.isUpperCase()) ch.toLowerCase() else ch.toUpperCase())\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) {\n        return null\n    }\n    val md5Hash = MessageDigest.getInstance(\"MD5\")\n    val txtBytes = txt.encodeToByteArray()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.digest()\n    return md5Encoded.toHex()\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    return (lower..upper).filter { it % 2 == 0 }\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    foreach ($numbers as $i => $n1) {\n        foreach ($numbers as $j => $n2) {\n            if ($i!== $j && abs($n1 - $n2) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch == \"(\") {\n            $stk[] = $ch;\n            $currentGroup.= $ch;\n        } elseif ($ch == \")\") {\n            array_pop($stk);\n            $currentGroup.= $ch;\n            if (!$stk) {\n                $groups[] = $currentGroup;\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_sum(array_map(function ($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers));\n    return $deviation / count($numbers);\n}\n",
            "function intersperse ($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i!= 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach (str_split($group) as $ch) {\n            if ($ch == \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch == \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring)!== false;\n    });\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_product($numbers);\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = -INF;\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome ($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome ($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s. substr(strrev($s), 0, $i);\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor ($a, $b) {\n    return implode(\"\", array_map(function ($x, $y) {\n        return $x == $y? \"0\" : \"1\";\n    }, str_split($a), str_split($b)));\n}\n",
            "function longest ($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longestS = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longestS)) {\n            $longestS = $s;\n        }\n    }\n    return $longestS;\n}\n",
            "function greatestCommonDivisor ($a, $b) {\n    return $b == 0? $a : greatestCommonDivisor($b, $a % $b);\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence ($n) {\n    return implode(\" \", range(1, $n + 1));\n}\n",
            "function countDistinctCharacters ($s) {\n    return count(array_unique(str_split(strtoupper($s))));\n}\n",
            "$durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n$notes = explode(\" \", $musicString);\nreturn array_map(function ($note) use ($durations) {\n    return $durations[$note];\n}, $notes);\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "$numDict = [\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\" => 9,\n];\n$numList = array_filter(explode(\" \", $numbers), function ($x) use ($numDict) {\n    return $x in $numDict;\n});\nusort($numList, function ($x) use ($numDict) {\n    return $numDict[$x];\n});\nreturn implode(\" \", $numList);\n",
            "function findClosestElements ($numbers) {\n    $sortedNumbers = $numbers;\n    sort($sortedNumbers);\n    $minDiff = INF;\n    $closestPair = [];\n    for ($i = 1; $i < count($sortedNumbers); $i++) {\n        $diff = $sortedNumbers[$i] - $sortedNumbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$sortedNumbers[$i - 1], $sortedNumbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(\n            function ($num) use ($minNum, $maxNum) {\n                return ($num - $minNum) / ($maxNum - $minNum);\n            },\n            $numbers\n        );\n    }\n}\n",
            "function filterIntegers ($values) {\n    return array_filter($values, 'is_int');\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n //= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = array_count_values($numbers);\n    return array_filter($numbers, function ($num) use ($counts) {\n        return $counts[$num] == 1;\n    });\n}\n",
            "function flipCase ($s) {\n    $flipped = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode('', $flipped);\n}\n",
            "function concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function ($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "function getPositive ($l) {\n    return array_filter($l, function ($num) {\n        return $num > 0;\n    });\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird ($l) {\n    $sortedThird = array_values(array_sort($l, function ($v) {\n        return $v;\n    }));\n    $result = [];\n    foreach ($l as $i => $v) {\n        $result[] = $sortedThird[$i // 3] if $i % 3 == 0 else $v;\n    }\n    return $result;\n}\n",
            "function listUnique ($l) {\n    return array_unique($l);\n}\n",
            "function maxElement ($l) {\n    return max($l);\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count($i, \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = array_values(array_filter(\n        $l,\n        function ($v, $k) {\n            return $k % 2 == 0;\n        }\n    ));\n    $result = [];\n    foreach ($l as $i => $v) {\n        $result[] = $sortedEven[$i // 2] if $i % 2 == 0 else $v;\n    }\n    return $result;\n}\n",
            "function encodeCyclic ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode('', $result);\n}\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib ($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt += 1;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n ** 2;\n}\n",
            "function incrList ($l) {\n    return array_map(function ($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (-$num in $seen) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = str($x % $bas);\n        $x //= $bas;\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[0] + $fib[1] + $fib[2] + $fib[3];\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    $sl = $l;\n    sort($sl);\n    if (count($l) % 2!= 0) {\n        return $sl[count($l) // 2];\n    } else {\n        return ($sl[count($l) // 2] + $sl[count($l) // 2 - 1]) / 2;\n    }\n}\n",
            "function isPalindrome ($txt) {\n    return $txt === strrev($txt);\n}\n",
            "function modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result[] = chr(((ord($s[$i]) - 97 + 5) % 26) + 97);\n    }\n    return \"\".join($result);\n}\nfunction decodeShift ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result[] = chr(((ord($s[$i]) - 97 + 21) % 26) + 97);\n    }\n    return \"\".join($result);\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return preg_replace(\"/[aeiouAEIOU]/\", \"\", $txt);\n}\n",
            "function belowThreshold ($l, $t) {\n    return array_reduce($l, function ($carry, $x) use ($t) {\n        return $carry && $x < $t;\n    }, true);\n}\n",
            "function add ($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count(array_intersect(str_split($s0), str_split($s1))) == count(str_split($s0));\n}\n",
            "function fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"<\") {\n            $depth++;\n        } elseif ($b == \">\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = array_map(function ($x, $y) {\n        return $y - $x;\n    }, $l, array_slice($l, 1));\n    return count(array_filter($diff, function ($x) {\n        return $x <= 0;\n    })) == count($diff) || count(array_filter($diff, function ($x) {\n        return $x >= 0;\n    })) == count($diff);\n}\n",
            "function common ($l1, $l2) {\n    return array_intersect($l1, $l2);\n}\n",
            "function largestPrimeFactor ($n) {\n    while ($n % 2 == 0) {\n        $n /= 2;\n    }\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return array_sum(range(0, $n + 1));\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"(\") {\n            $depth++;\n        } elseif ($b == \")\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib ($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n--;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, $s[$i])!== false || ($i == strlen($s) - 1 && $s[$i] == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $xStr = (string) $x;\n    if ($shift > strlen($xStr)) {\n        return strrev($xStr);\n    } else {\n        return substr($xStr, -$shift). substr($xStr, 0, -$shift);\n    }\n}\n",
            "function digitSum ($s) {\n    return array_sum(array_map(ord, str_split($s, 1, PREG_SPLIT_NO_EMPTY)));\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[array_search('apples', $words) - 1]);\n    $oranges = intval($words[array_search('oranges', $words) - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = array_filter($arr, function ($n) {\n        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $minEven = min($evens);\n    return [$minEven, array_search($minEven, $arr)];\n}\n",
            "function search ($lst) {\n    $freqs = array_count_values($lst);\n    $goodVals = array_filter($freqs, function ($v) {\n        return $v >= $k;\n    });\n    return max($goodVals, default=-1);\n}\n",
            "function strangeSortList ($lst) {\n    $sl = $lst;\n    $sl = array_multisort($sl, SORT_REGULAR);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i]!= $q[count($q) - $i - 1]) {\n            $isPalin = false;\n            break;\n        }\n    }\n    $total = 0;\n    foreach ($q as $e) {\n        $total += $e;\n    }\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i]!= $arr[count($arr) - $i - 1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map(function ($s) {\n        return strlen($s);\n    }, $lst1));\n    $cnt2 = array_sum(array_map(function ($s) {\n        return strlen($s);\n    }, $lst2));\n    return $cnt1 <= $cnt2? $lst1 : $lst2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isMultiplyPrime($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    $a = abs($a);\n    $root = round(pow($a, 1.0 / 3.0));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey ($num) {\n    return count(array_intersect(str_split($num), [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]));\n}\n",
            "function decimalToBinary ($dec) {\n    return \"db\". decbin($dec). \"db\";\n}\n",
            "function isHappy ($s) {\n    $sLen = strlen($s);\n    if ($sLen < 3) {\n        return false;\n    }\n    for ($i = 0; $i < $sLen - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($length)) + 1; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    return $n == 1? 1 : 2 * 9 * (10 ** ($n - 2));\n}\n",
            "function solve ($n) {\n    $digitsSum = array_sum(array_map('intval', str_split(strval($n))));\n    return decbin($digitsSum);\n}\n",
            "function add ($lst) {\n    return array_sum(array_filter($lst, function ($x) {\n        return $x % 2 == 0 && $x % 2 == 1;\n    }));\n}\n",
            "function antiShuffle ($s) {\n    $words = array_map(\n        function ($word) {\n            return join(sort(str_split($word)));\n        },\n        explode(\" \", $s)\n    );\n    return join($words, \" \");\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function ($a, $b) {\n        return $a[0] == $b[0]? $a[1] - $b[1] : $a[0] - $b[0];\n    });\n    return $coords;\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        return array_reverse(sort($arr));\n    } else {\n        return sort($arr);\n    }\n}\n",
            "function encrypt ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $shifted = ord($s[$i]) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return implode('', $result);\n}\n",
            "function nextSmallest ($lst) {\n    $sl = array_unique(sort($lst));\n    return count($sl) < 2? null : $sl[1];\n}\n",
            "function isBored ($s) {\n    $sentences = preg_split(\"/[.!?]\\s*/\", $s);\n    return array_sum(array_map(function ($sentence) {\n        return substr($sentence, 0, 2) == \"I \";\n    }, $sentences));\n}\n",
            "function anyInt ($x, $y, $z) {\n    return is_int($x) && is_int($y) && is_int($z) && ($x + $y == $z || $x + $z == $y || $y + $z == $x);\n}\n",
            "function encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = strtoupper($ch) if ctype_lower($ch) else strtolower($ch);\n            if ($ch1 in $vowels) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd ($lst) {\n    $primes = array_filter($lst, function ($n) {\n        return isPrime($n);\n    });\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = str(max($primes));\n    return array_sum(array_map(function ($digit) {\n        return (int) $digit;\n    }, str_split($largest)));\n}\n",
            "function checkDictCase ($d) {\n    if (!$d) {\n        return false;\n    }\n    return all(c.islower() for c in array_keys($d)) || all(c.isupper() for c in array_keys($d));\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        if (all($num % $p!= 0 for $p in $primes)) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    return count(array_filter(str_split($s), function ($c, $i) {\n        return $i % 2 == 0 && in_array($c, $vowels);\n    }));\n}\n",
            "function closestInteger ($value) {\n    return (int) round($value + 0.5);\n}\n",
            "function makeAPile ($n) {\n    return array_map(function ($i) use ($n) {\n        return $n + 2 * $i;\n    }, range(0, $n));\n}\n",
            "function wordsString ($s) {\n    return preg_split('/[, ]/', $s, -1, PREG_SPLIT_NO_EMPTY);\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1 if ($x!= $y) else -1;\n}\n",
            "function roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = (int) (($m + $n) / 2.0 + 0.5);\n    return decbin($rAvg);\n}\n",
            "function allDigitsOdd($s) {\n    return array_reduce(str_split($s), function ($carry, $digit) {\n        return $carry && ord($digit) % 2!= 0;\n    }, true);\n}\nfunction uniqueDigits($x) {\n    return array_filter(array_unique($x), function ($num) {\n        return allDigitsOdd(str($num));\n    });\n}\n",
            "$digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n$sortedArr = array_filter(\n    $arr,\n    function ($x) {\n        return 1 <= $x && $x <= 9;\n    }\n);\nusort(\n    $sortedArr,\n    function ($a, $b) {\n        return $b - $a;\n    }\n);\nreturn array_map(\n    function ($x) use ($digitNames) {\n        return $digitNames[$x - 1];\n    },\n    $sortedArr\n);\n",
            "function f ($n) {\n    $nums = range(1, $n + 1);\n    $result = [];\n    foreach ($nums as $i) {\n        $result[] = $i % 2!= 0? array_sum(array_slice($nums, 0, $i)) : array_product(array_slice($nums, 0, $i));\n    }\n    return $result;\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome($i)) {\n            $cnt[$i % 2] += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum ($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map(function ($d) {\n            return intval($d);\n        }, str_split($nStr)));\n    } else {\n        return intval($nStr[0]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums ($arr) {\n    return count(array_filter($arr, function ($n) {\n        return digitsSum($n) > 0;\n    }));\n}\n",
            "function moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if (array_slice($arr, $i) == array_slice($sortedArr, count($arr) - $i) && array_slice($arr, 0, $i) == array_slice($sortedArr, count($arr) - $i, count($arr))) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $oddCnt = count(array_filter($lst1, function ($num) {\n        return $num % 2!= 0;\n    }));\n    $evenCnt = count(array_filter($lst2, function ($num) {\n        return $num % 2 == 0;\n    }));\n    return $evenCnt >= $oddCnt? \"YES\" : \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function ($w) {\n        return strlen($w) > 0;\n    });\n    foreach ($words as $w) {\n        $freq[$w] = $freq[$w]?? 0;\n        $freq[$w]++;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = max(array_values($freq));\n        foreach ($freq as $k => $v) {\n            if ($v == $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome ($s) {\n    return $s == strrev($s);\n}\nfunction reverseDelete ($s, $c) {\n    $s1 = str_replace($c, \"\", $s);\n    return [$s1, \"yes\" if isPalindrome($s1) else \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        foreach (str_split($num) as $d) {\n            $n += ord($d) % 2 == 1;\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", $n, $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    return $minSum === 0? min($nums) : $minSum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    return array_sum(array_map(function ($arr) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}\n",
            "function countOnes ($num) {\n    return substr_count(decbin($num), \"1\");\n}\nfunction sortArray ($arr) {\n    usort($arr, function ($a, $b) {\n        return countOnes($a) == countOnes($b)? $a - $b : countOnes($a) - countOnes($b);\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    return array_filter($words, function ($w) use ($consonants, $n) {\n        return count(array_filter(str_split($w), function ($c) use ($consonants) {\n            return $c == strtoupper($c) || $c == strtoupper($c) && $c in $consonants;\n        }));\n    });\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i >= 0; $i--) {\n        if (strpos($vowels, $word[$i])!== false &&\n            strpos($vowels, $word[$i - 1]) === false &&\n            strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function check($s) {\n    $depth = 0;\n    foreach (str_split($s) as $ch) {\n        if ($ch == \"(\") {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\nfunction matchParens($lst) {\n    $s1 = $lst[0]. $lst[1];\n    $s2 = $lst[1]. $lst[0];\n    return \"Yes\" if check($s1) or check($s2) else \"No\";\n}\n",
            "function maximum ($arr, $k) {\n    return array_slice(\n        array_map(\n            function ($e) {\n                return -$e;\n            },\n            $arr\n        ),\n        0,\n        $k\n    );\n}\n",
            "function solution ($lst) {\n    return array_sum(array_filter($lst, function ($x) {\n        return $x % 2 == 0 && $x % 2!= 0;\n    }));\n}\n",
            "function addElements ($arr, $k) {\n    return array_reduce(\n        array_slice($arr, 0, $k),\n        function ($carry, $item) {\n            return $carry + ($item < 100? $item : 0);\n        },\n        0\n    );\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n!= 1) {\n        if ($n % 2!= 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n // 2;\n        }\n    }\n    return sort($collatz);\n}\n",
            "function validDate ($date) {\n    return strlen($date) == 10 && $date[2] == \"-\" && $date[5] == \"-\" &&\n        (int) $date[:2] in [1, 3, 5, 7, 8, 10, 12] && (int) $date[3:5] >= 1 && (int) $date[3:5] <= 31 ||\n        (int) $date[:2] in [4, 6, 9, 11] && (int) $date[3:5] >= 1 && (int) $date[3:5] <= 30 ||\n        (int) $date[:2] == 2 && (int) $date[3:5] >= 1 && (int) $date[3:5] <= 29;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \")!== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\")!== false) {\n        return explode(\",\", $txt);\n    } else {\n        $result = [];\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 0) {\n                $result[] = $txt[$i];\n            }\n        }\n        return $result;\n    }\n}\n",
            "function isSorted ($lst) {\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i-1] > $lst[$i]) {\n            return false;\n        }\n    }\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = $freq[$i] + 1 if isset($freq[$i]) else 1;\n    }\n    return max($freq, default=0) <= 2;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection ($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return \"YES\" if $length > 0 and isPrime($length) else \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (!$arr) {\n        return null;\n    }\n    $sign = -1 if count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1 else 1;\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i!= 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j!= 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i!= $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j!= $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 if $i % 2 == 0 else $minVal;\n    }\n    return $result;\n}\n",
            "function tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = array_filter(str_split(strval($n)), function ($d) {\n        return $d % 2 == 1;\n    });\n    return array_product($odds) if count($odds) > 0 else 0;\n}\n",
            "function isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '[') {\n            $openIdx[] = $i;\n        } elseif ($s[$i] == ']') {\n            $closeIdx[] = $i;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    for ($idx = 0; $idx < count($openIdx); $idx++) {\n        if ($i < $l && $openIdx[$idx] < $closeIdx[$i]) {\n            $cnt++;\n            $i++;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    return array_sum(array_map(function ($n) {\n        return pow(ceil($n), 2);\n    }, $lst));\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    $last = substr($txt, strrpos($txt,'') + 1);\n    return strlen($last) == 1 && ctype_alpha($last);\n}\n",
            "function canArrange ($arr) {\n    $idx = array_keys($arr, max($arr));\n    return count($idx) == 1? -1 : $idx[0];\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($i) {\n        return $i < 0;\n    });\n    $pos = array_filter($lst, function ($i) {\n        return $i > 0;\n    });\n    $maxNeg = count($neg) > 0? max($neg) : null;\n    $minPos = count($pos) > 0? min($pos) : null;\n    return [$maxNeg, $minPos];\n}\n",
            "function anyToReal ($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    }\n    throw new RuntimeException(\"Type Error\");\n}\nfunction compareOne ($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    return preg_replace(\"/\\s{3,}/\", \"-\", $txt);\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst)!= 2 ||!in_array($lst[1], $suf) || strlen($lst[0]) == 0 ||!ctype_alpha($lst[0][0]) || strlen(preg_replace(\"/[0-9]/i\", \"\", $lst[0])) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, function ($w) {\n        return isPrime(strlen($w));\n    }));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}\n",
            "function digitsSum ($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map(function ($d) {\n            return intval($d);\n        }, str_split($nStr)));\n    } else {\n        return intval($nStr[0]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints ($nums) {\n    usort($nums, function ($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $nums;\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function ($n) {\n        return $n > 10 && $n % 2 == 1 && $n[0] in $odds;\n    }));\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) // 6;\n}\n",
            "$names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nif (!in_array($planet1, $names) ||!in_array($planet2, $names)) {\n    return [];\n}\n$l = array_search($planet1, $names);\n$r = array_search($planet2, $names);\nif ($l > $r) {\n    $l, $r = $r, $l;\n}\nif ($l == $r) {\n    return [];\n}\nreturn array_slice($names, $l + 1, $r - $l);\n",
            "function sortedListSum ($lst) {\n    $result = array_filter($lst, function ($s) {\n        return strlen($s) % 2 == 0;\n    });\n    usort($result, function ($a, $b) {\n        return strlen($a) == strlen($b)? strcmp($a, $b) : strlen($a) - strlen($b);\n    });\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    return array_sum(array_filter($lst, function ($n) {\n        return $n >= 0 && $n % 2 == 1;\n    })) * 2;\n}\n",
            "function compare ($game, $guess) {\n    return array_map(function ($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = count(array_filter(str_split($ext), \"ctype_upper\"));\n        $lower = count(array_filter(str_split($ext), \"ctype_lower\"));\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (substr($b, $i). substr($b, 0, $i) in $a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = str(abs($num));\n    $even = count(array_filter(str_split($ds), function ($d) {\n        return ord($d) % 2 == 0;\n    }));\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax ($words) {\n    $maxCnt = 0;\n    $maxW = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        } elseif ($cnt == $maxCnt) {\n            $maxW = min($maxW, $w);\n        }\n    }\n    return $maxW;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_pop($nums);\n            array_pop($ops);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] // $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "function solve ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result[] = $ch;\n        } elseif (ctype_upper($ch)) {\n            $result[] = ctype_lower($ch)? $ch : chr(ord($ch) + 32);\n        } else {\n            $result[] = ctype_upper($ch)? $ch : chr(ord($ch) - 32);\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (!$txt) {\n        return null;\n    }\n    $md5Hash = hash_init('md5');\n    $txtBytes = $txt->encode();\n    hash_update($md5Hash, $txtBytes);\n    $md5Encoded = hash_final($md5Hash, true);\n    return $md5Encoded;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return array_filter(range($lower, $upper + 1), function ($i) {\n        return $i % 2 == 0;\n    });\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    for i in 0...numbers.length\n        for j in (i + 1)...numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    return false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    for ch in parens\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop()\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n        end\n    end\n    groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        return true if balance < 0\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = numbers.sum / numbers.length\n    deviation = numbers.map {|x| (x - mean).abs}.sum\n    deviation / numbers.length\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    for i in 0...numbers.length\n        if i!= 0\n            result << delimiter\n        end\n        result << numbers[i]\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == \"(\"\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elsif ch == \")\"\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select {|s| s.include?(substring)}\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce(:*)\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = numbers.first\n    result = [max_so_far]\n    for num in numbers[1..-1]\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0...s.length\n        if is_palindrome(s[i..-1])\n            return s + s[i..-1].reverse\n        end\n    end\n    \"\"\nend\n",
            "def string_xor(a, b)\n    a.chars.zip(b.chars).map { |x, y| x == y? \"0\" : \"1\" }.join\nend\n",
            "def longest(strs)\n    return strs.max_by(&:length) if strs\nend\n",
            "def greatest_common_divisor(a, b)\n    b == 0? a : greatest_common_divisor(b, a % b)\nend\n",
            "def all_prefixes(s)\n    s.each_char.with_index.map { |c, i| s[0...i + 1] }\nend\n",
            "def string_sequence(n)\n    (1..n).map(&:to_s).join(' ')\nend\n",
            "def count_distinct_characters(s)\n    s.downcase.chars.uniq.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split()\n    notes.map {|note| durations[note]}\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    for i in 0...(s.length - substring.length + 1)\n        if s[i...(i + substring.length)] == substring\n            times += 1\n        end\n    end\n    times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = numbers.split(\" \").select {|x| num_dict.key?(x)}\n    num_list.sort_by {|x| num_dict[x]}\n    num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    for i in 1...sorted_numbers.length\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        return Array.new(numbers.size, 0.0)\n    else\n        return (numbers - min_num) / (max_num - min_num)\n    end\nend\n",
            "def filter_integers(values)\n    values.select {|x| x.is_a?(Integer)}\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            return n / i\n        end\n        i += 1\n    end\n    return 1\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = {}\n    for num in numbers\n        counts[num] = counts.fetch(num, 0) + 1\n    end\n    res = numbers.select {|num| counts[num] == 1}\n    return res\nend\n",
            "def flip_case(s)\n    s.tr('a-zA-Z', 'A-Za-z')\nend\n",
            "def concatenate(strs)\n    strs.join\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    strs.select {|s| s.start_with?(prefix_str)}\nend\n",
            "def get_positive(l)\n    l.select {|num| num > 0}\nend\n",
            "def is_prime(n)\n    n < 2? false : (2..floor(sqrt(n)).each_with_object([]) do |i, a|\n        a << i if n % i == 0\n    end).empty?\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    for i in 0...xs.length\n        res += xs[i] * x**i\n    end\n    res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = l.sort_by.with_index {|_, i| i % 3}\n    l.map.with_index {|_, i| sorted_third[i // 3] if i % 3 == 0 else l[i]}\nend\n",
            "def list_unique(l)\n    l.sort.uniq\nend\n",
            "def max_element(l)\n    l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    for i in 0...n\n        cnt += i.to_s.count(\"7\") if i % 11 == 0 or i % 13 == 0\n    end\n    cnt\nend\n",
            "def sort_even(l)\n    sorted_even = l.select.with_index {|_, i| i.even?}.sort\n    l.map.with_index do |_, i|\n        sorted_even[i // 2] if i.even?\n        l[i]\n    end\nend\n",
            "def encode_cyclic(s)\n    result = []\n    for i in 0...s.length, 3\n        if i + 3 > s.length\n            result << s[i..-1]\n        else\n            result << s[i+1..i+2]\n            result << s[i]\n        end\n    end\n    result.join\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    n < 2? false : (2..floor(sqrt(n)).each_with_object(n) {|i, n| n %= i == 0? 0 : i}).zero?\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        cnt += 1 if is_prime(f[1])\n    end\n    f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    for i in 0...l.length\n        for j in (i + 1)...l.length\n            for k in (j + 1)...l.length\n                return true if l[i] + l[j] + l[k] == 0\n            end\n        end\n    end\n    return false\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    l.map {|i| i + 1}\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    for num in l\n        if -num in seen\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    digits = []\n    while x > 0\n        digits << x % bas\n        x //= bas\n    end\n    digits.reverse.join\nend\n",
            "def triangle_area(a, h)\n    a * h / 2\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4..n\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n    sl = l.sort\n    sl[l.length / 2] if l.length % 2!= 0 else (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\n",
            "def modp(n, p)\n    ret = 1\n    for _ in 0...n\n        ret = (ret * 2) % p\n    end\n    ret\nend\n",
            "def encode_shift(s)\n    result = s.chars.map {|ch| ((ch.ord - 97 + 5) % 26) + 97}.map(&:chr)\n    result.join\nend\ndef decode_shift(s)\n    result = s.chars.map {|ch| ((ch.ord - 97 + 21) % 26) + 97}.map(&:chr)\n    result.join\nend\n",
            "def remove_vowels(txt)\n    txt.gsub(/[aeiouAEIOU]/, \"\")\nend\n",
            "def below_threshold(l, t)\n    l.all? {|x| x < t}\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.sort == s1.chars.sort\nend\n",
            "def fib(n)\n    n <= 1? n : fib(n - 1) + fib(n - 2)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    depth == 0\nend\n",
            "def monotonic(l)\n    diff = l.each_cons(2).map {|x, y| y - x}\n    diff.all? {|x| x <= 0} or diff.all? {|x| x >= 0}\nend\n",
            "def common(l1, l2)\n    l1 & l2\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i\n            i += 1\n        else\n            n /= i\n        end\n    end\n    n\nend\n",
            "def sum_to_n(n)\n    (0..n).sum\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    depth == 0\nend\n",
            "def derivative(xs)\n    xs.each_with_index.map { |x, i| x * i }\nend\n",
            "def fibfib(n)\n    return 0 if n <= 1\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in 0...s.length\n        if s[i].downcase in vowels or (i == s.length - 1 and s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        x_str.reverse\n    else\n        x_str[-shift..-1] + x_str[0..-shift-1]\n    end\nend\n",
            "def digit_sum(s)\n    s.chars.map {|c| c.ord}.select {|c| c.between?(65, 90)}.sum\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words.index('apples') - 1\n    oranges = words.index('oranges') - 1\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select {|n| n % 2 == 0}\n    return [] if evens.empty?\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = {}\n    for n in lst\n        freqs[n] = freqs.fetch(n, 0) + 1\n    end\n    good_vals = freqs.select {|k, v| v >= k}\n    good_vals.empty?? -1 : good_vals.keys.max\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c and a + c > b and b + c > a\n        s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palin = q.each_with_index.all? {|e, i| e == q[-i - 1]}\n    total = q.sum\n    return is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    for i in 0...arr.length / 2\n        ans += 1 if arr[i]!= arr[arr.length - i - 1]\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.map { |s| s.length }.sum\n    cnt2 = lst2.map { |s| s.length }.sum\n    lst1 if cnt1 <= cnt2 else lst2\nend\n",
            "def is_prime(n)\n    n < 2? false : (2..floor(sqrt(n)).each_with_object(0) {|i, cnt| cnt += 1 if n % i == 0}).zero?\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    (2..a).each {|i| cnt += 1 if is_prime(i); a /= i while a % i == 0}\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    n < 2? x == n : (tmp = 1; while tmp < x; tmp *= n; end; tmp == x)\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = a ** (1.0 / 3.0)\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    num.count(\"2357BD\")\nend\n",
            "def decimal_to_binary(dec)\n    \"db\" + dec.to_s(2) + \"db\"\nend\n",
            "def is_happy(s)\n    s.chars.each_cons(3).any? do |a, b, c|\n        a == b or a == c or b == c\n    end\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    for g in grades\n        if g == 4.0\n            result << \"A+\"\n        elsif g > 3.7\n            result << \"A\"\n        elsif g > 3.3\n            result << \"A-\"\n        elsif g > 3.0\n            result << \"B+\"\n        elsif g > 2.7\n            result << \"B\"\n        elsif g > 2.3\n            result << \"B-\"\n        elsif g > 2.0\n            result << \"C+\"\n        elsif g > 1.7\n            result << \"C\"\n        elsif g > 1.3\n            result << \"C-\"\n        elsif g > 1.0\n            result << \"D+\"\n        elsif g > 0.7\n            result << \"D\"\n        elsif g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    result\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..floor(Math.sqrt(length))).none? {|i| length % i == 0}\nend\n",
            "def starts_one_ends(n)\n    n == 1? 1 : 2 * 9 * (10 ** (n - 2))\nend\n",
            "def solve(n)\n    n.to_s(2).chars.map(&:to_i).sum.to_s(2)\nend\n",
            "def add(lst)\n    lst.select.with_index {|x, i| i.odd? && x.even?}.sum\nend\n",
            "def anti_shuffle(s)\n    s.split(\" \").map {|word| word.chars.sort.join}.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    for i in 0...lst.size\n        for j in 0...lst[i].size\n            if lst[i][j] == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort_by! {|a| [a[0], -a[1]]}\nend\n",
            "def sort_array(arr)\n    arr.sort!\n    arr.reverse! if (arr[0] + arr[-1]) % 2 == 0\n    arr\nend\n",
            "def encrypt(s)\n    result = []\n    for ch in s\n        shifted = ch.ord + 4\n        if shifted > ord('z')\n            shifted -= 26\n        end\n        result << shifted.chr\n    end\n    result.join\nend\n",
            "def next_smallest(lst)\n    sl = lst.sort.uniq\n    sl.size < 2? nil : sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    sentences.count {|sentence| sentence.start_with?(\"I \") && sentence.length >= 2}\nend\n",
            "def any_int(x, y, z)\n    [x, y, z].all? { |i| i.is_a?(Integer) } && (x + y == z || x + z == y || y + z == x)\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message\n        if ch.isalpha\n            ch1 = ch.upcase if ch.downcase == ch else ch.downcase\n            if ch1 in vowels\n                ch1 = ch1.next\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    result.join\nend\n",
            "def is_prime(n)\n    n < 2? false : (2..floor(sqrt(n)).each do |i|\n        n % i == 0? false : true\n    end)\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    primes.empty?? 0 : primes.max.to_s.chars.map(&:to_i).sum\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    return all? { |c| c.islower? } if d.keys.all? { |c| c.islower? }\n    return all? { |c| c.isupper? } if d.keys.all? { |c| c.isupper? }\nend\n",
            "def count_up_to(n)\n    primes = []\n    (2..n).each do |num|\n        if primes.all? {|p| num % p!= 0}\n            primes << num\n        end\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n",
            "def count_upper(s)\n    s.chars.each_with_index.count { |c, i| i.even? && c.upcase? }\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    num >= 0? num.ceil : num.floor\nend\n",
            "def make_a_pile(n)\n    (0...n).map { |i| n + 2 * i }\nend\n",
            "def words_string(s)\n    s.split(/[, ]/)\nend\n",
            "def choose_num(x, y)\n    return -1 if x > y\n    return y if y % 2 == 0\n    return y - 1 if x!= y\n    -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = (m + n) / 2.0 + 0.5\n    return r_avg.to_i.to_s(2)\nend\n",
            "def all_digits_odd(s)\n    s.chars.all? {|digit| digit.ord % 2!= 0}\nend\ndef unique_digits(x)\n    x.sort_by {|num| num if all_digits_odd(num.to_s)}\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select {|x| 1 <= x <= 9}.sort {|a, b| b <=> a}\n    sorted_arr.map {|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    nums.map.with_index do |_, i|\n        i % 2!= 0? nums[0..i].sum : nums[0..i].reduce(:*)\n    end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        cnt[i % 2] += 1 if is_palindrome(i.to_s)\n    end\n    cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).sum\n    else\n        return (n_str[0..1].to_i * 2) + digits_sum(n.abs)\n    end\nend\ndef count_nums(arr)\n    arr.count {|n| digits_sum(n) > 0}\nend\n",
            "def move_one_ball(arr)\n    arr.sort == arr.reverse\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count {|num| num % 2!= 0}\n    even_cnt = lst2.count {|num| num % 2 == 0}\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split(\" \").select {|w| w.length > 0}\n    for w in words\n        freq[w] = freq.fetch(w, 0) + 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        for k, v in freq.items\n            if v == max_freq\n                result[k] = v\n        end\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.gsub(c, \"\")\n    [s1, \"yes\" if is_palindrome(s1) else \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    for num in lst\n        n = lst.count { |d| d.ord % 2 == 1 }\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", n.to_s))\n    end\n    result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    for n in nums\n        cur_sum = [cur_sum + n, 0].max\n        min_sum = [cur_sum, min_sum].min\n    end\n    min_sum = [min_sum, nums.min].min\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map {|arr| arr.sum.to_f / capacity}.map {|num| num.ceil}.sum\nend\n",
            "def count_ones(num)\n    num.to_s(2).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort_by {|x| [count_ones(x), x]}\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").select {|w| w.length > 0}\n    words.select {|w| w.count {|c| c.downcase.in?(consonants)} == n}\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in (0...word.length - 2).reverse_each\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "def check(s)\n    depth = 0\n    for ch in s\n        if ch == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return true if depth == 0 else false\nend\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\nend\n",
            "def maximum(arr, k)\n    arr.sort.last(k)\nend\n",
            "def solution(lst)\n    lst.select.with_index {|x, i| i.even? && x.odd?}.sum\nend\n",
            "def add_elements(arr, k)\n    arr.take(k).select {|n| n.to_s.length <= 2}.sum\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n!= 1\n        if n % 2!= 0\n            collatz << n\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    collatz.sort\nend\n",
            "def valid_date(date)\n    date.length == 10 && date[2] == \"-\" && date[5] == \"-\" &&\n    (date[0..1].to_i in [1, 3, 5, 7, 8, 10, 12] && date[3..4].to_i >= 1 && date[3..4].to_i <= 31) ||\n    (date[0..1].to_i in [4, 6, 9, 11] && date[3..4].to_i >= 1 && date[3..4].to_i <= 30) ||\n    (date[0..1].to_i == 2 && date[3..4].to_i >= 1 && date[3..4].to_i <= 29)\nend\n",
            "def split_words(txt)\n    txt.split(\" \") if txt.include?(\" \")\n    txt.split(\",\") if txt.include?(\",\")\n    [txt.count { |c| c.islower? && c.ord % 2 == 0 }]\nend\n",
            "def is_sorted(lst)\n    lst.each_with_index do |e, i|\n        if i > 0 && e < lst[i-1]\n            return false\n        end\n    end\n    return true\nend\n",
            "def is_prime(n)\n    n < 2? false : (2..floor(sqrt(n)).each do |i|\n        n % i == 0? false : true\n    end)\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    \"YES\" if length > 0 and is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return 0 if arr.include?(0)\n    sign = -1 if arr.count{ |n| n < 0 } % 2 == 1 else 1\n    sign * arr.map{ |n| n.abs }.sum\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i!= 0\n                    temp << grid[i - 1][j]\n                end\n                if j!= 0\n                    temp << grid[i][j - 1]\n                end\n                if i!= n - 1\n                    temp << grid[i + 1][j]\n                end\n                if j!= n - 1\n                    temp << grid[i][j + 1]\n                end\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    for i in 0...k\n        result << 1 if i % 2 == 0 else min_val\n    end\n    result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3]\n    for i in 2..n\n        seq << (i % 2 == 0? i / 2 + 1 : seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    end\n    seq\nend\n",
            "def digits(n)\n    n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    for i in 0...s.length\n        ch = s[i]\n        if ch == '['\n            open_idx << i\n        elsif ch == ']'\n            close_idx << i\n        end\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    for idx in open_idx\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    lst.map {|n| n ** 2}.reduce(:+)\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    txt.rindex(' ') && txt[txt.rindex(' ') + 1].isalpha?\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.length <= 1\n    idx = (1...arr.length).find {|i| arr[i] < arr[i - 1]}\n    return idx if idx\n    return -1\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max if neg.size > 0 else nil\n    min_pos = pos.min if pos.size > 0 else nil\n    [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    if o.is_a?(String)\n        o.gsub(',', '.')\n    elsif o.is_a?(Integer)\n        o.to_f\n    elsif o.is_a?(Float)\n        o\n    else\n        raise RuntimeError(\"Type Error\")\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 and n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    for i in 1..n\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(r\"\\s{3,}\", \"-\").gsub(\" \", \"_\")\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length!= 2 or not lst[1] in suf or lst[0].length == 0 or not lst[0][0].isalpha? or lst[0].count(\"0\") > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for i in 0...lst.length\n        if i % 3 == 0\n            result += lst[i] ** 2\n        elsif i % 4 == 0\n            result += lst[i] ** 3\n        else\n            result += lst[i]\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    n < 2? false : (2..floor(sqrt(n)).each do |i|\n        n % i == 0? false : true\n    end)\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    words.select {|w| is_prime(w.length)}.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).sum\n    else\n        return (n_str[0..1].to_i * 2) + digits_sum(n.abs)\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by {|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    nums.select {|n| n > 10 && n % 2 == 1 && n.to_s[0] in odds}.size\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    for i in 1..n\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    names[l + 1..r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select {|s| s.length.even?}\n    result.sort_by {|s| [s.length, s]}\nend\n",
            "def x_or_y(n, x, y)\n    n < 2? y : (n % 2 == 0? x : y)\nend\n",
            "def double_the_difference(lst)\n    lst.select {|n| n >= 0 && n % 2 == 1}.map {|n| n * n}.sum\nend\n",
            "def compare(game, guess)\n    game.zip(guess).map {|x, y| x - y}\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    for ext in extensions\n        upper = ext.count { |c| c.isupper }\n        lower = ext.count { |c| c.islower }\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    if a.length < b.length\n        return false\n    end\n    for i in 0...b.length\n        if b[i..-1] + b[0...i] in a\n            return true\n        end\n    end\n    return false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s\n    even = ds.count { |d| d.ord % 2 == 0 }\n    [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0...values.length\n        while num >= values[i]\n            res << numerals[i]\n            num -= values[i]\n        end\n    end\n    res.join\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = min(max_w, w)\n        end\n    end\n    max_w\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        [num + need, remaining - need]\n    else\n        [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] // nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    result = []\n    for ch in s\n        result << ch if ch.isalpha?\n        result << ch.swapcase if ch.isupper?\n        result << ch.swapcase if ch.islower?\n    end\n    result.join\nend\n",
            "def string_to_md5(txt)\n    return Digest::MD5.hexdigest(txt) if txt\nend\n",
            "def generate_integers(a, b)\n    lower = [2, a, b].max\n    upper = [8, a, b].min\n    (lower..upper).select {|i| i.even?}\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = vec![];\n    let mut stk = vec![];\n    let mut current_group = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group);\n                current_group = String::new();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    operations.iter().sum::<i32>() < 0\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().map(|x| (x - mean).abs()).sum::<f64>();\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate() {\n        if i!= 0 {\n            result.push(delimiter);\n        }\n        result.push(*n);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = vec![];\n    let mut depth = 0;\n    let mut max_depth = 0;\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            depth += 1;\n            max_depth = max(max_depth, depth);\n        } else if ch == ')' {\n            depth -= 1;\n        }\n    }\n    result.push(max_depth);\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.contains(substring)).cloned().collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().product();\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n    for num in numbers.iter().skip(1) {\n        max_so_far = max(max_so_far, *num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn is_palindrome(s: &String) -> bool {\n    s == &s.chars().rev().collect::<String>()\n}\npub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s.clone()\n    }\n    for i in 0..s.len() {\n        if is_palindrome(&s[i..]) {\n            return s.clone() + &s[i..].chars().rev().collect::<String>()\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    a.chars().zip(b.chars()).map(|(x, y)| if x == y { \"0\" } else { \"1\" }).collect()\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    strs.iter().max_by_key(|s| s.len()).cloned()\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 { a } else { greatest_common_divisor(b, a % b) }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[0..i + 1].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_ascii_lowercase()).collect::<HashSet<_>>().len() as i32\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = vec![4, 2, 1];\n    let notes = music_string.split(\" \");\n    notes.iter().map(|note| durations[note]).collect()\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..(s.len() - substring.len() + 1) {\n        if &s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let mut num_list = numbers.split(\" \").filter(|x| x.parse::<i32>().is_ok()).collect::<Vec<_>>();\n    num_list.sort_by_key(|x| x.parse::<i32>().unwrap());\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().min().unwrap();\n    let max_num = numbers.iter().max().unwrap();\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.iter().filter_map(|x| x.downcast_ref::<i32>()).cloned().collect()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n //= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = std::collections::HashMap::new();\n    for num in numbers {\n        *counts.entry(*num).or_insert(0) += 1;\n    }\n    numbers.iter().filter(|num| counts.get(num).unwrap() == 1).cloned().collect()\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    s.chars().map(|ch| if ch.is_alphabetic() {\n        if ch.is_lowercase() { ch.to_uppercase() } else { ch.to_lowercase() }\n    } else { ch }).collect()\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.join(\"\")\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.starts_with(prefix_str)).cloned().collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&num| *num > 0).cloned().collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    xs.iter().enumerate().fold(0.0, |acc, (i, &x)| acc + x as f64 * x.powi(i as i32))\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l[::3].to_vec();\n    sorted_third.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            result.push(sorted_third[i // 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = l.clone();\n    result.sort();\n    result.dedup();\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() { 0 } else { *l.iter().max().unwrap() }\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += str(i).chars().filter(|c| c == &'7').count();\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l.clone();\n    sorted_even.sort_by(|a, b| a.cmp(b));\n    let mut result = vec![];\n    for (i, e) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i // 2]);\n        } else {\n            result.push(*e);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in 0..s.len() {\n        if i + 2 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i+1..i+3]);\n            result.push(s[i]);\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&i| i + 1).collect()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    let mut digits = vec![];\n    let mut x = x;\n    while x > 0 {\n        digits.push(x % bas);\n        x //= bas;\n    }\n    digits.iter().map(|&d| d.to_string()).collect()\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    fib[n % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if l.len() % 2!= 0 {\n        sl[l.len() // 2]\n    } else {\n        (sl[l.len() // 2] + sl[l.len() // 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        result.push(ch.to_ascii_lowercase());\n        result.push(((ch.to_ascii_lowercase() as u8 - 97 + 5) % 26 + 97) as char);\n    }\n    result\n}\npub fn decode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        result.push(ch.to_ascii_lowercase());\n        result.push(((ch.to_ascii_lowercase() as u8 - 97 + 21) % 26 + 97) as char);\n    }\n    result\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let mut result = String::new();\n    for char in txt.chars() {\n        if!char.is_ascii_alphabetic() || char.to_ascii_lowercase() not in \"aeiou\" {\n            result.push(char);\n        }\n    }\n    result\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|x| *x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    s0.chars().collect::<HashSet<_>>().eq(s1.chars().collect::<HashSet<_>>())\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 { n } else { fib(n - 1) + fib(n - 2) }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' { depth += 1; }\n        if b == '>' { depth -= 1; }\n        if depth < 0 { return false; }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff = l.iter().zip(l.iter().skip(1)).map(|(x, y)| y - x).collect::<Vec<_>>();\n    diff.iter().all(|x| x <= &0) || diff.iter().all(|x| x >= &0)\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    l1.iter().filter(|&x| l2.contains(x)).cloned().collect()\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (0..=n).sum()\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' { depth += 1; }\n        if b == ')' { depth -= 1; }\n        if depth < 0 { return false; }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    xs.iter().enumerate().map(|(i, x)| x * i).collect()\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 { 0 } else { fibfib(n - 1) + fibfib(n - 2) }\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiouy\";\n    let mut cnt = 0;\n    for c in s.chars() {\n        if vowels.contains(&c.to_lowercase().collect::<String>()) {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        x_str.chars().rev().collect()\n    } else {\n        let mut result = String::new();\n        for i in 0..shift as usize {\n            result.push(x_str.chars().nth(i).unwrap());\n        }\n        for i in shift as usize..x_str.len() {\n            result.push(x_str.chars().nth(i).unwrap());\n        }\n        result\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as i32).sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let mut words = s.split(' ');\n    let mut apples = 0;\n    let mut oranges = 0;\n    for word in words {\n        if word == \"apples\" {\n            apples = words[words.iter().position(|&w| w == \"apples\").unwrap() - 1].parse::<i32>().unwrap();\n        } else if word == \"oranges\" {\n            oranges = words[words.iter().position(|&w| w == \"oranges\").unwrap() - 1].parse::<i32>().unwrap();\n        }\n    }\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = Vec::new();\n    for n in arr {\n        if n % 2 == 0 { evens.push(*n) }\n    }\n    if evens.len() == 0 { vec![] } else { vec![evens.iter().min().unwrap(), arr.iter().position(|&n| n == evens.iter().min().unwrap()).unwrap() as i32] }\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = std::collections::HashMap::new();\n    for n in lst {\n        *freqs.entry(*n).or_insert(0) += 1;\n    }\n    let good_vals = freqs.into_iter().filter(|&(_, v)| v >= *&k).map(|(k, _)| k).collect::<Vec<_>>();\n    good_vals.into_iter().max().unwrap_or(-1)\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    let s = (a + b + c) as f64 / 2.0;\n    if a + b > c && a + c > b && b + c > a {\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        if q[i]!= q[j] {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    q.iter().sum::<i32>() <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i]!= arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum();\n    if cnt1 <= cnt2 { lst1.clone() } else { lst2.clone() }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 { x == n } else {\n        let mut tmp = 1;\n        while tmp < x { tmp *= n; }\n        tmp == x\n    }\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    a.abs().powi(3) == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    num.chars().filter(|x| x.to_string() in \"2357BD\").count() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{:032b}db\", dec)\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    let mut seen = HashSet::new();\n    let mut sum = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as i32;\n    }\n    while sum!= 1 and sum not in seen {\n        seen.insert(sum);\n        sum = sum.pow(2) % 10;\n    }\n    sum == 1\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        if g == &4.0 { \"A+\" }\n        else if g > &3.7 { \"A\" }\n        else if g > &3.3 { \"A-\" }\n        else if g > &3.0 { \"B+\" }\n        else if g > &2.7 { \"B\" }\n        else if g > &2.3 { \"B-\" }\n        else if g > &2.0 { \"C+\" }\n        else if g > &1.7 { \"C\" }\n        else if g > &1.3 { \"C-\" }\n        else if g > &1.0 { \"D+\" }\n        else if g > &0.7 { \"D\" }\n        else if g > &0.0 { \"D-\" }\n        else { \"E\" }\n    }).collect()\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..(length as f64).sqrt() as usize + 1 {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 { 1 } else { 2 * 9 * 10.pow(n - 2) }\n}\n",
            "pub fn solve(n: i32) -> String {\n    format!(\"{:b}\", n.abs())\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|&(i, x)| i % 2 == 1 && x % 2 == 0).map(|(_, x)| x).sum()\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let words: Vec<String> = s.split(\" \").map(|word| word.chars().sorted().collect()).collect();\n    words.join(\" \")\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, val) in row.iter().enumerate() {\n            if *val == x {\n                coords.push(vec![i, j]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| {\n        if a[0] == b[0] {\n            b[1].cmp(&a[1])\n        } else {\n            a[0].cmp(&b[0])\n        }\n    });\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        arr.iter().rev().cloned().collect()\n    } else {\n        arr.iter().cloned().collect()\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = ch.to_ascii_lowercase() as u8 + 4;\n        if shifted > b'z' {\n            result.push((shifted - 26) as char);\n        } else {\n            result.push(shifted as char);\n        }\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = lst.clone();\n    sl.sort_unstable();\n    sl.dedup();\n    if sl.len() < 2 {\n        None\n    } else {\n        Some(sl[1])\n    }\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = s.split(r\"[.!?]\\s*\").map(|sentence| sentence.trim()).filter(|sentence| sentence.len() >= 2);\n    sentences.map(|sentence| sentence.starts_with(\"I \")).sum()\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(x), Some(y), Some(z)) = (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() {\n                ch.to_uppercase().collect::<String>()\n            } else {\n                ch.to_lowercase().collect::<String>()\n            };\n            if ch1.to_lowercase().starts_with(\"a\") || ch1.to_lowercase().starts_with(\"e\") || ch1.to_lowercase().starts_with(\"i\") || ch1.to_lowercase().starts_with(\"o\") || ch1.to_lowercase().starts_with(\"u\") {\n                ch1.push('A');\n            } else {\n                ch1.push('a');\n            }\n            result.push_str(&ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes = lst.iter().filter(|&n| is_prime(*n)).collect::<Vec<_>>();\n    if primes.len() == 0 {\n        return 0\n    }\n    let largest = primes.iter().max().unwrap().to_string();\n    largest.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let mut all_lower = true;\n    let mut all_upper = true;\n    for k in d.keys() {\n        if k.chars().all(|c| c.is_lowercase()) {\n            all_upper = false;\n        } else if k.chars().all(|c| c.is_uppercase()) {\n            all_lower = false;\n        } else {\n            return false;\n        }\n    }\n    all_lower || all_upper\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![];\n    for num in 2..n {\n        if primes.iter().all(|&p| num % p!= 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    s.chars().enumerate().filter(|(i, c)| i % 2 == 0 && c.to_ascii_uppercase().is_some()).count() as i32\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 { num.round() as i32 } else { (num - 0.5).floor() as i32 }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect()\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let re = Regex::new(r\"[, ]\").unwrap();\n    re.split(s).filter(|w|!w.is_empty()).map(|w| w.to_string()).collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y { -1 }\n    else if y % 2 == 0 { y }\n    else { y - 1 if x!= y else -1 }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2 + 0.5;\n    let r_avg_str = format!(\"{:.0}\", r_avg);\n    Some(r_avg_str)\n}\n",
            "pub fn all_digits_odd(s: &str) -> bool {\n    s.chars().all(|digit| digit.to_digit(10).unwrap() % 2!= 0)\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter().filter(|num| all_digits_odd(&num.to_string())).cloned().collect()\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut sorted_arr = arr.clone();\n    sorted_arr.retain(|x| 1 <= *x && *x <= 9);\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    sorted_arr.iter().map(|x| digit_names[*x as usize - 1].to_string()).collect()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut nums = vec![];\n    for i in 1..=n {\n        nums.push(i);\n    }\n    let mut result = vec![];\n    for i in nums {\n        if i % 2!= 0 {\n            result.push(nums[..i].iter().sum());\n        } else {\n            result.push(nums[..i].iter().product());\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[i % 2] += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        let mut n_str = n_str.chars().skip(2).collect::<String>();\n        n_str.push_str(&digits_sum(n.abs()).to_string());\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|n| digits_sum(*n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i..] == sorted_arr[..arr.len() - i] && arr[..i] == sorted_arr[arr.len() - i..] {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&num| num % 2!= 0).count();\n    let even_cnt = lst2.iter().filter(|&num| num % 2 == 0).count();\n    if even_cnt >= odd_cnt { \"YES\".to_string() } else { \"NO\".to_string() }\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String,i32> {\n    let mut freq = HashMap::new();\n    let words: Vec<&str> = test.split(\" \").filter(|w| w.len() > 0).collect();\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n    let mut result = HashMap::new();\n    if freq.len() > 0 {\n        let max_freq = *freq.values().max().unwrap();\n        for (k, v) in freq.iter() {\n            if v == &max_freq {\n                result.insert(k.to_string(), *v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(s: &String) -> bool {\n    s == s.chars().rev().collect::<String>()\n}\npub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1 = s.chars().filter(|ch|!c.contains(ch)).collect::<String>();\n    vec![s1, \"yes\".to_string() if is_palindrome(&s1) else \"no\".to_string()]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    lst.iter().map(|s| s.chars().filter(|c| c.to_digit(10).unwrap() % 2 == 1).count().to_string()).collect()\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| arr.iter().sum::<i32>() / capacity + 1).sum()\n}\n",
            "pub fn count_ones(num: i32) -> i32 {\n    num.count_ones() as i32\n}\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    arr.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)))\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words = s.split(\" \").filter(|w|!w.is_empty());\n    words.filter(|w| w.chars().filter(|c| c.to_lowercase().to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|c| c.to_string().chars().any(|",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (0..word.len() - 2).rev() {\n        if word.chars().nth(i).unwrap() in vowels && word.chars().nth(i - 1).unwrap() not in vowels && word.chars().nth(i + 1).unwrap() not in vowels {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    let mut arr = arr.clone();\n    arr.sort();\n    arr.reverse();\n    arr[0..k as usize].to_vec()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|&(i, x)| i % 2 == 0 && x % 2!= 0).map(|(_, x)| x).sum()\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    arr.iter().take(k as usize).filter(|n| n.to_string().len() <= 2).sum()\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n!= 1 {\n        if n % 2!= 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if!date.len() == 10 ||!date.chars().nth(2).unwrap() == \"-\" ||!date.chars().nth(5).unwrap() == \"-\" {\n        return false\n    }\n    let m = date.chars().take(2).collect::<String>().parse::<i32>().unwrap();\n    let d = date.chars().skip(3).take(2).collect::<String>().parse::<i32>().unwrap();\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(\" \") {\n        txt.split(\" \").map(|s| s.to_string()).collect()\n    } else if txt.contains(\",\") {\n        txt.split(\",\").map(|s| s.to_string()).collect()\n    } else {\n        let mut result = Vec::new();\n        result.push(txt.len().to_string());\n        result\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    let mut sorted = true;\n    for i in 1..lst.len() {\n        if lst[i-1] > lst[i] {\n            sorted = false;\n            break;\n        }\n    }\n    if sorted {\n        let mut freq = [0; 10000];\n        for i in lst {\n            freq[*i as usize] += 1;\n        }\n        let max_freq = freq.iter().max().unwrap();\n        if *max_freq <= 2 {\n            true\n        } else {\n            false\n        }\n    } else {\n        false\n    }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    let mut sign = -1;\n    if arr.iter().any(|n| n < &0) {\n        if arr.iter().filter(|n| n < &0).count() % 2 == 1 {\n            sign = 1;\n        }\n    }\n    Some(sign * arr.iter().map(|n| n.abs()).sum::<i32>())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i!= 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j!= 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i!= n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j!= n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = min(temp);\n            }\n        }\n    }\n    let mut result = vec![];\n    for i in 0..k {\n        result.push(1 if i % 2 == 0 else min_val);\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut odds = vec![];\n    for d in str(n).chars() {\n        if d.to_digit(10).unwrap() % 2 == 1 {\n            odds.push(d.to_digit(10).unwrap());\n        }\n    }\n    odds.iter().fold(1, |x, y| x * y) if odds.len() > 0 else 0\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = vec![];\n    let mut close_idx = vec![];\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']':\n            close_idx.push(i);\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter().map(|n| (n.ceil() as i32).pow(2)).sum()\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if let Some(last_space_index) = txt.rfind(' ') {\n        if let Some(last_char) = txt.chars().nth(last_space_index + 1) {\n            return last_char.is_alphabetic();\n        }\n    }\n    false\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    let mut idx = -1;\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx = i as i32;\n        }\n    }\n    idx\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = vec![];\n    let mut pos = vec![];\n    for i in lst {\n        if i < &0 { neg.push(*i) }\n        if i > &0 { pos.push(*i) }\n    }\n    let max_neg = neg.iter().max().cloned();\n    let min_pos = pos.iter().min().cloned();\n    vec![max_neg, min_pos]\n}\n",
            "pub fn any_to_real(o: &Box<dyn Any>) -> f64 {\n    match o.as_any().downcast_ref::<String>() {\n        Some(s) => s.replace(',', '.').parse().unwrap(),\n        None => match o.as_any().downcast_ref::<i32>() {\n            Some(i) => *i as f64,\n            None => match o.as_any().downcast_ref::<f64>() {\n                Some(f) => *f,\n                None => panic!(\"Type Error\"),\n            },\n        },\n    }\n}\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let re = Regex::new(r\"\\s{3,}\").unwrap();\n    re.replace_all(txt, \"-\").to_string().replace(\" \", \"_\")\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let mut lst = file_name.split(\".\");\n    if lst.len()!= 2 {\n        return \"No\".to_string();\n    }\n    let suffix = lst.pop().unwrap();\n    if suffix!= \"txt\" && suffix!= \"exe\" && suffix!= \"dll\" {\n        return \"No\".to_string();\n    }\n    let mut name = lst.pop().unwrap();\n    if name.len() == 0 ||!name.chars().nth(0).unwrap().is_alphabetic() {\n        return \"No\".to_string();\n    }\n    let mut digit_count = 0;\n    for c in name.chars() {\n        if c.is_numeric() {\n            digit_count += 1;\n        }\n    }\n    if digit_count > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += e * e;\n        } else if i % 4 == 0 {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    true\n}\npub fn words_in_sentence(sentence: &String) -> String {\n    let words = sentence.split(\" \");\n    words.into_iter().filter(|w| is_prime(w.len())).collect::<Vec<_>>().join(\" \")\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs = x.split(\"/\");\n    let ns = n.split(\"/\");\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        let mut n_str = n_str.chars().skip(2).collect::<String>();\n        n_str.push_str(&digits_sum(n.abs()).to_string());\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    nums.iter().cloned().sorted_by_key(digits_sum).collect()\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    nums.iter().filter(|n| **n > 10 && **n % 2 == 1 && (**n / 10).to_string().chars().next().unwrap() == '1').count() as i32\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        \"Mercury\".to_string(),\n        \"Venus\".to_string(),\n        \"Earth\".to_string(),\n        \"Mars\".to_string(),\n        \"Jupiter\".to_string(),\n        \"Saturn\".to_string(),\n        \"Uranus\".to_string(),\n        \"Neptune\".to_string(),\n    ];\n    if!names.contains(planet1) ||!names.contains(planet2) {\n        return vec![];\n    }\n    let l = names.iter().position(|x| x == planet1).unwrap();\n    let r = names.iter().position(|x| x == planet2).unwrap();\n    if l > r {\n        let l = r;\n        let r = l;\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l + 1..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result = vec![];\n    for s in lst {\n        if s.len() % 2 == 0 {\n            result.push(s.clone());\n        }\n    }\n    result.sort_by(|a, b| a.len().cmp(&b.len()).then(a.cmp(b)));\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter().filter(|n| **n >= 0 && **n % 2 == 1).map(|n| n * n).sum()\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess).map(|(x, y)| (x - y).abs()).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = -1;\n    let mut max_ext = \"\";\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        if b[i..].to_string() + &b[..i].to_string() in a {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let even = ds.chars().filter(|d| d.to_digit(10).unwrap() % 2 == 0).count();\n    vec![even, ds.len() - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    for (i, value) in values.iter().enumerate() {\n        while num >= *value {\n            res.push_str(&numerals[i]);\n            num -= *value;\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let s = [a, b, c].sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = String::new();\n    for w in words {\n        let cnt = w.chars().collect::<HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w.clone());\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\".to_string() {\n            nums[i] = nums[i].pow(nums[i + 1] as u32);\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\".to_string() {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if ops[i] == \"//\".to_string() {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\".to_string() {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if ops[i] == \"-\".to_string() {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_alphabetic() {\n            result.push(if ch.is_lowercase() { ch.to_uppercase().unwrap() } else { ch.to_lowercase().unwrap() });\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut hasher = DefaultHasher::new();\n    txt.hash(&mut hasher);\n    let md5_encoded = format!(\"{:x}\", hasher.finish());\n    Some(md5_encoded)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    (lower..=upper).filter(|&i| i % 2 == 0).collect()\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- 0 until numbers.length) {\n        for (j <- i + 1 until numbers.length) {\n            if (math.abs(numbers(i) - numbers(j)) < threshold) {\n                return true\n            }\n        }\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    val stk = mutable.Stack[Char]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == \"(\") {\n            stk.push(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.pop()\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - math.floor(num)\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => math.abs(x - mean)).sum\n    deviation / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    numbers.zipWithIndex.flatMap { case (n, i) =>\n        if (i!= 0) Seq(delimiter) else Seq()\n    } ++ numbers\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    val parenGroups = parenString.split()\n    for (group <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result += maxDepth\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.product\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    val maxSoFar = numbers.max\n    val result = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        result.addOne(maxSoFar)\n    }\n    result.toList\n}\n",
            "def makePalindrome(s: String): String = {\n    if (s == s.reverse) s\n    else {\n        val i = s.indexWhere(_.isPalindrome)\n        if (i >= 0) s + s.take(i).reverse\n        else \"\"\n    }\n}\n",
            "def stringXor(a: String, b: String): String = {\n    a.zip(b).map { case (x, y) => if (x == y) \"0\" else \"1\" }.mkString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) None else strs.maxBy(_.length)\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    val prefixes = mutable.ListBuffer[String]()\n    for (i <- 0 until s.length) {\n        prefixes += s.substring(0, i + 1)\n    }\n    prefixes.toList\n}\n",
            "def stringSequence(n: Int): String = {\n    (0 until n + 1).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    musicString.split(\" \").map(durations)\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\n        \"zero\" -> 0,\n        \"one\" -> 1,\n        \"two\" -> 2,\n        \"three\" -> 3,\n        \"four\" -> 4,\n        \"five\" -> 5,\n        \"six\" -> 6,\n        \"seven\" -> 7,\n        \"eight\" -> 8,\n        \"nine\" -> 9\n    )\n    val numList = numbers.split(\" \").filter(numDict.contains)\n    numList.sorted(numDict)\n    numList.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.PositiveInfinity\n    var closestPair = Seq.empty[Double]\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        Seq.fill(numbers.length)(0.0)\n    } else {\n        (numbers - minNum) / (maxNum - minNum)\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int])\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) return n / i\n        i += 1\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    val factors = mutable.ListBuffer[Int]()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors += divisor\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.toList\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    numbers.distinct\n}\n",
            "def flipCase(s: String): String = {\n    s.map {\n        case c if c.isLetter => if (c.isLower) c.toUpper else c.toLower\n        case c => c\n    }\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    for (i <- 0 until xs.length) {\n        res += xs(i) * x**i\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1, x2 = 1.0, -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.sorted.grouped(3).map(_.head).toSeq\n    l.zipWithIndex.map { case (e, i) => if (i % 3 == 0) sortedThird(i // 3) else e }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) 0 else l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 1 to n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += str(i).count(\"7\")\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(i => i % 2 == 0).sorted\n    l.map(i => if (i % 2 == 0) sortedEven(i // 2) else i)\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i))\n        } else {\n            result.append(s.substring(i + 1, i + 3))\n            result.append(s(i))\n        }\n    }\n    result.mkString\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\ndef primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) cnt += 1\n    }\n    f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length; j <- i + 1 until l.length; k <- j + 1 until l.length) {\n        if (l(i) + l(j) + l(k) == 0) return true\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n * n\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(_ + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set[Int]()\n    for (num <- l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    val digits = mutable.ListBuffer[String]()\n    var n = x\n    while (n > 0) {\n        digits += n % bas\n        n //= bas\n    }\n    digits.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    a * h / 2.0\n}\n",
            "def fib4(n: Int): Int = {\n    val fib = Array(0, 0, 2, 0)\n    for (i <- 4 to n) {\n        fib(i % 4) = fib(i % 4 - 1) + fib(i % 4 - 2)\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.length % 2!= 0) sl(l.length / 2)\n    else (sl(l.length / 2) + sl(l.length / 2 - 1)) / 2\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (_ <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    val result = s.map(ch => {\n        val newCh = (ch.toInt - 97 + 5) % 26 + 97\n        chr(newCh)\n    })\n    result.mkString\n}\ndef decodeShift(s: String): String = {\n    val result = s.map(ch => {\n        val newCh = (ch.toInt - 97 + 21) % 26 + 97\n        chr(newCh)\n    })\n    result.mkString\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filter(c =>!vowels.contains(c))\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(_ < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"<\") depth += 1\n        else if (b == \">\") depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.sliding(2).map(x => x(1) - x(0)).toSeq\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    l1.intersect(l2).sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    (0 to n).sum\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"(\") depth += 1\n        else if (b == \")\") depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.map { case (x, i) => x * i }\n}\n",
            "def fibfib(n: Int): Int = {\n    if (n <= 1) 0\n    else {\n        val (a, b, c) = (0, 0, 1)\n        fibfib(n - 1) + fibfib(n - 2) + c\n    }\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (s(i).toLower.toString.contains(vowels) || (i == s.length - 1 && s(i).toLower.toString == \"y\")) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) xStr.reverse else xStr.takeRight(shift) + xStr.dropRight(shift)\n}\n",
            "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.toInt).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(' ')\n    val apples = words.indexOf(\"apples\") - 1\n    val oranges = words.indexOf(\"oranges\") - 1\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(_ % 2 == 0)\n    if (evens.isEmpty) Seq.empty else Seq(evens.min, arr.indexOf(evens.min))\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = lst.groupBy(identity).mapValues(_.size)\n    val goodVals = freqs.filter { case (k, v) => v >= k }.keys\n    goodVals.maxOption.getOrElse(-1)\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left, right = 0, sl.length - 1\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    val isPalin = q.zipWithIndex.forall { case (x, i) => x == q(q.length - i - 1) }\n    val total = q.sum\n    isPalin && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length / 2) {\n        if (arr(i)!= arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    var cnt = 0\n    for (i <- 2 to sqrt(a).toInt) {\n        if (a % i == 0) {\n            cnt += 1\n            a /= i\n        }\n    }\n    cnt == 3\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) x == n else {\n        var tmp = 1\n        while (tmp < x) tmp *= n\n        tmp == x\n    }\n}\n",
            "def isCube(a: Int): Boolean = {\n    val root = math.round(math.pow(a, 1.0 / 3.0)).toInt\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(x => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D')\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = f\"0b${dec.toBinaryString}\"\n    f\"db$binary$db\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    val sLen = s.length\n    if (sLen < 3) false\n    else {\n        @tailrec\n        def loop(i: Int): Boolean = {\n            if (i >= sLen - 2) true\n            else {\n                val c1 = s(i)\n                val c2 = s(i + 1)\n                val c3 = s(i + 2)\n                if (c1 == c2 || c1 == c3 || c2 == c3) false\n                else loop(i + 1)\n            }\n        }\n        loop(0)\n    }\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (g <- grades) {\n        if (g == 4.0) {\n            result += \"A+\"\n        } else if (g > 3.7) {\n            result += \"A\"\n        } else if (g > 3.3) {\n            result += \"A-\"\n        } else if (g > 3.0) {\n            result += \"B+\"\n        } else if (g > 2.7) {\n            result += \"B\"\n        } else if (g > 2.3) {\n            result += \"B-\"\n        } else if (g > 2.0) {\n            result += \"C+\"\n        } else if (g > 1.7) {\n            result += \"C\"\n        } else if (g > 1.3) {\n            result += \"C-\"\n        } else if (g > 1.0) {\n            result += \"D+\"\n        } else if (g > 0.7) {\n            result += \"D\"\n        } else if (g > 0.0) {\n            result += \"D-\"\n        } else {\n            result += \"E\"\n        }\n    }\n    result.toList\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) false\n    else {\n        val sqrtLength = sqrt(length).toInt\n        for (i <- 2 to sqrtLength) {\n            if (length % i == 0) return false\n        }\n        true\n    }\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10 ** (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = n.toString.map(_.asDigit).sum\n    java.lang.Integer.toBinaryString(digitsSum)\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).filter(_ % 2 == 0).sum\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map(_.sorted)\n    words.mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = lst.zipWithIndex.flatMap { case (row, i) =>\n        row.zipWithIndex.map { case (elem, j) =>\n            (i, j)\n        }\n    }.filter(_._2 == x)\n    coords.sortBy(a => (a._1, -a._2))\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) Seq.empty\n    else if ((arr.head + arr.last) % 2 == 0) arr.sorted.reverse\n    else arr.sorted\n}\n",
            "def encrypt(s: String): String = {\n    s.map(ch => (ch + 4).toChar % 26 + 'a')\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.sorted.distinct\n    if (sl.length < 2) None else Some(sl(1))\n}\n",
            "val sentences: Seq[String] = s.split(Regex(\"\"\"[.!?]\\s*\"\"\"))\nsentences.count(sentence => sentence.length >= 2 && sentence.take(2) == \"I \")\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x match {\n        case x: Int if y.isInstanceOf[Int] && z.isInstanceOf[Int] =>\n            (x + y).asInstanceOf[Int] == z.asInstanceOf[Int] ||\n            (x + z).asInstanceOf[Int] == y.asInstanceOf[Int] ||\n            (y + z).asInstanceOf[Int] == x.asInstanceOf[Int]\n        case _ => false\n    }\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (ch1 in vowels) {\n                result.append(ch1.toChar)\n            } else {\n                result.append(ch1.toChar)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    result.mkString\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\ndef skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(isPrime)\n    if (primes.isEmpty) 0 else {\n        val largest = primes.max\n        largest.toString.map(_.asDigit).sum\n    }\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) false\n    else {\n        val keys = d.keys\n        val allLower = keys.forall(_.isLower)\n        val allUpper = keys.forall(_.isUpper)\n        allLower || allUpper\n    }\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    val primes = mutable.ListBuffer[Int]()\n    for (num <- 2 to n) {\n        if (primes.forall(num % _!= 0)) {\n            primes += num\n        }\n    }\n    primes.toSeq\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "def countUpper(s: String): Int = {\n    s.zipWithIndex.count { case (c, i) => i % 2 == 0 && c.toUpper.isLetter }\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toFloat\n    if (num >= 0) num.toInt + 0.5 else num.toInt - 0.5\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (0 until n).map(_ * 2 + 1)\n}\n",
            "val regex = new Regex(\"\"\"[, ]\"\"\")\ndef wordsString(s: String): Seq[String] = {\n    regex.split(s).filter(_.length > 0)\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1\n    else if (y % 2 == 0) y\n    else if (x!= y) y - 1\n    else -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) None else Some(bin(m + (n - m) / 2 + 1).drop(2))\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(num => num.toString.forall(digit => (digit.toInt % 2)!= 0))\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted(Ordering.Int.reverse)\n    sortedArr.map(x => digitNames(x-1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    nums.map { i =>\n        if (i % 2!= 0) nums.take(i).sum else nums.take(i).product\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\ndef evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array(0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    arr.count(n => digitsSum(n) > 0)\n}\ndef digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.asDigit).sum\n    } else {\n        nStr.take(2).map(_.asDigit).sum * 2 + digitsSum(n.abs)\n    }\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    val sortedArr = arr.sorted\n    for (i <- 0 until arr.length) {\n        if (arr.drop(i) == sortedArr.take(arr.length - i) && arr.take(i) == sortedArr.drop(arr.length - i)) {\n            return true\n        }\n    }\n    false\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.count(_ % 2!= 0)\n    val evenCnt = lst2.count(_ % 2 == 0)\n    if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = mutable.Map[String,Int]()\n    val words = test.split(\" \").filter(_.length > 0)\n    for (w <- words) {\n        freq(w) = freq.getOrElse(w, 0) + 1\n    }\n    val result = mutable.Map[String,Int]()\n    if (freq.nonEmpty) {\n        val maxFreq = freq.values.max\n        for ((k,v) <- freq) {\n            if (v == maxFreq) {\n                result(k) = v\n            }\n        }\n    }\n    result.toMap\n}\n",
            "def isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\ndef reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filter(ch =>!c.contains(ch))\n    Seq(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    lst.map(num => s\"the number of odd elements in the string $num of the input.\")\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    val minSum = nums.min\n    var curSum = 0\n    var minCurSum = 0\n    for (n <- nums) {\n        curSum = Math.min(curSum + n, 0)\n        minCurSum = Math.min(curSum, minCurSum)\n    }\n    if (minCurSum == 0) minSum else minCurSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(arr => ceil(arr.sum / capacity).toInt).sum\n}\n",
            "def countOnes(num: Int): Int = {\n    val binStr = num.toBinaryString\n    binStr.count(_ == '1')\n}\ndef sortArray(arr: Seq[Int]): Seq[Int] = {\n    arr.sortBy(x => (countOnes(x), x))\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(_.length > 0)\n    words.filter(_.count(_.toLower.isLower) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- (word.length - 2) to 0 by -1) {\n        if (word(i) in vowels && word(i - 1) not in vowels && word(i + 1) not in vowels) {\n            return word(i)\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == \"(\") depth += 1\n        else depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    arr.sorted.takeRight(k)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).filter(_ % 2!= 0).sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    arr.take(k).filter(_.toString.length <= 2).sum\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    val collatz = mutable.ListBuffer[Int]()\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz += n\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length!= 10 || date(2)!= \"-\" || date(5)!= \"-\") {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m in List(1, 3, 5, 7, 8, 10, 12) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (m in List(4, 6, 9, 11) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    return false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) txt.split(\" \")\n    else if (txt.contains(\",\")) txt.split(\",\")\n    else Seq(txt.count(_ => _.isLower && _.toInt % 2 == 0).toString)\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    val freq = lst.groupBy(identity).mapValues(_.size)\n    val maxFreq = freq.values.max\n    maxFreq <= 2\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\ndef intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None\n    else if (arr.contains(0)) Some(0)\n    else {\n        val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n        Some(sign * arr.map(math.abs).sum)\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = mutable.ListBuffer[Int]()\n                if (i!= 0) temp += grid(i - 1)(j)\n                if (j!= 0) temp += grid(i)(j - 1)\n                if (i!= n - 1) temp += grid(i + 1)(j)\n                if (j!= n - 1) temp += grid(i)(j + 1)\n                minVal = temp.min\n            }\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until k) {\n        result += 1 if i % 2 == 0 else minVal\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) Seq(1)\n    else {\n        val seq = Seq(1, 3)\n        for (i <- 2 to n) {\n            if (i % 2 == 0) seq.append(i / 2 + 1)\n            else seq.append(seq(i - 1) + seq(i - 2) + (i + 3) / 2)\n        }\n        seq\n    }\n}\n",
            "def digits(n: Int): Int = {\n    val odds = n.toString.filter(_ % 2 == 1).map(_.toInt)\n    if (odds.isEmpty) 0 else odds.reduce(_ * _)\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIdx = mutable.ListBuffer[Int]()\n    val closeIdx = mutable.ListBuffer[Int]()\n    for ((i, ch) <- s.zipWithIndex) {\n        if (ch == '[') {\n            openIdx += i\n        } else if (ch == ']') {\n            closeIdx += i\n        }\n    }\n    closeIdx.reverseInPlace()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => math.pow(math.ceil(n), 2)).sum.toInt\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) false\n    else {\n        val last = txt.substring(txt.lastIndexOf(' ') + 1)\n        last.length == 1 && last.head.isLetter\n    }\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    val idx = arr.zipWithIndex.filter(_._1 < _._2).map(_._2)\n    if (idx.isEmpty) -1 else idx.max\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = if (neg.isEmpty) None else Some(neg.max)\n    val minPos = if (pos.isEmpty) None else Some(pos.min)\n    Seq(maxNeg, minPos)\n}\n",
            "def anyToReal(o: Any): Double = {\n    if (o.isInstanceOf[String]) {\n        o.asInstanceOf[String].replace(',', '.').toDouble\n    } else if (o.isInstanceOf[Int]) {\n        o.asInstanceOf[Int].toDouble\n    } else if (o.isInstanceOf[Double]) {\n        o.asInstanceOf[Double]\n    } else {\n        throw new RuntimeException(\"Type Error\")\n    }\n}\ndef compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) {\n        None\n    } else if (a1 > b1) {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "val regex = new Regex(r\"\\s{3,}\")\ndef fixSpaces(txt: String): String = {\n    regex.replaceAllIn(txt, \"-\").replace(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = Seq(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split('.')\n    if (lst.length!= 2 ||!lst(1).toLowerCase in suf || lst(0).length == 0 ||!lst(0)(0).isLetter || lst(0).count(_.isDigit) > 3) \"No\" else \"Yes\"\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- lst.indices) {\n        if (i % 3 == 0) {\n            result += pow(lst(i), 2)\n        } else if (i % 4 == 0) {\n            result += pow(lst(i), 3)\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\ndef wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    words.filter(w => isPrime(w.length)).mkString(\" \")\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(n => n.toString.map(_.asDigit).sum)\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    nums.count(n => n > 10 && n % 2 == 1 && n.toString.head.toString in odds)\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array.fill(3)(0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) // 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1 not in names) || (planet2 not in names) {\n        Seq.empty\n    } else {\n        val l = names.indexOf(planet1)\n        val r = names.indexOf(planet2)\n        if (l > r) {\n            bf(planet2, planet1)\n        } else if (l == r) {\n            Seq.empty\n        } else {\n            names.slice(l + 1, r)\n        }\n    }\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = lst.filter(_.length % 2 == 0).sorted(\n        Ordering.by(x => (x.length, x))\n    )\n    result\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) y\n    else {\n        val i = (2 to sqrt(n).toInt).find(n % _ == 0).getOrElse(n)\n        if (i == n) x else y\n    }\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).sum\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map { case (x, y) => math.abs(x - y) }\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    val maxS = extensions.map(ext => {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        upper - lower\n    }).max\n    extensions(maxS)\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) false\n    else {\n        val b2 = b + b\n        a.contains(b2)\n    }\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.abs.toString\n    val even = ds.count(_ % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = new StringBuilder()\n    for ((value, numeral) <- values.zip(numerals)) {\n        while (num >= value) {\n            res.append(numeral)\n            num -= value\n        }\n    }\n    res.toString\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = List(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    val maxCnt = words.map(_.toSet.size).max\n    val maxW = words.filter(_.toSet.size == maxCnt).min\n    maxW\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        Seq(num + need, remaining - need)\n    } else {\n        Seq(num + remaining, 0)\n    }\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val ops = operators.to(mutable.ListBuffer)\n    val nums = operands.to(mutable.ListBuffer)\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = nums(i) ** nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1).toInt\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        if (ch.isLetter) {\n            if (ch.isUpper) result += ch.toLower\n            else result += ch.toUpper\n        } else result += ch\n    }\n    result.mkString\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) None else {\n        val md5Hash = MessageDigest.getInstance(\"MD5\")\n        val txtBytes = txt.getBytes()\n        md5Hash.update(txtBytes)\n        val md5Encoded = md5Hash.digest()\n        Some(md5Encoded.map(\"%02x\".format(_)).mkString)\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (lower to upper).filter(_ % 2 == 0)\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [String]()\n    var currentGroup = \"\"\n    var parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += ch\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup += ch\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0.0, +) / Double(numbers.count)\n    let deviation = numbers.map { abs($0 - mean) }.reduce(0.0, +)\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i!= 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    var parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var nSum = 0\n    for n in numbers {\n        nSum += n\n    }\n    var nProduct = 1\n    for n in numbers {\n        nProduct *= n\n    }\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == s.reversed()\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(s[i..<s.count]) {\n            return s + s[i..<s.count].reversed()\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    return String(a.characters.zip(b.characters).map { $0.0 ^ $0.1 })\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    return strs.isEmpty? nil : strs.max(by: { $0.count < $1.count })\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(s[0..<i + 1])\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return String(Array(1...n).map { \"\\($0)\" })\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.map { durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<s.count - substring.count + 1 {\n        if s[i..<i + substring.count] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    ]\n    let numList = numbers.components(separatedBy: \" \").filter { $0 in numDict.keys }\n    numList.sort(by: { numDict[$0]! })\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    let minNum = numbers.min()!\n    let maxNum = numbers.max()!\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return (numbers - minNum) / (maxNum - minNum)\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.filter { $0 is Int } as! [Int]\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2...n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num] = counts[num, default: 0] + 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if counts[num] == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = [Character]()\n    for ch in s {\n        if!ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return String(flipped)\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += xs[i] * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.sorted(by: { $0 % 3 == 0? $0 : Int.max })\n    return l.enumerated().map { (i, e) in\n        sortedThird[i // 3] if i % 3 == 0 else e\n    }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    return l.sorted().unique()\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    return l.isEmpty? 0 : l.max()!\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l.filter { $0 % 2 == 0 }.sorted()\n    return l.enumerated().map { (i, e) in\n        sortedEven[i // 2] if i % 2 == 0 else e\n    }\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    for i in stride(from: 0, through: s.count, by: 3) {\n        if i + 3 > s.count {\n            result.append(s[i..<s.count])\n        } else {\n            result.append(s[i+1..<i+3])\n            result.append(s[i])\n        }\n    }\n    return result.joined()\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i + 1..<l.count {\n            for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if -num in seen {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var digits = [String]()\n    while x > 0 {\n        digits.append(String(x % bas))\n        x /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    return sl[l.count / 2] if l.count % 2!= 0 else (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.append(Character(UnicodeScalar(Int(ch.unicodeScalars.first!.value) + 5) % 26 + 97))\n    }\n    return String(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.append(Character(UnicodeScalar(Int(ch.unicodeScalars.first!.value) + 21) % 26 + 97))\n    }\n    return String(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return String(txt.characters.filter { vowels.index(of: $0) == nil })\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.allSatisfy { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    var diff = [y - x for x, y in zip(l, l[1:])]\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return l1.filter { $0 in l2 }\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (0..<n+1).reduce(0, +)\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    var a = 0, b = 0, c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    var cnt = 0\n    for c in s.lowercased() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" || c == \"y\" {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return xStr.reversed()\n    } else {\n        return xStr.suffix(shift) + xStr.prefix(xStr.count - shift)\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.filter { $0.isUppercase }.map { Int($0.unicodeScalar) }.reduce(0, +)\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let applesIndex = words.index(of: \"apples\")! - 1\n    let orangesIndex = words.index(of: \"oranges\")! - 1\n    return n - Int(words[applesIndex]) - Int(words[orangesIndex])\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.isEmpty {\n        return [Int]()\n    }\n    var minEven = evens[0]\n    for n in evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    var result = [Int]()\n    result.append(minEven)\n    result.append(arr.index(of: minEven)!)\n    return result\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n] = freqs[n, default: 0] + 1\n    }\n    var goodVals = [Int]()\n    for (k, v) in freqs {\n        if v >= k {\n            goodVals.append(k)\n        }\n    }\n    return goodVals.isEmpty? -1 : max(goodVals)\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result = [Int]()\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    guard q.count > 0 else { return false }\n    let isPalin = q.reduce(true) { $0 == $1 }\n    let total = q.reduce(0) { $0 + $1 }\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i]!= arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return lst1 if cnt1 <= cnt2 else lst2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(floor(sqrt(Double(n)))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2...a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    return n < 2? x == n : x % (n * n) == 0\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    return abs(a) == Int(pow(Double(abs(a)), 1.0 / 3.0))\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.count { $0 in \"2357BD\" }\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\" + binary + \"db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    var seen = Set<String>()\n    while!seen.contains(s) {\n        seen.insert(s)\n        var next = String()\n        for c in s {\n            next.append(String(c))\n        }\n        s = next\n    }\n    return s == \"1\"\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        switch g {\n        case 4.0:\n            result.append(\"A+\")\n        case let g where g > 3.7:\n            result.append(\"A\")\n        case let g where g > 3.3:\n            result.append(\"A-\")\n        case let g where g > 3.0:\n            result.append(\"B+\")\n        case let g where g > 2.7:\n            result.append(\"B\")\n        case let g where g > 2.3:\n            result.append(\"B-\")\n        case let g where g > 2.0:\n            result.append(\"C+\")\n        case let g where g > 1.7:\n            result.append(\"C\")\n        case let g where g > 1.3:\n            result.append(\"C-\")\n        case let g where g > 1.0:\n            result.append(\"D+\")\n        case let g where g > 0.7:\n            result.append(\"D\")\n        case let g where g > 0.0:\n            result.append(\"D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(floor(sqrt(Double(length)))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * pow(10, n - 2)\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    for d in String(n).characters {\n        digitsSum += Int(String(d))!\n    }\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in stride(from: 0, through: lst.count, by: 2) where lst[i] % 2 == 0 {\n        result += lst[i]\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \")\n    let sortedWords = words.map { word in\n        String(word.characters.sorted())\n    }\n    return String(words.joined(separator: \" \"))\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [Int]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append(i)\n                coords.append(j)\n            }\n        }\n    }\n    coords.sort(by: { (a, b) -> Bool in\n        return a < b\n    })\n    var result = [[Int]]()\n    for i in 0..<coords.count {\n        if i % 2 == 0 {\n            result.append([coords[i], coords[i + 1]])\n        }\n    }\n    return result\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        let shifted = Int(ch.unicodeScalars.first!.value) + 4\n        if shifted > 122 {\n            shifted -= 26\n        }\n        result.append(String(UnicodeScalar(UInt8(shifted))))\n    }\n    return String(result)\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Array(sorted(Set(lst)))\n    return sl.count < 2? nil : sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.components(separatedBy: \".!?\")\n    return sentences.filter { $0.count >= 2 }.map { $0.hasPrefix(\"I \") }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    return x is Int && y is Int && z is Int && (x + y == z || x + z == y || y + z == x)\n}\n",
            "func encode(_ message: String) -> String {\n    var result = [Character]()\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.isLower? ch.uppercased() : ch.lowercased()\n            if ch1 == \"A\" || ch1 == \"E\" || ch1 == \"I\" || ch1 == \"O\" || ch1 == \"U\" || ch1 == \"a\" || ch1 == \"e\" || ch1 == \"i\" || ch1 == \"o\" || ch1 == \"u\" {\n                ch1 = String(ch1.unicodeScalar + 2)\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    var primes = [Int]()\n    for n in lst {\n        if isPrime(n) {\n            primes.append(n)\n        }\n    }\n    if primes.isEmpty {\n        return 0\n    }\n    var largest = String(max(primes))\n    return largest.reduce(0) { $0 + Int($1) }\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    return!d.isEmpty && (d.keys.allSatisfy { $0.isLowercase } || d.keys.allSatisfy { $0.isUppercase })\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2...n {\n        if primes.isEmpty || primes.contains { num % $0!= 0 } {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    return s.filter { $0.isEvenIndex && $0 in vowels }.count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)\n    return num >= 0? Int(num + 0.5) : Int(num - 0.5)\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return [n + 2 * i for i in 0..<n]\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.components(separatedBy: \", \")\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1 if x!= y else -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    guard n <= m else { return nil }\n    let rAvg = Int((m + n) / 2.0 + 0.5)\n    return String(rAvg, radix: 2)\n}\n",
            "func allDigitsOdd(_ s: String) -> Bool {\n    return s.allSatisfy { $0.unicodeScalars.first!.value % 2!= 0 }\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    return x.filter { allDigitsOdd(String($0)) }.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = [Int](repeating: 0, count: n)\n    for i in 1...n {\n        nums[i - 1] = i\n    }\n    var result = [Int]()\n    for i in 1...n {\n        result.append(i % 2!= 0? nums.prefix(i).reduce(0, +) : nums.prefix(i).reduce(1, *)!)\n    }\n    return result\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [Int](repeating: 0, count: 2)\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int($0) }.reduce(0, +)\n    } else {\n        let firstTwo = Int(nStr.prefix(2))!\n        return firstTwo * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<] == sortedArr[i..<] && arr[0..<i] == sortedArr[i..<] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCount = lst1.filter { $0 % 2!= 0 }.count\n    let evenCount = lst2.filter { $0 % 2 == 0 }.count\n    return evenCount >= oddCount? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    let words = test.split(separator: \" \").filter { $0.count > 0 }\n    for w in words {\n        freq[w] = freq.get(w, defaultValue: 0) + 1\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        let maxFreq = freq.values.max()!\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == s.reversed()\n}\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    var s1 = String()\n    for ch in s {\n        if c.contains(ch) {\n            continue\n        }\n        s1.append(ch)\n    }\n    return [s1, \"yes\" if isPalindrome(s1) else \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        var n = 0\n        for d in num {\n            if Int(String(d))! % 2 == 1 {\n                n += 1\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.map { $0.reduce(0, +) }.reduce(0, +) / capacity + 1\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return num.binaryDigits.count { $0 == 1 }\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted(by: { countOnes($0) < countOnes($1) || countOnes($0) == countOnes($1) && $0 < $1 })\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \")\n    return words.filter { w in\n        let lower = w.lowercased()\n        return lower.count { c in\n            c in consonants\n        } == n\n    }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 0, by: -1) {\n        if word[i] in vowels && word[i - 1]!= vowels && word[i + 1]!= vowels {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    return arr.sorted().suffix(k)\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 0 && x % 2!= 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var result = 0\n    for n in arr[0..<k] {\n        if String(n).count <= 2 {\n            result += n\n        }\n    }\n    return result\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n!= 1 {\n        if n % 2!= 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    guard date.count == 10, date[2] == \"-\", date[5] == \"-\" else {\n        return false\n    }\n    let m = Int(date.prefix(2))!\n    let d = Int(date.suffix(2))!\n    guard m in [1, 3, 5, 7, 8, 10, 12], d >= 1, d <= 31 else {\n        return false\n    }\n    guard m in [4, 6, 9, 11], d >= 1, d <= 30 else {\n        return false\n    }\n    guard m == 2, d >= 1, d <= 29 else {\n        return false\n    }\n    return true\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.components(separatedBy: \" \")\n    } else if txt.contains(\",\") {\n        return txt.components(separatedBy: \",\")\n    } else {\n        return [String(txt.count(where: { $0.isLowercase && $0.unicodeScalars.first!.value % 2 == 0 }))]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    for i in stride(from: 1, through: lst.count, by: 1) {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if 0 in arr {\n        return 0\n    }\n    let sign = -1 * (arr.filter { $0 < 0 }.count % 2 == 1? -1 : 1)\n    return sign * arr.reduce(0) { $0 + abs($1) }\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i!= 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j!= 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i!= n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j!= n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    var seq = [Int]()\n    if n == 0 {\n        seq.append(1)\n        return seq\n    }\n    seq.append(1)\n    seq.append(3)\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = Array(String(n).filter { Int($0) % 2 == 1 })\n    return odds.reduce(1, { $0 * $1 }) if!odds.isEmpty else 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for i in 0..<s.count {\n        if s[i] == \"[\" {\n            openIdx.append(i)\n        } else if s[i] == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    var l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { pow($0, 2) }.reduce(0, +)\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt.split(separator: \" \").last!\n    return last.count == 1 && last.first!.isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.isEmpty? -1 : idx.max()!\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in lst {\n        if i < 0 {\n            neg.append(i)\n        } else if i > 0 {\n            pos.append(i)\n        }\n    }\n    var maxNeg: Int? = nil\n    if!neg.isEmpty {\n        maxNeg = neg.max()\n    }\n    var minPos: Int? = nil\n    if!pos.isEmpty {\n        minPos = pos.min()\n    }\n    return [maxNeg, minPos]\n}\n",
            "func anyToReal(_ o: Any) -> Double {\n    if let o = o as? String {\n        return Double(o.replacingOccurrences(of: \",\", with: \".\"))!\n    } else if let o = o as? Int {\n        return Double(o)\n    } else if let o = o as? Double {\n        return o\n    } else {\n        fatalError(\"Type Error\")\n    }\n}\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \" \", with: \"_\", options:.regularExpression)\n       .replacingOccurrences(of: \"   \", with: \"-\", options:.regularExpression)\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    if lst.count!= 2 ||!lst[1] in suf || lst[0].isEmpty ||!lst[0][0].isLetter || [x for x in lst[0] if x.isDigit].count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, e) in lst.enumerated() {\n        if i % 3 == 0 {\n            result += pow(e, 2)\n        } else if i % 4 == 0 {\n            result += pow(e, 3)\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    return words.filter { isPrime($0.count) }.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(\"/\")\n    let ns = n.split(\"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int($0) }.reduce(0, +)\n    } else {\n        let firstTwo = Int(nStr.prefix(2))!\n        return firstTwo * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted(by: digitsSum)\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { $0 > 10 && $0 % 2 == 1 && String($0).characters.first! in odds }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [Int](repeating: 0, count: 3)\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else { return [] }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []\n    }\n    return names[l + 1...r]\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    return result.sorted(by: { (s1, s2) in\n        return (s1.count, s1) < (s2.count, s2)\n    })\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && $0 % 2 == 1 }.map { $0 * $0 }.reduce(0, +)\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return game.map { $0 - $1 }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Float.min\n    var maxExt = \"\"\n    for ext in extensions {\n        var upper = 0\n        var lower = 0\n        for c in ext {\n            if c.isUppercase {\n                upper += 1\n            } else if c.isLowercase {\n                lower += 1\n            }\n        }\n        let s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    return b.suffix(b.count - b.firstIndex(of: b)!) + b.prefix(b.firstIndex(of: b)!) in a\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    let even = ds.count { $0.unicodeScalars.first!.value % 2 == 0 }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = [String]()\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let sorted = [a, b, c].sorted()\n    return sorted[0] * sorted[0] + sorted[1] * sorted[1] == sorted[2] * sorted[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = w.count(where: { $0!= w[0] }) + 1\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        if ch.isLetter {\n            result.append(ch.isUpper? ch.lowercased() : ch.uppercased())\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    guard!txt.isEmpty else { return nil }\n    let md5Hash = MD5()\n    let txtBytes = txt.data(using:.utf8)!\n    md5Hash.update(txtBytes)\n    let md5Encoded = md5Hash.hexdigest()\n    return md5Encoded\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    var lower = max(2, min(a, b))\n    var upper = min(8, max(a, b))\n    var result = [Int]()\n    while lower <= upper {\n        if lower % 2 == 0 {\n            result.append(lower)\n        }\n        lower += 1\n    }\n    return result\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    const stk: Array<string> = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    const deviation = numbers.reduce((a, b) => a + Math.abs(b - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i!== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split();\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    const nSum = numbers.reduce((a, b) => a + b, 0);\n    const nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar = -Infinity;\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const makePalindrome = (s: string): string => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    return a.split(\"\").map((x, i) => (x === b[i]? \"0\" : \"1\")).join(\"\");\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return Array.from(Array(n + 1).keys()).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes = musicString.split();\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict: { [key: string]: number } = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = numbers.split(\" \").filter((x) => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Number.MAX_SAFE_INTEGER;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s: string): number => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n //= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: { [key: number]: number } = {};\n    for (const num of numbers) {\n        counts[num] = counts[num] + 1 || 1;\n    }\n    return numbers.filter(num => counts[num] === 1);\n}\n",
            "export const flipCase = (s: string): string => {\n    const flipped: Array<string> = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.toLowerCase() === ch) {\n            flipped.push(ch.toUpperCase());\n        } else {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = l.sort((a, b) => a - b).slice(0, l.length // 3);\n    return l.map((e, i) => sortedThird[i // 3] if i % 3 === 0 else e);\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (\"\" + i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((e, i) => i % 2 === 0).sort();\n    return l.map((e, i) => (i % 2 === 0? sortedEven[i // 2] : e));\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: Array<string> = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n: number): number => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    return n ** 2;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    let result = \"\";\n    while (x > 0) {\n        result = String(x % bas) + result;\n        x = Math.floor(x / bas);\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = l.sort((a, b) => a - b);\n    if (l.length % 2!== 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    const result = s.split(\"\").map(ch => {\n        const code = ord(ch);\n        return String.fromCharCode(((code - 97 + 5) % 26) + 97);\n    });\n    return result.join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    const result = s.split(\"\").map(ch => {\n        const code = ord(ch);\n        return String.fromCharCode(((code - 97 + 21) % 26) + 97);\n    });\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.split(\"\").filter(char =>!vowels.includes(char)).join(\"\");\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return l1.filter(e => l2.includes(e));\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n //= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return (n * (n + 1)) / 2;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n: number): number => {\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return s.split(\"\").reduce((sum, c) => sum + (c.toUpperCase().charCodeAt(0) - 64), 0);\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const applesIndex = words.indexOf('apples');\n    const orangesIndex = words.indexOf('oranges');\n    return n - parseInt(words[applesIndex - 1]) - parseInt(words[orangesIndex - 1]);\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs: { [key: number]: number } = {};\n    for (const n of lst) {\n        freqs[n] = freqs[n] + 1 || 1;\n    }\n    const goodVals = Object.keys(freqs).filter(k => freqs[k] >= k);\n    return goodVals.length? Math.max(...goodVals) : -1;\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.slice().sort();\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((e, i) => e === q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    const cnt2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n    return lst1.length <= lst2.length? lst1 : lst2;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; a >= i; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    return Math.abs(a) === Math.round(Math.pow(a, 1 / 3));\n}\n",
            "export const hexKey = (num: string): number => {\n    return num.split(\"\").filter(x => x === \"2\" || x === \"3\" || x === \"5\" || x === \"7\" || x === \"B\" || x === \"D\").length;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    const set = new Set();\n    while (s!== \"1\") {\n        if (set.has(s)) {\n            return false;\n        }\n        set.add(s);\n        let sum = 0;\n        for (let i = 0; i < s.length; i++) {\n            sum += Number(s[i]) ** 2;\n        }\n        s = sum.toString();\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(length)) >= i; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * 10 ** (n - 2);\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = Array.from(String(n), Number).reduce((acc, cur) => acc + cur, 0);\n    return (digitsSum >>> 0).toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    return lst.filter((x, i) => i % 2 === 1 && x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words = s.split(\" \").map(word => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] - b[0] || -a[1] + b[1]);\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        const shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            result.push(String.fromCharCode(shifted - 26));\n        } else {\n            result.push(String.fromCharCode(shifted));\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl = lst.sort((a, b) => a - b);\n    return sl.length < 2? null : sl[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.filter(sentence => sentence.length >= 2).reduce((acc, sentence) => acc + (sentence.slice(0, 2) === \"I \"), 0);\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    return (\n        (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") &&\n        ((x + y === z) || (x + z === y) || (y + z === x))\n    );\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result: Array<string> = [];\n    for (const ch of message) {\n        if (ch.isAlpha()) {\n            const ch1 = ch.toUpperCase() if ch.isLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter(n => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = primes.reduce((a, b) => a > b? a : b);\n    return largest.toString().split(\"\").reduce((a, b) => a + parseInt(b), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (!d) {\n        return false;\n    }\n    return Array.from(d.keys()).every(c => c.toLowerCase() === c) || Array.from(d.keys()).every(c => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num <= n; num++) {\n        if (primes.every(p => num % p!== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && c in vowels).length;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    return Math.floor(num + (num >= 0? 0.5 : -0.5));\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return Array.from({length: n}, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    return s.split(/[, ]/).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 if (x!== y) else -1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2.0);\n    return rAvg.toString(2);\n}\n",
            "export const allDigitsOdd = (s: string): boolean => {\n    return s.split(\"\").every((digit) => Number(digit) % 2!== 0);\n}\nexport const uniqueDigits = (x: Array<number>): Array<number> => {\n    return x.filter((num) => allDigitsOdd(num.toString()));\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    return nums.map((i, j) => (i % 2!== 0? nums.slice(0, j + 1).reduce((x, y) => x + y) : nums.slice(0, j + 1).reduce((x, y) => x * y, 1)));\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join(\"\") === sortedArr.slice(0, arr.length - i).join(\"\") && arr.slice(0, i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\")) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter(num => num % 2!== 0).length;\n    const evenCnt = lst2.filter(num => num % 2 === 0).length;\n    return evenCnt >= oddCnt? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq: Map<string, number> = new Map();\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        const count = freq.get(w) || 0;\n        freq.set(w, count + 1);\n    }\n    const result: Map<string, number> = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (const [k, v] of freq.entries()) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.split(\"\").filter(ch => c.indexOf(ch) === -1).join(\"\");\n    return [s1, isPalindrome(s1)? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = num.split(\"\").reduce((acc, d) => acc + (ord(d) % 2 === 1? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    return grid.map(arr => Math.ceil(arr.reduce((a, b) => a + b, 0) / capacity)).reduce((a, b) => a + b, 0);\n}\n",
            "export const countOnes = (num: number): number => {\n    return num.toString(2).split(\"1\").length - 1;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => countOnes(a) - countOnes(b) || a - b);\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => c.toLowerCase() in consonants).length === n);\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const check = (s: string): boolean => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur, i) => acc + (i % 2 === 0 && cur % 2!== 0? cur : 0), 0);\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).reduce((acc, n) => acc + (n <= 99? n : 0), 0);\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n!== 1) {\n        if (n % 2!== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    return (\n        date.length === 10 &&\n        date[2] === \"-\" &&\n        date[5] === \"-\" &&\n        parseInt(date.slice(0, 2)) in [1, 3, 5, 7, 8, 10, 12] &&\n        parseInt(date.slice(3, 5)) >= 1 &&\n        parseInt(date.slice(3, 5)) <= 31 &&\n        parseInt(date.slice(0, 2)) in [4, 6, 9, 11] &&\n        parseInt(date.slice(3, 5)) >= 1 &&\n        parseInt(date.slice(3, 5)) <= 30 &&\n        parseInt(date.slice(0, 2)) === 2 &&\n        parseInt(date.slice(3, 5)) >= 1 &&\n        parseInt(date.slice(3, 5)) <= 29\n    );\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (!arr.length) {\n        return null;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i!== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j!== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i!== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j!== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1 if i % 2 === 0 else minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = n.toString().split(\"\").filter(d => parseInt(d) % 2 === 1).map(d => parseInt(d));\n    return odds.reduce((x, y) => x * y, 1) if odds.length > 0 else 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: Array<number> = [];\n    const closeIdx: Array<number> = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    return lst.map(n => Math.pow(Math.ceil(n), 2)).reduce((a, b) => a + b, 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.slice(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last.toLowerCase() >= \"a\" && last.toLowerCase() <= \"z\";\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    const idx = arr.slice(1).reduce((acc, cur, i) => {\n        if (cur < arr[i - 1]) {\n            acc.push(i);\n        }\n        return acc;\n    }, []);\n    return idx.length > 0? Math.max(...idx) : -1;\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0? Math.max(...neg) : null;\n    const minPos = pos.length > 0? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o: any): number => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return parseFloat(o);\n    } else if (typeof o === \"number\") {\n        return o;\n    }\n    throw new Error(\"Type Error\");\n}\nexport const compareOne = (a: any, b: any): number | null => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length!== 2 ||!lst[1] in suf || lst[0].length === 0 ||!lst[0][0].match(/[a-zA-Z]/g) || lst[0].match(/[0-9]/g).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => digitsSum(b) - digitsSum(a));\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && n.toString()[0] in odds).length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1 not in names || planet2 not in names) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    return lst.filter(n => n >= 0 && n % 2 === 1).map(n => n * n).reduce((a, b) => a + b, 0);\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter(c => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter(c => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = String(Math.abs(num));\n    const even = ds.split(\"\").filter(d => Number(d) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n    let res = \"\";\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = nums[i] // nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        if (ch.match(/[a-zA-Z]/)) {\n            result.push(ch.toLowerCase() if ch.match(/[a-z]/) else ch.toUpperCase());\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    const txtBytes = txt.encode();\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest(\"hex\");\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return Array.from(new Set([i for i in range(lower, upper + 1) if i % 2 === 0]));\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i] for i in range(len(s) + 1)]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    return [durations[note] for note in music_string.split()]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(x for i, x in enumerate(l) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(0, n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[i] for i in range(len(l)) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+2]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter()\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join((chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s))\ndef decode_shift(s: str) -> str:\n    return ''.join((chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s))\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    return n if n <= 1 else fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs, range(1, len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiouy\"\n    return sum(1 for c in s if c.lower() in vowels)\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n if n < 2 else x % (x ** (n - 1)) == 0\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1.0 / 3.0) == round(a ** (1.0 / 3.0))\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return str(bin(n)).lstrip('0b')\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i in range(len(words)):\n        words[i] = \"\".join(sorted(words[i]))\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0], -a[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(set(lst)) < 2:\n        return None\n    return sorted(set(lst))[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int)\n        and isinstance(y, int)\n        and isinstance(z, int)\n        and (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch == ch.lower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs() % 10) * (b.abs() % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(\" \") if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    return y - 1 if y % 2 == 0 and y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    return None if n > m else str((n + m) // 2 + 0.5).rjust(2, '0')\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(n for n in x if all_digits_odd(str(n)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[x - 1] for x in arr if 1 <= x <= 9]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(lambda w: len(w) > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if ord(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: sum(arr) // capacity, grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda n: (count_ones(n), n))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words = [w for w in words if len(w) > 0]\n    words = [w for w in words if sum(1 for c in w if c.lower() in consonants) == n]\n    return words\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c == c.lower() and ord(c) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return 0 if not n else reduce(lambda x, y: x * y, [int(d) for d in str(n) if int(d) % 2 == 1])\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n.ceil().pow(2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rindex(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    return factorial(n) ** n\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    return False if len(a) < len(b)\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(int(d) % 2 == 0 for d in ds)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + min(need, remaining), max(0, remaining - need)]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result[::-1] if result else s\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5(txt.encode())\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, a)\n    upper = min(8, b)\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n            elif ch == ')':\n                depth -= 1\n        result.append(depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -2147483648\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s.clone()\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s.clone() + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 0, {\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int, {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    })\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0 for _ in numbers]\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0:\n        x1 *= 2.0\n        x2 *= 2.0\n    while (x1 - x2).abs() > 1e-10:\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0.0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2.0\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[(i % 4)] = sum(fib)\n    return fib[(n % 4)]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i:i+1].lower())!= -1 or (i == len(s) - 1 and s[i:i+1].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return good_vals[0] if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return (s * (s - a) * (s - b) * (s - c)).sqrt()\n    return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    return sum(a!= b for a, b in zip(arr, reversed(arr)))\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n if n < 2 else x % (n * n) == 0\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    return len(s) < 3 or any(s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] for i in range(len(s) - 2))\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return format(sum(int(d) for d in str(n)), \"b\")\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words: List[str] = s.split(\" \")\n    for i in range(len(words)):\n        chars: List[str] = list(words[i])\n        chars.sort()\n        words[i] = \"\".join(chars)\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], a[1]), reverse=True)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            result += chr(shifted - 26)\n        else:\n            result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) > 1 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = compile(r\"[.!?]\\s*\").split(s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.is_alpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if vowels.find(ch1)!= -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(n ** 0.5) + 1))\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    return sum(map(int, str(max(primes))))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return d.keys().all(lambda k: k.islower()) or d.keys().all(lambda k: k.isupper())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs() % 10) * (b.abs() % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and vowels.contains(c))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0.0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return list(filter(lambda w: len(w) > 0, map(str.strip, split(r\"[, ]\", s))))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 1\n    return format(r_avg, \"b\")\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(digit) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort()\n    sorted_arr.reverse()\n    return [digit_names[(x - 1) as usize] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else (nums[:i]).prod() for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[(i % 2) as usize] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if ord(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: sum(arr) // capacity, grid))\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in format(num, 'b') if c == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: len(list(filter(lambda c: consonants.find(c.lower())!= -1, w))) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word) - 1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(txt) - len(txt.translate(str.maketrans(\"aeiou\", \"12345\"))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and \\\n        Counter(lst).most_common(1)[0][1] <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return 0 if not n else int(''.join(str(d) for d in n.to_string() if d.to_digit(10).unwrap() % 2 == 1))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n.ceil()) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    return [max(neg) if neg else None, min(pos) if pos else None]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(c.isdigit() for c in lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words: List[str] = sentence.split()\n    return \" \".join(filter(is_prime, words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=digits_sum)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3) as usize] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0.0 and n % 2.0 == 1.0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    cnt = Counter(w for w in words)\n    return max(words, key=lambda w: (cnt[w], w))\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + min(need, remaining), max(0, remaining - need)]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i].pow(nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5(txt.encode())\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda x: len(x) > 0)\n    for paren_group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in paren_group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(x if x == y else \"1\" for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda note: len(note) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    sorted_list = sorted(num_list, key=lambda num: num_dict[num])\n    return \" \".join(sorted_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(x for x, i in zip(l, range(len(l))) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else x for x, i in zip(l, range(len(l)))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(x for x, i in zip(l, range(len(l))) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else x for x, i in zip(l, range(len(l)))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3])\n            result.append(s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = ''.join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\n    return result\ndef decode_shift(s: str) -> str:\n    result = ''.join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(d <= 0 for d in diff) or all(d >= 0 for d in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs[1:], range(1, len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    for _ in range(n):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(sqrt(n)) + 1))\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            a = a // i\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a0 = abs(a)\n    root = round(pow(a0, 1.0 / 3.0))\n    return root * root * root == a0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join(word.sorted() for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) > 1 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        return (a + b == c) or (a + c == b) or (b + c == a)\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(sqrt(n)) + 1))\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return not d or (d.keys() and all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for c, i in zip(s, range(len(s))) if i % 2 == 0 and vowels.contains(c)])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[, ]\").filter(lambda x: len(x) > 0).tolist()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 1\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2!= 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(all_digits_odd, map(str, x)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x and x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else nums[:i].prod() for i in range(n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for e in lst1 if e % 2!= 0)\n    even_cnt = sum(1 for e in lst2 if e % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(lambda w: len(w) > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(c for c in s if c not in c)\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if int(c) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(arr) / capacity) for arr in grid)\n",
            "def count_ones(num: int) -> int:\n    return num.bit_length() - 1\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: w.count(lambda c: c.lower() in consonants) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num!= 1:\n        if num % 2!= 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in (1, 3, 5, 7, 8, 10, 12) and d >= 1 and d <= 31:\n        return True\n    if m in (4, 6, 9, 11) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(txt) - len(txt.strip(\"aeiouAEIOU\")))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and \\\n        len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return int(n.to_string().filter(lambda c: c.as_digit() % 2 == 1).map(lambda c: c.as_digit()).product())\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(pow(ceil(n), 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", sub(r\" \", \"_\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or not lst[0] or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    return n >= 2 and all(n % i!= 0 for i in range(2, int(sqrt(n)) + 1))\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = xs[0].toInt * ns[0].toInt\n    den = xs[1].toInt * ns[1].toInt\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(w, max_w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + min(need, remaining), max(0, remaining - need)]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result[::-1])\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5(txt.encode())\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(sep=\" \")\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        index = s.index(s[i])\n        if s[:index] == s[:index][::-1]:\n            return s + s[:index][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        index = s.index(s[i+1])\n        prefix = s[:index]\n        prefixes.append(prefix)\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    if len(substring) > len(s):\n        return 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [\n        num for num in numbers.split()\n        if num in num_dict\n    ]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(n - min_num) / (max_num - min_num) for n in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(e for i, e in enumerate(l) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else e for i, e in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == \"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(e for e in l if e % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else e for i, e in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr(ord(c) + 5) if ord(c) >= 97 and ord(c) <= 122 else c for c in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr(ord(c) + 21) if ord(c) >= 97 and ord(c) <= 122 else c for c in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    while n % 2 == 0:\n        n /= 2\n    i = 3\n    while i * i <= n:\n        if n % i!= 0:\n            i += 2\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * j for i, j in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n - 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        c = s[i]\n        if vowels.find(c.lower())!= -1 or (i == len(s) - 1 and c.lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {n: lst.count(n) for n in lst}\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    return sum(a!= b for a, b in zip(arr, reversed(arr)))\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n if n < 2 else x % (n ** 2) == 0\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= int(sqrt(length)):\n        for i in range(2, int(sqrt(length)) + 1):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n).lstrip(\"0b\")\n",
            "def add(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return \" \".join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0], coord[1]), reverse=True)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    return sl[1] if len(sl) >= 2 else None\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(sep=\"[.!?]\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x + y == z) or (x + z == y) or (y + z == x)\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if vowels.find(ch1)!= -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return not d or (all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if 2 <= n:\n        for num in range(2, n):\n            if all(num % p!= 0 for p in primes):\n                primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\", \").split(\" \").filter(lambda x: len(x) > 0).map(str)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int(round((n + m) / 2))\n    return f'{r_avg:b}'\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda e: all(map(lambda c: c % 2!= 0, str(e))), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x and x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[0:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[0:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda x: digits_sum(x) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([e for e in lst1 if e % 2!= 0])\n    even_cnt = len([e for e in lst2 if e % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split()\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(c for c in s if c not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if ord(c) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(curSum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in bin(num)[2:] if c == \"1\"])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").map(str).filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: len(list(filter(lambda c: c.lower() in consonants, w))) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.count - 2, 0, -1):\n        index = word.index(word.find(i))\n        if vowels.find(word[index])!= -1 and vowels.find(word[index - 1]) == -1 and vowels.find(word[index + 1]) == -1:\n            return word[index]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 0 and e % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(e for e in arr[:k] if len(str(e)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(lambda x: x < 0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    if 2 <= n:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i // 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(lambda x, y: x * y, [int(i) for i in str(n) if int(i) % 2 == 1], 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: ceil(x) * ceil(x), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\", maxsplit=1)\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(str.isdigit, lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, map(len, words)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda x: x > 10 and x % 2 == 1, filter(lambda x: str(x).startswith(odds), nums))))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: x.count % 2 == 0)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda x: int(x * x), filter(lambda x: x >= 0 and x.is_integer(), lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - g_guess) for g, g_guess in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for c in ds if int(c) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    cnt = Counter(words)\n    max_cnt = max(cnt.values())\n    return min(w for w in words if cnt[w] == max_cnt)\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(nums[i], nums[i + 1]))\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens: str = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(num - mean) for num in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split(\" \").filter(lambda s: len(s) > 0)\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(c) ^ int(d)) for c, d in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda s: len(s) > 0)\n    return notes.map(lambda note: durations[note])\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.isalpha():\n            flipped.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            flipped.append(ch)\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda x: x % 3 == 0, l))\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x & 1 == 0, l))\n    return [sorted_even[i // 2] if i & 1 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[int(len(l) / 2)]\n    else:\n        return (sl[int(len(l) / 2)] + sl[int(len(l) / 2) - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - l[i] for i, x in enumerate(l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return \"\".join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f'db{binary}db'\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return ''.join(str(int(c)) for c in bin(n)[2:])\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [word.split('').sort().join('') for word in s.split(' ')]\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0] == a[1], a[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = arr.copy()\n    if len(sorted_arr) <= 1:\n        return sorted_arr\n    if (sorted_arr[0] + sorted_arr[-1]) % 2 == 0:\n        sorted_arr.sort(reverse=True)\n    else:\n        sorted_arr.sort()\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int) and\n        isinstance(y, int) and\n        isinstance(z, int) and\n        (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch == ch.lower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum([int(c) for c in largest])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[,]\").filter(w => w.length > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2 + 0.5)\n    return bin(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted([num for num in x if all(int(digit) % 2!= 0 for digit in str(num))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x and x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[0]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([n for n in lst1 if n % 2!= 0])\n    even_cnt = len([n for n in lst2 if n % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split(\" \"))\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(*nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: sum(arr) // capacity + 1, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(bin(num)[2:].split('1')) - 1\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(w => w.length > 0)\n    return words.filter(w => [c.lower() for c in w].filter(c => consonants.includes(c)).length == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.isalpha() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and \\\n        max(lst.count(i) for i in set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.pop() if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n ** 2), map(lambda n: math.ceil(n), lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, (int, float)):\n        return o\n    else:\n        raise TypeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len([ch for ch in lst[0] if ch.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num).to_string()\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result[::-1])\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    }
}