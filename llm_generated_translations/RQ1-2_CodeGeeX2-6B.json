{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    depth = 0\n    for ch in paren_string:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n        result.append(depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [reduce(lambda x, y: x + y, numbers), reduce(lambda x, y: x * y, numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[i:i+1][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(\n        '0' if a[i] == b[i] else '1'\n        for i in range(max(len(a), len(b)))\n    )\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s) + 1):\n        prefixes.append(s[:i])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int, {\"o\": 4, \"o|\": 2, \"|\": 1})\n    notes = music_string.split(\"|\")\n    result = []\n    for note in notes:\n        result.extend([durations[n] for n in note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int, {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    })\n    num_list = numbers.split()\n    num_list = [x for x in num_list if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(accumulate(num_list, lambda a, b: a + (a and \" \" or \"\") + b))\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            filtered_values.append(any_cast(value, int))\n        except ValueError:\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filterfalse(lambda s: not s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[::3])\n    result = []\n    for i, e in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(e)\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[::2])\n    result = []\n    for i, e in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(e)\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(accumulate(l, lambda x, y: x + y))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        if seen[-num]:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(starmap(lambda ch, shift: chr((ord(ch) - ord('a') + shift) % 26 + ord('a')), enumerate(s)))\ndef decode_shift(s: str) -> str:\n    return ''.join(starmap(lambda ch, shift: chr((ord(ch) - ord('a') - shift) % 26 + ord('a')), enumerate(s)))\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filterfalse(vowels.__contains__, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    s2 = set(l2)\n    return list((s1 & s2).intersection(s1 | s2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    sum = 0\n    for i in range(n + 1):\n        sum += i\n    return sum\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    return n - words.count(\"apples\") - words.count(\"oranges\")\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = []\n    for n, c in freqs.items():\n        if c >= n:\n            good_vals.append(n)\n    return -1 if not good_vals else max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    idxs = list(range(len(q)))\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in idxs)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1 / 3) == round(abs(a) ** (1 / 3))\n",
            "def hex_key(num: str) -> int:\n    return sum(c in '2357BD' for c in num)\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    binary = binary.lstrip('0')\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = sum(map(int, n_str))\n    binary = bin(digits_sum)[2:]\n    binary = binary.lstrip('0')\n    return binary\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    words = [''.join(sorted(word)) for word in words]\n    return ''.join(accumulate(words, lambda a, b: a + ' ' + b))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0], coord[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    result = arr[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = ''\n    for ch in s:\n        shifted = chr(ord(ch) + 4)\n        if shifted > 'z':\n            shifted = chr(ord(shifted) - 26)\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst[:]\n    sl.sort()\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return sum(1 for sentence in sentences if sentence.startswith(\"I \") and len(sentence) >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.isupper() else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = [i for i in lst if is_prime(i)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return reduce(lambda acc, d: acc + (ord(d) - ord('0')), largest, 0)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(c.islower() for key in d for c in key) or all(c.isupper() for key in d for c in key)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: Union[int, float, str]) -> int:\n    if isinstance(value, str):\n        num = float(value)\n    else:\n        num = value\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    words = re.split(r\"[, ]\", s)\n    words = [word for word in words if len(word) > 0]\n    return words\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) / 2.0 + 0.5\n    result = bin(int(r_avg))[2:]\n    result = result.lstrip('0')\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return list(dropwhile(lambda num: not all(digit % 2 != 0 for digit in str(num)), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    result = list(map(lambda x: digit_names[x-1], sorted_arr))\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in nums:\n        if i % 2 != 0:\n            result.append(sum(nums[:i]))\n        else:\n            result.append(sum(nums[:i], 1) * sum(nums[:i], 1))\n    return result\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(map(int, str(n))) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i+1:] == sorted_arr[i+1:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test)\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s\n    s1 = [ch for ch in s1 if c.find(ch) == -1]\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c.isdigit() and int(c) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        rs = rs.replace('i', str(n)[0])\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return reduce(lambda a, b: a + ceil(sum(b) / capacity), grid, 0)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = sorted(arr, key=cmp_to_key(lambda a, b: -1 if count_ones(a) == count_ones(b) else count_ones(a) - count_ones(b)))\n    return result\ndef count_ones(num: int) -> int:\n    return bin(num).count('1')\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    return list(accumulate(words, partial(filter, partial(eq, n)), list))\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if s1.count(\"(\") == s1.count(\")\") or s2.count(\"(\") == s2.count(\")\") else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr)\n    return sorted_arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k], 0, lambda a, b: a + (str(b) if len(str(b)) <= 2 else 0))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        return d >= 1 and d <= 31\n    if m == 4 or m == 6 or m == 9 or m == 11:\n        return d >= 1 and d <= 30\n    if m == 2:\n        return d >= 1 and d <= 29\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        result = []\n        for token in txt.split(\",\"):\n            result.append(token)\n        return result\n    else:\n        return [txt[i] for i in range(len(txt)) if txt[i].islower() and i % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst:\n        return True\n    freq = Counter(lst)\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if arr.count(0) % 2 == 1 else -1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i, j in product(range(n), range(n)):\n        if grid[i][j] == 1:\n            temp = []\n            if i != 0:\n                temp.append(grid[i - 1][j])\n            if j != 0:\n                temp.append(grid[i][j - 1])\n            if i != n - 1:\n                temp.append(grid[i + 1][j])\n            if j != n - 1:\n                temp.append(grid[i][j + 1])\n            min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for c in str(n):\n        d = int(c)\n        if d % 2 == 1:\n            odds.append(d)\n    return 0 if not odds else reduce(lambda x, y: x * y, odds, 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, c in enumerate(s):\n        if c == '[':\n            open_idx.append(i)\n        elif c == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n) ** 2, map(lambda n: ceil(n), lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return -1 if not idx else max(idx)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    result = re.sub(r\"\\s{3,}\", \"-\", txt)\n    result = result.replace(\" \", \"_\")\n    return result\n",
            "def file_name_check(file_name: str) -> str:\n    suf = {\"txt\", \"exe\", \"dll\"}\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or not lst[0] or len(lst[0]) > 3 or not lst[0][0].isalpha() or sum(c.isdigit() for c in lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    words = [w for w in words if len(w) in ascii_lowercase]\n    return ' '.join(accumulate(words, lambda a, b: a + (a and ' ' or '') + b))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    return reduce(lambda acc, d: acc + int(d), str(n), 0)\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = sorted(nums, key=lambda n: digits_sum(n))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = sorted(lst, key=cmp_to_key(lambda a, b: 0 if len(a) == len(b) else 1 if len(a) < len(b) else -1))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + (n >= 0 and n % 2 == 1) * (n * n), lst, 0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = ''\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f'{class_name}.{max_ext}'\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_context = md5()\n    md5_context.update(txt.encode())\n    hash_bytes = md5_context.digest()\n    md5_encoded = \"\"\n    for b in hash_bytes:\n        md5_encoded += format(\"{:02x}\", b)\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s) + 1):\n        prefixes.append(s[:i])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if len(note) > 0]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l, key=lambda x: x % 3)\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for x in str(i) if x == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3] + s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen and seen[-num] > 0:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - ord('a') + 21) % 26) + ord('a')) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(zip(l, l[1:]))\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1) if i < len(xs)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(x) for x in lst1)\n    cnt2 = sum(len(x) for x in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return (a ** (1 / 3)) ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return ''.join(str(int(d) + 1) for d in str(n))\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [''.join(sorted(word)) for word in s.split(' ')]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: a[1], reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(list(set(lst)))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n            ch1 = ch1.upper() if ch1.isupper() else ch1.lower()\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(int(d) for d in str(largest))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2 + 0.5\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(digit % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [i % 2 != 0 ? sum(nums[:i]) : reduce(lambda x, y: x * y, nums[:i]) for i in nums]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if DigitsSum(n) > 0)\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:] and arr[:i] == sorted_arr[:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return ['yes', 'no'] if s1 == s1[::-1] else ['no', 'yes']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(int(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: x.bit_count(), reverse=True)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split() if len(w) > 0]\n    return [w for w in words if w.count(w.lower().translate(str.maketrans(\"\", \"\", consonants))) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if Check(s1) or Check(s2) else \"No\"\ndef Check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in {1, 3, 5, 7, 8, 10, 12} and d >= 1 and d <= 31:\n        return True\n    if m in {4, 6, 9, 11} and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [c for c in txt if c.islower() and (ord(c) - ord(\"a\")) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(arr[0]) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.count(0) if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, c in enumerate(s):\n        if c == '[':\n            open_idx.append(i)\n        elif c == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = neg.count > 0 and max(neg) or None\n    min_pos = pos.count > 0 and min(pos) or None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suffixes or not lst[0] or len(lst[0]) > 3 or not lst[0][0].isalpha() or sum(c.isdigit() for c in lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(w)])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    num = int(x) * int(n)\n    den = int(x) * int(n)\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda n: sum(int(d) for d in str(n)))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r + 1]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    return sorted(filter(lambda s: len(s) % 2 == 0, lst), key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[:i] + b[i:] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    return [ds.count('0'), len(ds) - ds.count('0')]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w > w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    hash_md5 = md5()\n    hash_md5.update(txt.encode('utf-8'))\n    return hash_md5.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l, key=lambda x: x % 3)\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\"))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3] + s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n * n\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') - 5) % 26 + ord('a')))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1) if i < len(xs)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(e) for e in lst1)\n    cnt2 = sum(len(e) for e in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a == int(a ** (1 / 3)) ** 3\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec.to_bytes(dec.bit_length(), 'big').hex()}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g >= 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return str(digits_sum).to_radix(2)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(re.compile(r\"[.!?]\\s*\"))\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if re.match(r'[a-zA-Z]', ch):\n            ch1 = ch.upper() == ch and ch.lower() or ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.replace(ch1, ch1 + \"2\")\n        result.append(ch)\n    return \"\".join(result)\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(int(d) for d in str(largest))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((m + n) / 2.0 + 0.5).to_integral_value(ROUND_HALF_UP)\n    return r_avg.to_radix_string(2)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [nums[i] if i % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if Counter(arr[i:]) == Counter(sorted_arr[:len(arr) - i]) and Counter(arr[:i]) == Counter(sorted_arr[len(arr) - i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for num in lst1 if num % 2 != 0)\n    even_cnt = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w:\n            freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k in freq.keys():\n            if freq[k] == max_freq:\n                result[k] = freq[k]\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if d.isdigit() and int(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (sum(arr) / capacity).ceil(), grid))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words = [w for w in words if len(w) > 0]\n    return [w for w in words if len([c for c in w.lower() if c in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if (check(s1) or check(s2)) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = sorted(arr)\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0 and x % 2 != 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(sorted(arr[:k])[:2])\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [len(re.findall(r\"[a-z]\", c)) for c in txt if c.isalpha() and c.isupper()]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if -1 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append((i // 2 + 1).__int__())\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + ((i + 3) // 2).__int__())\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.count(0) if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(n, 2).__int__(), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split(' ')[-1]\n    return len(last) == 1 and re.search(r'[a-z]', last, re.IGNORECASE)\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i + 1 for i in range(len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \"_\").replace(\"  \", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    if len(file_name.split(\".\")) != 2 or file_name.split(\".\")[1] not in suffixes or not re.match(r'[a-z]', file_name.split(\".\")[0][0]) or len(re.findall(r'\\d', file_name.split(\".\")[0])) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(w)])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den % x_den == n_num\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    def compare(a: int, b: int) -> int:\n        return digits_sum(a) - digits_sum(b)\n    merge_sort(result, compare=compare)\n    return result\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x[0] - x[1]) for x in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[:i] + b[i:]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if int(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w > w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return ''.join(reversed(s))\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_ = mean(numbers)\n    return mean(abs(num - mean_) for num in numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = 0\n    n_product = 1\n    for n in numbers:\n        n_sum += n\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -math.inf\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            runes = list(s[:i])\n            for i, j in zip(range(len(runes)), range(len(runes)-1, -1, -1)):\n                runes[i], runes[j] = runes[j], runes[i]\n            return s + \"\".join(runes)\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append(\"0\")\n        else:\n            result.append(\"1\")\n    return \"\".join(result)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i+1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return \" \".join(result)\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = {}\n    for ch in s.lower():\n        dc[ch] = True\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = music_string.split(\" \")\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    strs = numbers.split(\" \")\n    num_list = []\n    for str in strs:\n        num_list.append(str)\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    if min_num == max_num:\n        return []\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    return result\n",
            "def flip_case(s: str) -> str:\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.islower():\n            result.append(ch.upper())\n        else:\n            result.append(ch.lower())\n    return ''.join(result)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i, e in enumerate(xs):\n        res += e * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            sorted_third.append(x)\n    sorted_third.sort()\n    result = [0] * len(l)\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result[i] = sorted_third[i // 3]\n        else:\n            result[i] = x\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    keys = set()\n    result = []\n    for x in l:\n        if x not in keys:\n            keys.add(x)\n            result.append(x)\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    result = [0] * len(l)\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result[i] = sorted_even[i // 2]\n        else:\n            result[i] = x\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 21) % 26 + ord('a')))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for char in txt:\n        if char not in vowels:\n            result.append(char)\n    return \"\".join(result)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = set()\n    set1 = set()\n    for char in s0:\n        set0.add(char)\n    for char in s1:\n        set1.add(char)\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = []\n    for i in range(len(l) - 1):\n        diff.append(l[i + 1] - l[i])\n    return all(x > 0 for x in diff) or all(x < 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    s1 = set(l1)\n    for num in l2:\n        if num in s1:\n            result.append(num)\n    return sorted(result)\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i*i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = 0\n    oranges = 0\n    for i, word in enumerate(words):\n        if word == \"apples\":\n            apples = int(words[i - 1])\n        if word == \"oranges\":\n            oranges = int(words[i - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    min_even = float('inf')\n    min_idx = -1\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n            min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_even, min_idx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    max_val = -1\n    for k, v in freqs.items():\n        if v >= k and k > max_val:\n            max_val = k\n    return max_val\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    for i in range(len(q)):\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n            break\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(b) for b in lst1)\n    cnt2 = sum(len(b) for b in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n or x == 1 or (x % n == 0 and is_simple_power(x // n, n))\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1/3) == int(abs(a) ** (1/3))\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length := len(s)\n    if length < 2:\n        return False\n    for i := 2; i <= int(math.floor(math.sqrt(float(length)))):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digit = int(d)\n        digits_sum += digit\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i, word in enumerate(words):\n        chars = list(word)\n        chars.sort()\n        words[i] = \"\".join(chars)\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], -x[1]))\n",
            "",
            "def encrypt(s: str) -> str:\n    result = ''\n    for ch in s:\n        shifted = chr(ord(ch) + 4)\n        if shifted > 'z':\n            shifted = chr(ord(shifted) - 26)\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    tmp = lst[:]\n    tmp.sort()\n    sl = []\n    for i, e in enumerate(tmp):\n        if i == 0 or e != tmp[i - 1]:\n            sl.append(e)\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == 'I ':\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.islower():\n                ch = ch.upper()\n            if ch in vowels:\n                ch = chr(ord(ch) + 2)\n            result += ch\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    max_prime = 0\n    for n in lst:\n        if is_prime(n) and n > max_prime:\n            max_prime = n\n    if max_prime == 0:\n        return 0\n    largest = str(max_prime)\n    result = 0\n    for d in largest:\n        result += int(d)\n    return result\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return any(unicode.isupper(c) for k in d for c in k) or any(unicode.islower(c) for k in d for c in k)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        flag = True\n        for p in primes:\n            if num % p == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r'[, ]', s)\n",
            "def choose_num(x: int, y: int) -> int:\n    return y if y % 2 == 0 else y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return str(r_avg)\n",
            "def all_odd_digits(s: str) -> bool:\n    for digit in s:\n        if int(digit) % 2 == 0:\n            return False\n    return True\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_odd_digits(str(num)):\n            result.append(num)\n    return sorted(result)\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, reverse=True)\n    result = []\n    for x in sorted_arr:\n        result.append(digit_names[x - 1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in nums:\n        if i % 2 != 0:\n            sum = 0\n            for j in nums[:i]:\n                sum += j\n            result.append(sum)\n        else:\n            product = 1\n            for j in nums[:i]:\n                product *= j\n            result.append(product)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = [c for c in s]\n    for i in range(len(runes) // 2):\n        if runes[i] != runes[len(runes)-1-i]:\n            return False\n    return True\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n+1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for n in arr:\n        if sum(map(int, str(n))) > 0:\n            cnt += 1\n    return cnt\ndef digits_sum(n: int) -> int:\n    if n >= 0:\n        acc = 0\n        for d in str(n):\n            acc += int(d)\n        return acc\n    else:\n        neg = int(str(n)[0:2])\n        return neg * 2 + digits_sum(abs(n))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    return reduce(lambda x, y: x and y, map(lambda x: sorted_arr[x:] == sorted_arr[:len(arr) - x] and sorted_arr[:x] == sorted_arr[len(arr) - x:], range(len(arr))))\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_cnt += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if len(w) > 0:\n            freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\"\n    for ch in s:\n        if ch not in c:\n            s1 += ch\n    if s1 == s1[::-1]:\n        return [s1, \"yes\"]\n    return [s1, \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        if cur_sum + n > 0:\n            cur_sum = 0\n        else:\n            cur_sum += n\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = max(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for row in grid:\n        sum = 0\n        for n in row:\n            sum += n\n        result += math.ceil(sum / capacity)\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: (bin(x).count(\"1\"), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    strs = s.split(\" \")\n    words = []\n    for w in strs:\n        if len(w) > 0:\n            words.append(w)\n    result = []\n    for w in words:\n        count = 0\n        for c in w:\n            if c.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2 != 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, _ = int(date[:2]), int(date[3:5])\n    d, _ = int(date[6:8]), int(date[9:])\n    for i in [1, 3, 5, 7, 8, 10, 12]:\n        if i == m and d >= 1 and d <= 31:\n            return True\n    for i in [4, 6, 9, 11]:\n        if i == m and d >= 1 and d <= 30:\n            return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        cnt = 0\n        for c in txt:\n            if c.islower() and ord(c) % 2 == 0:\n                cnt += 1\n        return [str(cnt)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    max_freq = max(freq.values())\n    return len(lst) == 0 or max_freq <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and length % 2 == 1 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    result = 1\n    for n in arr:\n        if n < 0:\n            result *= -1\n        result += abs(n)\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for d in str(n):\n        if int(d) % 2 == 1:\n            odds.append(int(d))\n    if len(odds) == 0:\n        return 0\n    result = 1\n    for d in odds:\n        result *= d\n    return result\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    result = 0\n    for n in lst:\n        result += int(math.pow(math.ceil(n), 2))\n    return result\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and len(txt[txt.rfind(\" \")+1:]) == 1 and txt[txt.rfind(\" \")+1:].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    if len(idx) == 0:\n        return -1\n    max_idx = idx[0]\n    for i in idx:\n        if i > max_idx:\n            max_idx = i\n    return max_idx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    max_neg = None\n    min_pos = None\n    for n in lst:\n        if n < 0:\n            if max_neg is None:\n                max_neg = n\n            elif n > max_neg:\n                max_neg = n\n        if n > 0:\n            if min_pos is None:\n                min_pos = n\n            elif n < min_pos:\n                min_pos = n\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n >= 8 and n % 2 == 0\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", re.sub(r\"\\s\", \"_\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or len(lst[0]) == 0 or not lst[0][0].isalpha():\n        return \"No\"\n    found = False\n    for s in suffixes:\n        if s == lst[1]:\n            found = True\n            break\n    if not found:\n        return \"No\"\n    digit_cnt = 0\n    for ch in lst[0]:\n        if ch.isdigit():\n            digit_cnt += 1\n    if digit_cnt > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    strs = sentence.split(\" \")\n    words = []\n    for word in strs:\n        if is_prime(len(word)):\n            words.append(word)\n    return \" \".join(words)\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    num0, _ = int(x.split(\"/\")[0]), int(x.split(\"/\")[1])\n    num1, _ = int(n.split(\"/\")[0]), int(n.split(\"/\")[1])\n    return (num0 * num1) % (num0 * num1) == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    result = nums[:]\n    result.sort(key=lambda x: sum(map(int, str(x))))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and odds[int(str(n)[0]) - 1] in odds:\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort()\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and int(n) % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for x, i in enumerate(game):\n        result.append(abs(i - guess[x]))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for c in ext:\n            if c.isupper():\n                upper += 1\n            elif c.islower():\n                lower += 1\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    result = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            result += numerals[i]\n            num -= values[i]\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a*a + b*b == c*c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = 0\n        freq = set()\n        for c in w:\n            if c not in freq:\n                freq.add(c)\n                cnt += 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not s.isalpha():\n        return s\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.upper() if ch.islower() else ch.lower())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for i in range(lower, upper + 1):\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    deviation = sum(abs(x - mean_value) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(partial(str.find, substring), strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [reduce(lambda a, b: a + b, numbers), reduce(lambda a, b: a * b, numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(a[i] != b[i]) for i in range(len(a)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i+1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [note for note in music_string.split(\" \") if note]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int, {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    })\n    num_list = [num_dict[x] for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort()\n    return \" \".join(str(x) for x in num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(partial(str.startswith, prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    return [l[i] for i in accumulate(range(len(l)), lambda i, _: i + 3, initial=0) % 3]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    even_index = accumulate(range(len(l)), lambda a, b: a + 1 if b % 2 == 0 else a)\n    return [l[even_index(i)] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3] + s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen and seen[-num] > 0:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - ord('a') + 21) % 26) + ord('a')))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filterfalse(vowels.__contains__, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i, b in enumerate(brackets):\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return reduce(lambda x, y: x + y, range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i, b in enumerate(brackets):\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i, c in enumerate(s):\n        if c.lower() in vowels or (i == len(s) - 1 and c.lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = (k for k, v in freqs.items() if v >= k)\n    return max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1 / 3) == int(abs(a) ** (1 / 3))\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(map(int, str(n)))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return reduce(lambda acc, e: acc + e if e % 2 == 1 and e % 2 == 0 else acc, lst, 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [''.join(sorted(word)) for word in s.split()]\n    return ' '.join(map(''.join, groupby(words)))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], x[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for c in s:\n        shifted = ord(c) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return sum(1 for sentence in sentences if sentence.startswith(\"I \") and len(sentence) >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n            ch1 = ch1.upper() if ch1.isupper() else ch1.lower()\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(map(int, largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(c.islower() for k in d for c in k) or all(c.isupper() for k in d for c in k)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in count() if i % 2 == 0 and vowels.count(s[i]) > 0)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(\",\") if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2 + 0.5\n    return bin(int(r_avg))\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(d) % 2 != 0 for d in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [reduce(lambda x, y: x * y, nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x + y, nums[:i]) for i in nums]\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * digits_sum(abs(n)) + int(n_str[:2])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    freq = Counter(words)\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for w, f in freq.items():\n            if f == max_freq:\n                result[w] = f\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: c.index(ch) == -1, map(chr, map(ord, s))))\n    return ['yes', 'no'] if s1 == s1[::-1] else ['no', 'yes']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    return reduce(lambda cur_sum, n: min(cur_sum + n, 0), nums, 0)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(int(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if w]\n    return [w for w in words if sum(c in consonants for c in w.lower()) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if (check(s1) or check(s2)) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return reduce(lambda acc, i: acc + i if i % 2 == 0 and lst[i] % 2 != 0 else acc, range(len(lst)), 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [chr(c) for c in txt.lower() if c % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and Counter(lst).most_common(1)[0][1] <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds[0] if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, c in enumerate(s):\n        if c == '[':\n            open_idx.append(i)\n        elif c == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(ceil(n) ** 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    return max(range(1, len(arr)), key=lambda i: arr[i] < arr[i - 1])\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"\\\\s{3,}\", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suffixes or not lst[0] or len(lst[0]) > 3 or not lst[0][0].isalpha() or sum(c.isdigit() for c in lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(compress(words, map(lambda w: is_prime(len(w)), words)))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    num = int(x.split(\"/\")[0]) * int(n.split(\"/\")[0])\n    den = int(x.split(\"/\")[1]) * int(n.split(\"/\")[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda x: reduce(lambda a, b: a * 10 + b, map(int, str(x))))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds[n % 10] == n % 10)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    return sorted(filter(lambda s: len(s) % 2 == 0, lst), key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(int(n * n) for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[:i] + b[i:]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, \n              10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \n                \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i, v in enumerate(values):\n        while num >= v:\n            res.append(numerals[i])\n            num -= v\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_word = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_word = w\n        elif cnt == max_cnt:\n            max_word = max_word if max_word > w else w\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = []\n    for c in s:\n        if not c.isalpha():\n            result.append(c)\n        elif c.isupper():\n            result.append(c.lower())\n        else:\n            result.append(c.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    try:\n        md5_hash = md5()\n        md5_hash.update(txt.encode())\n        hash_bytes = md5_hash.digest()\n        md5_encoded = []\n        for b in hash_bytes:\n            md5_encoded.append(f\"{b:02x}\")\n        return \"\".join(md5_encoded)\n    except:\n        return None\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    return list(filter(lambda n: n % 2 == 0, range(max(2, min(a, b)), min(8, max(a, b)) + 1)))\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda num: abs(num - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split(\" \"):\n        if not group:\n            continue\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(\n        '0' if c == b[i] else '1'\n        for i, c in enumerate(a)\n    )\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note in durations]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num_dict[x] for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort()\n    return \" \".join(str(x) for x in num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int) and not isinstance(v, bool)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num, count in counts.items() if count == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.isalpha():\n            flipped.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            flipped.append(ch)\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[::3])\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 21) % 26 + ord('a')))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [p for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)[0]\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(e) for e in lst1)\n    cnt2 = sum(len(e) for e in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1 / 3) % 1 == 0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return ''.join(str(int(c) + 1) for c in str(n))\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], x[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > 'z'.__hash__():\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    return sorted(set(lst))[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split('.!?')\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == 'I '])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() == ch and ch.lower() or ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.translate(str.maketrans(\"aeiouAEIOU\", \"aeiouAEIOU\"))\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(key.isupper() for key in d.keys()) or all(key.islower() for key in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if not any(num % p == 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(' ')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(digit % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [nums[i] * nums[j] if nums[i] % 2 != 0 else nums[i] + nums[j] for i in range(n) for j in range(i)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * digits_sum(abs(n)) + int(n_str[:2])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if Counter(arr[i:]) == Counter(sorted_arr[:len(arr) - i]) and Counter(arr[:i]) == Counter(sorted_arr[len(arr) - i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = [*num]\n        n = [d for d in n if d.isdigit()]\n        n = [int(d) for d in n]\n        n = [d for d in n if d % 2 == 1]\n        n = len(n)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(n // capacity for n in row) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0 and i % 2 == 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            str(len([c for c in txt if c.isalpha() and ord(c) % 2 == 0]))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return max(lst.count(i) for i in lst) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(0) % 2 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.pop() if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: n ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [*range(1, len(arr))]\n    idx = [i for i in idx if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str) and isinstance(b, str):\n        a1 = float(a.replace(',', '.'))\n        b1 = float(b.replace(',', '.'))\n        if a1 == b1:\n            return None\n        elif a1 > b1:\n            return a1\n        else:\n            return b1\n    elif isinstance(a, float) and isinstance(b, float):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        raise TypeError\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n >= 8 and n % 2 == 0\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", re.sub(r\"\\s\", \"_\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suffixes or not lst[0] or not lst[0][0].isalpha() or len([ch for ch in lst[0] if ch.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(w)])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den % x_den * n_den == x_num * n_num\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * parse_int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n))])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(d % 2 == 0 for d in str(ds))\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w > w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = [*operators]\n    nums = [*operands]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = trunc(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(map(lambda x_y: \"0\" if x_y[0] == x_y[1] else \"1\", zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[::3])\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(map(lambda x: 1, str(i)))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3] + s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(n**2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    x = abs(x)\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr(((ord(c) - 97 + 5) % 26 + 97)))\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr(((ord(c) - 97 + 21) % 26 + 97)))\n    return \"\".join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(i < t for i in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(d <= 0 for d in diff) or all(d >= 0 for d in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [n for n, v in freqs.items() if v >= n]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(x) for x in lst1)\n    cnt2 = sum(len(x) for x in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1 / 3) == round(abs(a) ** (1 / 3))\n",
            "def hex_key(num: str) -> int:\n    return len([c for c in num if c in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(floor(sqrt(length))) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0 and x % 2 == 1, lst))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[1], x[0]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".\")\n    return len([sentence for sentence in sentences if sentence.startswith(\"I \") and len(sentence) >= 2])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(int(c) for c in str(largest))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(\"[, ]\") if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2.0 + 0.5).__int__()\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [i for i in x if all(int(j) % 2 != 0 for j in str(i))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [\n        sum(nums[:i + 1]) if nums[i] % 2 != 0 else reduce(lambda x, y: x * y, nums[:i + 1])\n        for i in range(n)\n    ]\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(map(int, n_str))\n        else:\n            return int(n_str[:2]) * 2 + digits_sum(abs(n))\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:len(arr) - i] and arr[0:i] == sorted_arr[len(arr) - i:len(arr)]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for e in lst1 if e % 2 != 0)\n    even_cnt = sum(1 for e in lst2 if e % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([i for i in num if int(i) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: reduce(lambda a, b: a * 10 + b, [int(i) for i in str(x)], 0), reverse=True)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [word for word in words if len(word) > 0 and len([c for c in word if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if (check(s1) or check(s2)) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0 and x % 2 != 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda x: len(str(x)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(map(lambda x: x.islower() and x.isdigit() and int(x) % 2 == 0, txt)))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for a, b in zip(lst, lst[1:]):\n        if b < a:\n            return False\n    return len(set(lst)) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and length == int(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds[0] * odds[1] if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: ceil(x) ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.rsplit(\" \", 1)[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n    if isinstance(a, int):\n        a = float(a)\n    if isinstance(b, int):\n        b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([word for word in words if is_prime(len(word))])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den % x_den * n_num == x_num * n_den\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda x: digits_sum(x))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds[int(str(n)[0])] == \"1\"])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l = r\n        r = l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [x for x in lst if len(x) % 2 == 0]\n    return sorted(result, key=lambda x: (len(x), x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(filter(lambda x: x >= 0 and x % 2 == 1.0, map(lambda x: x * x, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[:i] + b[i:] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(map(lambda x: x % 2 == 0, str(ds)))\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sorted_list = sorted([a, b, c])\n    return sorted_list[0] ** 2 + sorted_list[1] ** 2 == sorted_list[2] ** 2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = []\n    for c in s:\n        if not c.isalpha():\n            result.append(c)\n        elif c.isupper():\n            result.append(c.lower())\n        else:\n            result.append(c.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [g for g in paren_string.split(\" \") if g]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [sum(numbers), product(numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [note for note in music_string.split(\" \") if note]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return list(filter(lambda num: counts[num] == 1, numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while not isclose(poly(xs, x1), 0):\n        x1 *= 2\n        x2 *= 2\n    while not isclose(x1, x2):\n        mid = (x1 + x2) / 2\n        if isclose(poly(xs, mid), 0):\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [i for i in l if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [v for k, v in l.items() if k % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[k // 2] if k % 2 == 0 else v for k, v in l.items()]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n * n\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return len(list(filter(lambda x: x < t, l))) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(set(s0)) == sorted(set(s1))\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(map(lambda a, b: b - a, l[:-1], l[1:]))\n    return len(list(filter(lambda x: x <= 0, diff))) == len(diff) or len(list(filter(lambda x: x >= 0, diff))) == len(diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], start=1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= 2]\n    return max(good_vals or [-1])\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    return x == n ** (x.bit_length() - 1)\n",
            "def is_cube(a: int) -> bool:\n    return a == int(a ** (1 / 3)) ** 3\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(sum(map(int, str(n))))\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda v, k: k % 2 == 1 and v % 2 == 0, lst))\n",
            "def anti_shuffle(s: str) -> str:\n    words = [''.join(sorted(list(word))) for word in s.split()]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda c: (c[0], c[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(list(set(lst)))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.isupper() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(is_prime, lst))\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or (len(set(k.islower() for k in d)) == len(d) or len(set(k.isupper() for k in d)) == len(d))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if len(list(filter(lambda p: num % p != 0, primes))) == len(primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for c, i in zip(s, range(0, len(s), 2)) if c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",\")\n",
            "def choose_num(x: int, y: int) -> int:\n    return y if y % 2 == 0 else y - 1 if x != y else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return bin(int(r_avg))\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [i for i in x if all(int(d) % 2 != 0 for d in str(i))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x and x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [\n        sum(nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i])\n        for i in nums\n    ]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(map(int, str(n))) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split() if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        n = sum(1 for c in s if c.isdigit() and int(c) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = sorted(arr)\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda v, k: k % 2 == 0 and v % 2 != 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower() and ord(c) % 2 == 0, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return len(lst) <= 1 or all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(min_val if i % 2 == 0 else 1)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(x) for x in str(n) if int(x) % 2 == 1]\n    return odds and reduce(lambda x, y: x * y, odds) or 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: n ** 2, map(math.ceil, lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return bool(txt and len(txt.rsplit(' ', 1)[-1]) == 1 and txt[-1].isalpha())\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx + [-1])\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [n for n in lst if n < 0]\n    pos = [n for n in lst if n > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"  \", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suffixes or not lst[0] or len(lst[0]) > 3 or any(c.isdigit() for c in lst[0]):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if isPrime(len(w))])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda n: digits_sum(n))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r + 1]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [x for x in lst if len(x) % 2 == 0]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len(re.sub('[^A-Z]', '', ext))\n        lower = len(re.sub('[^a-z]', '', ext))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[:i] + b[i:] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda d: int(d) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return txt.__hash__()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    stack<char> stk;\n    vector<string> groups;\n    string current_group = \"\";\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0;\n    for (double x : numbers) {\n        mean += x;\n    }\n    mean /= numbers.size();\n    double deviation = 0;\n    for (double x : numbers) {\n        deviation += abs(x - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    int max_depth = 0;\n    int depth = 0;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            depth += 1;\n            max_depth = max(max_depth, depth);\n        } else if (ch == ')') {\n            depth -= 1;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = 1;\n    for (int n : numbers) {\n        n_product *= n;\n    }\n    return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    vector<int> result;\n    int max_so_far = float(\"-inf\");\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); ++i) {\n        if (isPalindrome(s.substr(i))) {\n            return s + s.substr(0, i).reverse();\n        }\n    }\n    return \"\";\n}\nbool isPalindrome(const string& s) {\n    for (int i = 0, j = s.size() - 1; i < j; ++i, --j) {\n        if (s[i] != s[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return {};\n    }\n    string longest_s = strs[0];\n    for (const string& s : strs) {\n        if (s.size() > longest_s.size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> result;\n    for (int i = 0; i < s.size(); i++) {\n        result.push_back(s.substr(0, i + 1));\n    }\n    return result;\n}\n",
            "string stringSequence(int n) {\n    string result;\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\n",
            "int countDistinctCharacters(const string& s) {\n    unordered_set<char> char_set;\n    for (char c : s) {\n        char_set.insert(c);\n    }\n    return char_set.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<int> notes;\n    for (const string& note : split(music_string, \" \")) {\n        notes.push_back(durations[note]);\n    }\n    return notes;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.size() - substring.size() + 1; ++i) {\n        if (s.substr(i, substring.size()) == substring) {\n            ++times;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    vector<string> num_list(begin(numbers), end(numbers));\n    sort(num_list.begin(), num_list.end(), [&num_dict](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return accumulate(begin(num_list), end(num_list), string(), [](const string& a, const string& b) {\n        return a + \" \" + b;\n    });\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers(numbers);\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::max();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); i++) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> result(numbers.size(), 0.0);\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = (numbers[i] - min_num) / (max_num - min_num);\n        }\n        return result;\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (auto e : values) {\n        if (isinstance(e, int)) {\n            result.push_back(e);\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.size();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> result;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped.push_back(ch);\n        } else if (islower(ch)) {\n            flipped.push_back(toupper(ch));\n        } else if (isupper(ch)) {\n            flipped.push_back(tolower(ch));\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (const string& s : strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (fabs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third(l.size() / 3);\n    copy(l.begin(), l.begin() + l.size() / 3, sorted_third.begin());\n    sort(sorted_third.begin(), sorted_third.end());\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result[i] = sorted_third[i / 3];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    set<int> s(l.begin(), l.end());\n    return vector<int>(s.begin(), s.end());\n}\n",
            "int maxElement(const vector<int>& l) {\n    int result = l[0];\n    for (int e : l) {\n        if (e > result) {\n            result = e;\n        }\n    }\n    return result;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += count(to_string(i).begin(), to_string(i).end(), '7');\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even(l.begin(), l.begin() + l.size() / 2);\n    sort(sorted_even.begin(), sorted_even.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(sorted_even[i / 2] if i % 2 == 0 else l[i]);\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (i + 3 > s.size()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2) + s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    vector<int> f(2);\n    f[0] = 0;\n    f[1] = 1;\n    int cnt = 0;\n    while (cnt < n) {\n        vector<int> tmp(2);\n        tmp[0] = f[1];\n        tmp[1] = f[0] + f[1];\n        f = tmp;\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); ++i) {\n        for (int j = i + 1; j < l.size(); ++j) {\n            for (int k = j + 1; k < l.size(); ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    int result = 0;\n    while (n > 0) {\n        result += n;\n        n--;\n    }\n    return result;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    string result;\n    while (x > 0) {\n        result += to_string(x % bas);\n        x /= bas;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return (double)a * h / 2;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    sort(l.begin(), l.end());\n    return l.size() % 2 == 0 ? (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2 : l[l.size() / 2];\n}\n",
            "bool isPalindrome(const string& txt) {\n    string txt_copy = txt;\n    reverse(txt_copy.begin(), txt_copy.end());\n    return txt_copy == txt;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(((ch - 'a' + 5) % 26) + 'a');\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(((ch - 'a' + 21) % 26) + 'a');\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string result;\n    for (char c : txt) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    for (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    if (s0.size() != s1.size()) {\n        return false;\n    }\n    unordered_map<char, int> char_count;\n    for (char c : s0) {\n        ++char_count[c];\n    }\n    for (char c : s1) {\n        if (char_count.count(c) == 0) {\n            return false;\n        }\n        --char_count[c];\n        if (char_count[c] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1;\n    for (int i = 2; i <= n; ++i) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else if (b == '>') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            return false;\n        }\n    }\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    set<int> s1(l1.begin(), l1.end());\n    set<int> s2(l2.begin(), l2.end());\n    vector<int> result;\n    for (int e : s1) {\n        if (s2.count(e)) {\n            result.push_back(e);\n        }\n    }\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return accumulate(n + 1, 0);\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result(xs.size() - 1);\n    for (int i = 1; i < xs.size(); i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (i == s.size() - 1 && s[i] == 'y')) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.size()) {\n        return x_str;\n    }\n    return x_str.substr(x_str.size() - shift) + x_str.substr(0, x_str.size() - shift);\n}\n",
            "int digitSum(const string& s) {\n    int result = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            result += c - 'A' + 1;\n        }\n    }\n    return result;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    vector<string> words;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            words.push_back(s.substr(0, i));\n            s = s.substr(i + 1);\n            i = -1;\n        }\n    }\n    words.push_back(s);\n    int apples = stoi(words[words.size() - 2]);\n    int oranges = stoi(words[words.size() - 1]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.size() == 0) {\n        return {};\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    return {min_even, distance(arr.begin(), find(arr.begin(), arr.end(), min_even))};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (auto& [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    return good_vals.empty() ? -1 : *max_element(good_vals.begin(), good_vals.end());\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.size() == 0) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int i = 0; i < q.size(); i++) {\n        total += q[i];\n    }\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = accumulate(lst1.begin(), lst1.end(), 0, [](int acc, const string& s) { return acc + s.size(); });\n    int cnt2 = accumulate(lst2.begin(), lst2.end(), 0, [](int acc, const string& s) { return acc + s.size(); });\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    int root = int(round(pow(a, 1.0 / 3.0)));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int result = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            ++result;\n        }\n    }\n    return result;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = \"\";\n    while (dec > 0) {\n        binary = to_string(dec % 2) + binary;\n        dec /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    unordered_set<char> seen;\n    string cur = s;\n    while (cur != \"1\") {\n        int sum = 0;\n        for (char c : cur) {\n            sum += (c - '0') * (c - '0');\n        }\n        if (seen.count(sum)) {\n            return false;\n        }\n        seen.insert(sum);\n        cur = to_string(sum);\n    }\n    return true;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.size();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); ++i) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    return n == 1 ? 1 : 2 * 9 * pow(10, n - 2);\n}\n",
            "string solve(int n) {\n    string result;\n    while (n > 0) {\n        result += to_string(n % 2);\n        n /= 2;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n",
            "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    for (string word : s) {\n        words.push_back(word);\n    }\n    sort(words.begin(), words.end());\n    string result;\n    for (string word : words) {\n        result += word + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]);\n    });\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    if ((arr[0] + arr.back()) % 2 == 0) {\n        return sort(arr.rbegin(), arr.rend());\n    } else {\n        return sort(arr.begin(), arr.end());\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        char shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result.push_back(shifted);\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl(lst.begin(), lst.end());\n    sort(sl.begin(), sl.end());\n    if (sl.size() < 2) {\n        return {};\n    }\n    return sl[1];\n}\n",
            "int isBored(const string& s) {\n    regex sentence_regex(R\"(^I\\s+|^[A-Z][a-z]+\\s+)\");\n    regex boring_regex(R\"(^I\\s+|^[A-Z][a-z]+\\s+|^I\\s+|^[A-Z][a-z]+\\s+)\");\n    int boring_count = 0;\n    string sentence;\n    for (sregex_iterator sentence_iter(s.begin(), s.end(), sentence_regex), sentence_end; sentence_iter != sentence_end; ++sentence_iter) {\n        sentence = *sentence_iter;\n        if (regex_match(sentence, boring_regex)) {\n            ++boring_count;\n        }\n    }\n    return boring_count;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (is_int(x) && is_int(y) && is_int(z)) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = ch1 + 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (isPrime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.size() == 0) {\n        return 0;\n    }\n    string largest = to_string(primes.back());\n    int sum = 0;\n    for (char digit : largest) {\n        sum += digit - '0';\n    }\n    return sum;\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    for (const auto& [k, v] : d) {\n        if (k.size() != v.size()) {\n            return false;\n        }\n        for (int i = 0; i < k.size(); i++) {\n            if (k[i] != v[i] && (k[i] != tolower(v[i]) && k[i] != toupper(v[i]))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return abs(a) % 10 * abs(b) % 10;\n}\n",
            "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int result = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    return num >= 0 ? int(num + 0.5) : int(num - 0.5);\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = n + 2 * i;\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    regex re(\"[, ]\");\n    for (sregex_token_iterator it(s.begin(), s.end(), re, -1), end; it != end; ++it) {\n        result.push_back(*it);\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if (x != y) else -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = (m + n) / 2 + 0.5;\n    return to_string(r_avg);\n}\n",
            "bool allDigitsOdd(const string& s) {\n    for (char digit : s) {\n        if (digit % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        string s = to_string(num);\n        if (allDigitsOdd(s)) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    for (int i = 0; i < sorted_arr.size(); i++) {\n        result.push_back(digit_names[sorted_arr[i] - 1]);\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n + 1);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 != 0) {\n            result.push_back(accumulate(nums.begin(), nums.begin() + i, 0));\n        } else {\n            result.push_back(accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>()));\n        }\n    }\n    return result;\n}\n",
            "vector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2);\n    for (int i = 1; i <= n; ++i) {\n        string s = to_string(i);\n        if (s == string(s.rbegin(), s.rend())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    int result = 0;\n    for (int n : arr) {\n        if (digitsSum(n) > 0) {\n            ++result;\n        }\n    }\n    return result;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return true;\n    }\n    vector<int> sorted_arr(arr);\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr.substr(0, i) == sorted_arr.substr(arr.size() - i, i) && arr.substr(i) == sorted_arr.substr(0, arr.size() - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0, even_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            ++odd_cnt;\n        }\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            ++even_cnt;\n        }\n    }\n    return odd_cnt >= even_cnt ? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words = split(test, \" \");\n    for (const string& w : words) {\n        freq[w] += freq.count(w) ? freq[w] : 0;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = 0;\n        for (const auto& kv : freq) {\n            max_freq = max(max_freq, kv.second);\n        }\n        for (const auto& kv : freq) {\n            if (kv.second == max_freq) {\n                result[kv.first] = max_freq;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1.push_back(ch);\n        }\n    }\n    return {s1, is_palindrome(s1) ? \"yes\" : \"no\"};\n}\nbool is_palindrome(const string& s) {\n    int left = 0, right = s.size() - 1;\n    while (left < right) {\n        if (s[left++] != s[right--]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            n += d % 2 == 1;\n        }\n        result.push_back(string(\"the number of odd elements in the string i of the input.\").replace(1, 1, to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int result = 0;\n    for (const vector<int>& arr : grid) {\n        int sum = 0;\n        for (int e : arr) {\n            sum += e;\n        }\n        result += ceil(sum / capacity);\n    }\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        return (__builtin_popcount(a) < __builtin_popcount(b));\n    });\n    return arr;\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words;\n    for (string w : s) {\n        if (w.size() > 0) {\n            words.push_back(w);\n        }\n    }\n    vector<string> result;\n    for (string w : words) {\n        if (count_if(w.begin(), w.end(), [&](char c) { return c.tolower() == consonants; }) == n) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\nbool check(string s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> result;\n    for (int e : arr) {\n        result.push_back(e);\n        if (result.size() > k) {\n            result.erase(result.begin());\n        }\n    }\n    return result;\n}\n",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n        if (to_string(arr[i]).size() <= 2) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.size() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 5));\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day >= 1 && day <= 31) {\n            return true;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day >= 1 && day <= 30) {\n            return true;\n        }\n    } else if (month == 2) {\n        if (day >= 1 && day <= 29) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    vector<string> result;\n    if (txt.find(\" \") != string::npos) {\n        result = vector<string>(txt.begin(), txt.end());\n    } else if (txt.find(\",\") != string::npos) {\n        result = vector<string>(txt.begin(), txt.end());\n    } else {\n        result.push_back(to_string(txt.length()));\n    }\n    return result;\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    return max(freq.values(), default=0) <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if (count(arr.begin(), arr.end(), 0) > 0) {\n        return 0;\n    }\n    int sign = -1;\n    for (int n : arr) {\n        if (n < 0) {\n            sign *= -1;\n        }\n    }\n    return sign * accumulate(arr.begin(), arr.end(), 1, multiplies<int>());\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(min_val, *min_element(temp.begin(), temp.end()));\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; ++i) {\n        result.push_back(1 if i % 2 == 0 else min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    vector<int> seq(n + 1);\n    seq[0] = 1;\n    seq[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq[i] = i / 2 + 1;\n        } else {\n            seq[i] = seq[i - 1] + seq[i - 2] + (i + 3) / 2;\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    vector<int> odds;\n    while (n > 0) {\n        odds.push_back(n % 10);\n        n /= 10;\n    }\n    return reduce(multiplies<int>(), odds.begin(), odds.end(), 1);\n}\n",
            "bool isNested(const string& s) {\n    stack<int> open_idx;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == '[') {\n            open_idx.push(i);\n        } else if (s[i] == ']') {\n            if (open_idx.empty()) {\n                return false;\n            }\n            open_idx.pop();\n        }\n    }\n    return open_idx.empty();\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        result += ceil(n) * ceil(n);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    return txt.substr(txt.rfind(' ') + 1, 1).size() == 1 && txt.substr(txt.rfind(' ') + 1, 1)[0].isalpha();\n}\n",
            "int canArrange(const vector<int>& arr) {\n    int n = arr.size();\n    if (n <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return max(idx, default=-1);\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<optional<int>> result;\n    int max_neg = -1, min_pos = 1000000000;\n    for (int i : lst) {\n        if (i < 0) {\n            max_neg = max(max_neg, i);\n        } else {\n            min_pos = min(min_pos, i);\n        }\n    }\n    result.push_back(max_neg);\n    result.push_back(min_pos);\n    return result;\n}\n",
            "optional<double> compareOne(any a, any b) {\n    if (is_string_view(a) && is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(a, b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), string_view(b));\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(string_view(a), b);\n    }\n    else if (is_string_view(a) || is_string_view(b)) {\n        return compareOne(",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    regex re(\"\\\\s{3,}\");\n    return regex_replace(txt, re, \"-\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    string suf[] = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst = file_name.split(\".\");\n    if (lst.size() != 2 || lst[1] == \"\" || lst[0].size() == 0 || lst[0][0] < 'A' || lst[0][0] > 'z' || lst[0].size() > 4 || lst[0].size() == 4 && lst[0].find_first_not_of('0', 1) != string::npos) {\n        return \"No\";\n    }\n    for (string s : suf) {\n        if (lst[1] == s) {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    vector<string> words = split(sentence, \" \");\n    string result;\n    for (const string& w : words) {\n        if (isPrime(w.size())) {\n            result += w + \" \";\n        }\n    }\n    return result.substr(0, result.size() - 1);\n}\n",
            "bool simplify(const string& x, const string& n) {\n    int x0 = stoi(x.substr(0, x.find('/')));\n    int x1 = stoi(x.substr(x.find('/') + 1));\n    int n0 = stoi(n.substr(0, n.find('/')));\n    int n1 = stoi(n.substr(n.find('/') + 1));\n    return (x0 * n0) % (x1 * n1) == 0;\n}\n",
            "vector<int> orderByPoints(const vector<int>& nums) {\n    vector<int> result;\n    for (int n : nums) {\n        result.push_back(digitsSum(n));\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\nint digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0);\n    } else {\n        return n_str[0] * 2 + digitsSum(abs(n));\n    }\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int result = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = find(names.begin(), names.end(), planet1) - names.begin();\n    int r = find(names.begin(), names.end(), planet2) - names.begin();\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (string s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        return a.size() == b.size() ? a < b : a.size() < b.size();\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext;\n    for (const string& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.size() < b.size()) {\n        return false;\n    }\n    for (int i = 0; i < b.size(); i++) {\n        if (b.substr(i) + b.substr(0, i) == a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if (d % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res;\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    vector<int> s = {a, b, c};\n    sort(s.begin(), s.end());\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w;\n    for (const string& w : words) {\n        int cnt = 0;\n        for (char c : w) {\n            if (w.find(c) == w.rfind(c)) {\n                cnt++;\n            }\n        }\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    vector<int> result;\n    result.push_back(num + need);\n    result.push_back(remaining - need);\n    return result;\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<int> nums(operands.size());\n    vector<string> ops(operators.size());\n    for (int i = 0; i < operators.size(); i++) {\n        ops[i] = operators[i];\n    }\n    for (int i = 0; i < operands.size(); i++) {\n        nums[i] = operands[i];\n    }\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.pop_back();\n            ops.pop_back();\n        }\n    }\n    for (int i = 0; i < ops.size(); i++) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        }\n    }\n    for (int i = 0; i < ops.size(); i++) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        }\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (isupper(ch)) {\n            result.push_back(tolower(ch));\n        } else {\n            result.push_back(toupper(ch));\n        }\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return {};\n    }\n    string md5_encoded;\n    unsigned int md5_hash[4];\n    char txt_bytes[txt.size() + 1];\n    strcpy(txt_bytes, txt.c_str());\n    unsigned int md5_hash_size = 16;\n    md5_hash_size *= sizeof(unsigned int);\n    unsigned int* md5_hash_ptr = md5_hash;\n    unsigned int* md5_hash_end = md5_hash_ptr + md5_hash_size / sizeof(unsigned int);\n    while (md5_hash_ptr != md5_hash_end) {\n        *md5_hash_ptr++ = 0;\n    }\n    unsigned int txt_bytes_size = sizeof(txt_bytes);\n    unsigned int* txt_bytes_ptr = txt_bytes;\n    unsigned int* txt_bytes_end = txt_bytes_ptr + txt_bytes_size / sizeof(unsigned int);\n    while (txt_bytes_ptr != txt_bytes_end) {\n        *txt_bytes_ptr++ = 0;\n    }\n    unsigned int txt_bytes_size_2 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_2 = txt_bytes;\n    unsigned int* txt_bytes_end_2 = txt_bytes_ptr_2 + txt_bytes_size_2 / sizeof(unsigned int);\n    while (txt_bytes_ptr_2 != txt_bytes_end_2) {\n        *txt_bytes_ptr_2++ = 0;\n    }\n    unsigned int txt_bytes_size_3 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_3 = txt_bytes;\n    unsigned int* txt_bytes_end_3 = txt_bytes_ptr_3 + txt_bytes_size_3 / sizeof(unsigned int);\n    while (txt_bytes_ptr_3 != txt_bytes_end_3) {\n        *txt_bytes_ptr_3++ = 0;\n    }\n    unsigned int txt_bytes_size_4 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_4 = txt_bytes;\n    unsigned int* txt_bytes_end_4 = txt_bytes_ptr_4 + txt_bytes_size_4 / sizeof(unsigned int);\n    while (txt_bytes_ptr_4 != txt_bytes_end_4) {\n        *txt_bytes_ptr_4++ = 0;\n    }\n    unsigned int txt_bytes_size_5 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_5 = txt_bytes;\n    unsigned int* txt_bytes_end_5 = txt_bytes_ptr_5 + txt_bytes_size_5 / sizeof(unsigned int);\n    while (txt_bytes_ptr_5 != txt_bytes_end_5) {\n        *txt_bytes_ptr_5++ = 0;\n    }\n    unsigned int txt_bytes_size_6 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_6 = txt_bytes;\n    unsigned int* txt_bytes_end_6 = txt_bytes_ptr_6 + txt_bytes_size_6 / sizeof(unsigned int);\n    while (txt_bytes_ptr_6 != txt_bytes_end_6) {\n        *txt_bytes_ptr_6++ = 0;\n    }\n    unsigned int txt_bytes_size_7 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_7 = txt_bytes;\n    unsigned int* txt_bytes_end_7 = txt_bytes_ptr_7 + txt_bytes_size_7 / sizeof(unsigned int);\n    while (txt_bytes_ptr_7 != txt_bytes_end_7) {\n        *txt_bytes_ptr_7++ = 0;\n    }\n    unsigned int txt_bytes_size_8 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_8 = txt_bytes;\n    unsigned int* txt_bytes_end_8 = txt_bytes_ptr_8 + txt_bytes_size_8 / sizeof(unsigned int);\n    while (txt_bytes_ptr_8 != txt_bytes_end_8) {\n        *txt_bytes_ptr_8++ = 0;\n    }\n    unsigned int txt_bytes_size_9 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_9 = txt_bytes;\n    unsigned int* txt_bytes_end_9 = txt_bytes_ptr_9 + txt_bytes_size_9 / sizeof(unsigned int);\n    while (txt_bytes_ptr_9 != txt_bytes_end_9) {\n        *txt_bytes_ptr_9++ = 0;\n    }\n    unsigned int txt_bytes_size_10 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_10 = txt_bytes;\n    unsigned int* txt_bytes_end_10 = txt_bytes_ptr_10 + txt_bytes_size_10 / sizeof(unsigned int);\n    while (txt_bytes_ptr_10 != txt_bytes_end_10) {\n        *txt_bytes_ptr_10++ = 0;\n    }\n    unsigned int txt_bytes_size_11 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_11 = txt_bytes;\n    unsigned int* txt_bytes_end_11 = txt_bytes_ptr_11 + txt_bytes_size_11 / sizeof(unsigned int);\n    while (txt_bytes_ptr_11 != txt_bytes_end_11) {\n        *txt_bytes_ptr_11++ = 0;\n    }\n    unsigned int txt_bytes_size_12 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_12 = txt_bytes;\n    unsigned int* txt_bytes_end_12 = txt_bytes_ptr_12 + txt_bytes_size_12 / sizeof(unsigned int);\n    while (txt_bytes_ptr_12 != txt_bytes_end_12) {\n        *txt_bytes_ptr_12++ = 0;\n    }\n    unsigned int txt_bytes_size_13 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_13 = txt_bytes;\n    unsigned int* txt_bytes_end_13 = txt_bytes_ptr_13 + txt_bytes_size_13 / sizeof(unsigned int);\n    while (txt_bytes_ptr_13 != txt_bytes_end_13) {\n        *txt_bytes_ptr_13++ = 0;\n    }\n    unsigned int txt_bytes_size_14 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_14 = txt_bytes;\n    unsigned int* txt_bytes_end_14 = txt_bytes_ptr_14 + txt_bytes_size_14 / sizeof(unsigned int);\n    while (txt_bytes_ptr_14 != txt_bytes_end_14) {\n        *txt_bytes_ptr_14++ = 0;\n    }\n    unsigned int txt_bytes_size_15 = txt_bytes_size;\n    unsigned int* txt_bytes_ptr_15 = txt_bytes;\n    unsigned int* txt_bytes_end_15 = txt",
            "vector<int> generateIntegers(int a, int b) {\n    vector<int> result;\n    for (int i = max(2, min(a, b)); i <= min(8, max(a, b)); i += 2) {\n        result.push_back(i);\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        foreach (var ch in parenString) {\n            if (ch == '(') {\n                stk.Push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.Pop();\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        var balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = 0;\n        foreach (var n in numbers) {\n            mean += n;\n        }\n        mean /= numbers.Count;\n        double deviation = 0;\n        foreach (var n in numbers) {\n            deviation += Math.Abs(n - mean);\n        }\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split(' ');\n        foreach (var group in parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            foreach (var ch in group) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.Contains(substring)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        var nSum = 0;\n        var nProduct = 1;\n        foreach (var n in numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var maxSoFar = int.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s.Substring(i))) {\n                return s + s.Substring(0, i).Reverse();\n            }\n        }\n        return \"\";\n    }\n    public static bool IsPalindrome(string s) {\n        return s == new string(s.Reverse().ToArray());\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        var result = new List<char>();\n        for (int i = 0; i < a.Length; i++) {\n            result.Add((char)(a[i] ^ b[i]));\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        string? longest = strs[0];\n        foreach (var s in strs) {\n            if (s.Length > longest.Length) {\n                longest = s;\n            }\n        }\n        return longest;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return GreatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        var result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result.Trim();\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        var set = new HashSet<char>();\n        foreach (var c in s.ToLower()) {\n            set.Add(c);\n        }\n        return set.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int> {\n            {\".|\", 1},\n            {\"o\", 4},\n            {\"o|\", 2}\n        };\n        var notes = musicString.Split(' ');\n        var result = new List<int>();\n        foreach (var note in notes) {\n            result.Add(durations[note]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        var times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var num_dict = new Dictionary<string, int> {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 },\n        };\n        var num_list = new List<string>();\n        foreach (var n in numbers.Split(\" \")) {\n            if (num_dict.ContainsKey(n)) {\n                num_list.Add(n);\n            }\n        }\n        num_list.Sort((x, y) => num_dict[y].CompareTo(num_dict[x]));\n        return string.Join(\" \", num_list);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        double minDiff = double.MaxValue;\n        IList<double> closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        double minNum = double.MaxValue;\n        double maxNum = double.MinValue;\n        foreach (var num in numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new List<double>(numbers.Count) { 0.0 };\n        }\n        else {\n            var result = new List<double>(numbers.Count);\n            foreach (var num in numbers) {\n                result.Add((num - minNum) / (maxNum - minNum));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        var result = new List<int>();\n        foreach (var v in values) {\n            if (v is int) {\n                result.Add((int)v);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        var divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.ContainsKey(num) ? counts[num] + 1 : 1;\n        }\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                flipped.Add(ch);\n            } else if (char.IsLower(ch)) {\n                flipped.Add((char)(ch - 'a' + 'A'));\n            } else {\n                flipped.Add((char)(ch - 'A' + 'a'));\n            }\n        }\n        return new string(flipped.ToArray());\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        var result = new StringBuilder();\n        foreach (var s in strs) {\n            result.Append(s);\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.StartsWith(prefixStr)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        var result = new List<int>();\n        foreach (var num in l) {\n            if (num > 0) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = l.OrderBy(x => x).Skip(1).Take(l.Count / 3).ToList();\n        return Enumerable.Range(0, l.Count)\n            .Select(x => x % 3 == 0 ? sortedThird[x / 3] : l[x]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        var result = new List<int>();\n        var seen = new HashSet<int>();\n        foreach (var e in l) {\n            if (!seen.Contains(e)) {\n                result.Add(e);\n                seen.Add(e);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        return l.Max();\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.Join(\"\", i.ToString().Where(c => c == '7')).Length;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = l.Where(x => x % 2 == 0).OrderBy(x => x).ToList();\n        return Enumerable.Range(0, l.Count)\n            .Select(x => x % 2 == 0 ? sortedEven[x / 2] : l[x]).ToList();\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<string>();\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Add(s.Substring(i));\n            } else {\n                result.Add(s.Substring(i + 1, 2));\n                result.Add(s[i]);\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        var f = new int[] { 0, 1 };\n        var cnt = 0;\n        while (cnt < n) {\n            var tmp = f[0] + f[1];\n            f[0] = f[1];\n            f[1] = tmp;\n            if (IsPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (var i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        var result = new List<int>();\n        foreach (var i in l) {\n            result.Add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (seen.Contains(-num)) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas.ToString());\n            x /= bas;\n        }\n        return string.Join(\"\", digits.Reverse());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new int[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>(l);\n        sl.Sort();\n        if (sl.Count % 2 != 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        var sb = new StringBuilder(txt);\n        sb.Replace(\" \", \"\").ToLower();\n        return sb.ToString() == new string(sb.ToString().Reverse().ToArray());\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        var ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            result.Add((char)(((ch - 'a' + 5) % 26) + 'a'));\n        }\n        return new string(result.ToArray());\n    }\n    public static string DecodeShift(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            result.Add((char)(((ch - 'a' + 21) % 26) + 'a'));\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = new HashSet<char>(\"aeiouAEIOU\");\n        return txt.Where(c => !vowels.Contains(c)).ToArray().ToString();\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        foreach (var x in l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        var s0Set = new HashSet<char>(s0);\n        var s1Set = new HashSet<char>(s1);\n        return s0Set.SetEquals(s1Set);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '<') {\n                depth++;\n            } else if (b == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 1; i < l.Count; i++) {\n            diff.Add(l[i] - l[i - 1]);\n        }\n        return diff.All(x => x <= 0) || diff.All(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        var result = new List<int>();\n        var set1 = new HashSet<int>(l1);\n        foreach (var e in l2) {\n            if (set1.Contains(e)) {\n                result.Add(e);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i++;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return Enumerable.Range(0, n + 1).Sum();\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n--;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (vowels.Contains(s[i].ToLower()) || (i == s.Length - 1 && s[i].ToLower() == \"y\")) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return xStr.Reverse().ToString();\n        } else {\n            return xStr.Substring(xStr.Length - shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        var result = 0;\n        foreach (var c in s) {\n            if (char.IsUpper(c)) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[words.IndexOf(\"apples\") - 1]);\n        var oranges = int.Parse(words[words.IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        foreach (var n in arr) {\n            if (n % 2 == 0) {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens[0];\n        for (int i = 1; i < evens.Count; i++) {\n            if (evens[i] < minEven) {\n                minEven = evens[i];\n            }\n        }\n        return new List<int> { minEven, arr.IndexOf(minEven) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            freqs[n] = freqs.ContainsKey(n) ? freqs[n] + 1 : 1;\n        }\n        var goodVals = new List<int>();\n        foreach (var kvp in freqs) {\n            if (kvp.Value >= k) {\n                goodVals.Add(kvp.Key);\n            }\n        }\n        return goodVals.Count > 0 ? goodVals.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new List<int>(lst);\n        sl.Sort();\n        var result = new List<int>();\n        int left = 0, right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left++;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalin = true;\n        foreach (var i in Enumerable.Range(0, q.Count)) {\n            isPalin = isPalin && q[i] == q[q.Count - i - 1];\n        }\n        int total = 0;\n        foreach (var e in q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        var ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        var cnt1 = 0;\n        foreach (var s in lst1) {\n            cnt1 += s.Length;\n        }\n        var cnt2 = 0;\n        foreach (var s in lst2) {\n            cnt2 += s.Length;\n        }\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        var root = (int)Math.Round(Math.Pow(Math.Abs(a), 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        var result = 0;\n        foreach (var c in num) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        var binary = Convert.ToString(dec, 2);\n        return $\"db{binary}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        var visited = new HashSet<string>();\n        var queue = new Queue<string>();\n        queue.Enqueue(s);\n        while (queue.Count > 0) {\n            var cur = queue.Dequeue();\n            if (visited.Contains(cur)) {\n                return false;\n            }\n            visited.Add(cur);\n            if (cur.Length < 3) {\n                return false;\n            }\n            for (int i = 0; i < cur.Length - 2; i++) {\n                if (cur[i] == cur[i + 1] || cur[i] == cur[i + 2] || cur[i + 1] == cur[i + 2]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            switch (g) {\n                case double x when x == 4.0:\n                    result.Add(\"A+\");\n                    break;\n                case double x when x > 3.7:\n                    result.Add(\"A\");\n                    break;\n                case double x when x > 3.3:\n                    result.Add(\"A-\");\n                    break;\n                case double x when x > 3.0:\n                    result.Add(\"B+\");\n                    break;\n                case double x when x > 2.7:\n                    result.Add(\"B\");\n                    break;\n                case double x when x > 2.3:\n                    result.Add(\"B-\");\n                    break;\n                case double x when x > 2.0:\n                    result.Add(\"C+\");\n                    break;\n                case double x when x > 1.7:\n                    result.Add(\"C\");\n                    break;\n                case double x when x > 1.3:\n                    result.Add(\"C-\");\n                    break;\n                case double x when x > 1.0:\n                    result.Add(\"D+\");\n                    break;\n                case double x when x > 0.7:\n                    result.Add(\"D\");\n                    break;\n                case double x when x > 0.0:\n                    result.Add(\"D-\");\n                    break;\n                default:\n                    result.Add(\"E\");\n                    break;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        var digitsSum = 0;\n        foreach (var d in Convert.ToString(n)) {\n            digitsSum += int.Parse(d);\n        }\n        return Convert.ToString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        var result = 0;\n        for (var i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = new List<string>();\n        foreach (var word in s.Split(\" \")) {\n            words.Add(new string(word.OrderBy(c => c).ToArray()));\n        }\n        return string.Join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var result = new List<IList<int>>();\n        var coords = new List<Tuple<int, int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new Tuple<int, int>(i, j));\n                }\n            }\n        }\n        coords.Sort((a, b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1 - b.Item1;\n            } else {\n                return b.Item2 - a.Item2;\n            }\n        });\n        for (int i = 0; i < coords.Count; i++) {\n            result.Add(new List<int>());\n            for (int j = 0; j < coords[i].Item1; j++) {\n                result[i].Add(0);\n            }\n            result[i].Add(x);\n            for (int j = coords[i].Item1 + 1; j < lst.Count; j++) {\n                result[i].Add(0);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        } else {\n            return arr.OrderBy(x => x).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = (char)(ch + 4);\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.Add(shifted);\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new List<int>(lst);\n        sl.Sort();\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        return sentences.Count(sentence => sentence.Length >= 2 && sentence.StartsWith(\"I \"))\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int && y is int && z is int) {\n            if ((x + y == z) || (x + z == y) || (y + z == x)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new List<char>();\n        foreach (var ch in message) {\n            if (char.IsLetter(ch)) {\n                var ch1 = char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)((int)ch1 + 2);\n                }\n                result.Add(ch1);\n            } else {\n                result.Add(ch);\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = new List<int>();\n        foreach (var n in lst) {\n            if (isPrime(n)) {\n                primes.Add(n);\n            }\n        }\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = new StringBuilder();\n        foreach (var digit in primes[primes.Count - 1].ToString()) {\n            largest.Append(digit);\n        }\n        return primes.Sum(n => int.Parse(new StringBuilder(n.ToString())));\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d == null || d.Count == 0) {\n            return false;\n        }\n        return d.Keys.All(c => char.IsLower(c)) || d.Keys.All(c => char.IsUpper(c));\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            if (All(num, primes)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n    public static bool All(int num, IList<int> primes) {\n        foreach (var p in primes) {\n            if (num % p == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return (Math.Abs(a) % 10) * (Math.Abs(b) % 10);\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        var result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        double num = double.Parse(value);\n        return num >= 0 ? (int)Math.Round(num + 0.5) : (int)Math.Round(num - 0.5);\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        var result = new List<string>();\n        foreach (var w in s.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if (w.Length > 0) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if (x != y) else -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        var rAvg = (m + n) / 2.0 + 0.5;\n        return Convert.ToString(rAvg, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> UniqueDigits(IList<int> x) {\n        var result = new List<int>();\n        foreach (var num in x) {\n            var s = num.ToString();\n            if (all_digits_odd(s)) {\n                result.Add(num);\n            }\n        }\n        return result.OrderBy(n => n).ToList();\n    }\n    public static bool all_digits_odd(string s) {\n        foreach (var digit in s) {\n            if (digit % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort(reverse: true);\n        var result = new List<string>();\n        for (int i = 0; i < sortedArr.Count; i++) {\n            result.Add(digitNames[sortedArr[i] - 1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>();\n        for (int i = 1; i <= n; i++) {\n            nums.Add(i);\n        }\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 != 0) {\n                result.Add(nums.Sum());\n            } else {\n                var product = 1;\n                for (int j = 0; j < i; j++) {\n                    product *= nums[j];\n                }\n                result.Add(product);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                cnt[i % 2]++;\n            }\n        }\n        return cnt;\n    }\n    public static bool IsPalindrome(int n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length / 2; i++) {\n            if (s[i] != s[s.Length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int CountNums(IList<int> arr) {\n        int result = 0;\n        foreach (var n in arr) {\n            if (DigitsSum(n) > 0) {\n                result++;\n            }\n        }\n        return result;\n    }\n    public static int DigitsSum(int n) {\n        var nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(d => int.Parse(d.ToString()));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.Skip(i).ToList() == sortedArr.Skip(arr.Count - i).Take(arr.Count - i).ToList() && arr.Take(i).ToList() == sortedArr.Skip(0).Take(i).ToList()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        var oddCnt = 0;\n        var evenCnt = 0;\n        foreach (var num in lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        foreach (var num in lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return oddCnt >= evenCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = new List<string>();\n        foreach (var w in test.Split(\" \", StringSplitOptions.RemoveEmptyEntries)) {\n            words.Add(w);\n        }\n        foreach (var w in words) {\n            if (!freq.ContainsKey(w)) {\n                freq[w] = 0;\n            }\n            freq[w] += 1;\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = 0;\n            foreach (var kvp in freq) {\n                if (kvp.Value > maxFreq) {\n                    maxFreq = kvp.Value;\n                }\n            }\n            foreach (var kvp in freq) {\n                if (kvp.Value == maxFreq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = \"\";\n        foreach (var ch in s) {\n            if (!c.Contains(ch)) {\n                s1 += ch;\n            }\n        }\n        var result = new List<string>();\n        result.Add(s1);\n        result.Add(is_palindrome(s1) ? \"yes\" : \"no\");\n        return result;\n    }\n    public static bool is_palindrome(string s) {\n        return s == new string(s.Reverse().ToArray());\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = 0;\n            foreach (var d in num) {\n                n += d % 2 == 1 ? 1 : 0;\n            }\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = nums.Min();\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        var result = 0;\n        foreach (var arr in grid) {\n            var sum = 0;\n            foreach (var e in arr) {\n                sum += e;\n            }\n            result += (int)Math.Ceiling(sum / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        var result = new List<int>();\n        var countOnes = new Dictionary<int, int>();\n        foreach (var e in arr) {\n            if (countOnes.ContainsKey(e)) {\n                countOnes[e]++;\n            } else {\n                countOnes.Add(e, 1);\n            }\n        }\n        foreach (var e in arr) {\n            result.Add(e);\n        }\n        result.Sort((x, y) => {\n            if (countOnes[x] == countOnes[y]) {\n                return x - y;\n            }\n            return countOnes[x] - countOnes[y];\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = new List<string>();\n        foreach (var w in s.Split(\" \")) {\n            if (w.Length > 0) {\n                words.Add(w);\n            }\n        }\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (w.Length == n) {\n                var consonantsCount = 0;\n                foreach (var c in w) {\n                    if (consonants.Contains(c.ToString().ToLower())) {\n                        consonantsCount++;\n                    }\n                }\n                if (consonantsCount == n) {\n                    result.Add(w);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i > 0; i--) {\n            if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n                return word[i];\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        var s1 = lst[0] + lst[1];\n        var s2 = lst[1] + lst[0];\n        return \"Yes\" if Check(s1) || Check(s2) else \"No\";\n    }\n    public static bool Check(string s) {\n        var depth = 0;\n        foreach (var ch in s) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return true if depth == 0 else false;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        var result = new List<int>();\n        if (k == 0) {\n            return result;\n        }\n        var sorted = new List<int>(arr);\n        sorted.Sort();\n        for (int i = sorted.Count - 1; i >= sorted.Count - k; i--) {\n            result.Add(sorted[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        var result = 0;\n        for (var i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        var result = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n                result += arr[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != '-' || date[5] != '-') {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11 && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        var result = new List<string>();\n        if (txt.Contains(\" \")) {\n            result.AddRange(txt.Split(\" \"));\n        } else if (txt.Contains(\",\")) {\n            result.AddRange(txt.Split(\",\"));\n        } else {\n            result.Add(txt.Length.ToString());\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq[i] = freq.TryGetValue(i, out var count) ? count + 1 : 1;\n        }\n        var maxCount = freq.Values.Max();\n        return maxCount <= 2;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        return length > 0 && IsPrime(length) ? \"YES\" : \"NO\";\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Contains(0)) {\n            return 0;\n        }\n        var sign = -1;\n        if (arr.Count % 2 == 1) {\n            sign = -1;\n        }\n        return sign * arr.Sum(n => Math.Abs(n));\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        var n = grid.Count;\n        var minVal = n * n + 1;\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(temp);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (var i = 0; i < k; i++) {\n            result.Add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        var seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = new List<int>();\n        foreach (var d in n.ToString()) {\n            if (int.Parse(d) % 2 == 1) {\n                odds.Add(int.Parse(d));\n            }\n        }\n        return odds.Count > 0 ? reduce(odds, (x, y) => x * y, 1) : 0;\n    }\n    public static int reduce(IList<int> odds, Func<int, int, int> op, int init) {\n        var result = init;\n        foreach (var o in odds) {\n            result = op(result, o);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Add(i);\n            } else if (s[i] == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.Count;\n        for (int idx in openIdx) {\n            if (i < l && idx < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        var result = 0;\n        foreach (var n in lst) {\n            result += Math.Pow(Math.Ceiling(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        return Regex.IsMatch(txt, @\"\\s.*[a-zA-Z]$\");\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Count > 0 ? idx.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = new List<int>();\n        var pos = new List<int>();\n        foreach (var i in lst) {\n            if (i < 0) {\n                neg.Add(i);\n            } else {\n                pos.Add(i);\n            }\n        }\n        var maxNeg = neg.Count > 0 ? neg.Max() : (int?)null;\n        var minPos = pos.Count > 0 ? pos.Min() : (int?)null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        if (a is string) {\n            var a1 = double.Parse((string)a.ToString().Replace(\",\", \".\"));\n        } else if (a is int) {\n            var a1 = (int)a;\n        } else if (a is float) {\n            var a1 = (float)a;\n        } else {\n            throw new RuntimeError(\"Type Error\");\n        }\n        if (b is string) {\n            var b1 = double.Parse((string)b.ToString().Replace(\",\", \".\"));\n        } else if (b is int) {\n            var b1 = (int)b;\n        } else if (b is float) {\n            var b1 = (float)b;\n        } else {\n            throw new RuntimeError(\"Type Error\");\n        }\n        if (a1 == b1) {\n            return null;\n        } else if (a1 > b1) {\n            return a1;\n        } else {\n            return b1;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new HashSet<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length != 2 || !suf.Contains(lst[1]) || lst[0].Length == 0 || !lst[0][0].IsLetter() || lst[0].Length - lst[0].Replace(new string(new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }), \"\").Length > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += lst[i] * lst[i];\n            } else if (i % 4 == 0) {\n                result += lst[i] * lst[i] * lst[i];\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (IsPrime(w.Length)) {\n                result.Add(w);\n            }\n        }\n        return string.Join(\" \", result);\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split(\"/\");\n        var ns = n.Split(\"/\");\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        var result = new List<int>();\n        var dic = new Dictionary<int, int>();\n        foreach (var n in nums) {\n            var n_str = n.ToString();\n            var sum = 0;\n            foreach (var d in n_str) {\n                sum += int.Parse(d.ToString());\n            }\n            if (dic.ContainsKey(sum)) {\n                dic[sum] += 1;\n            } else {\n                dic.Add(sum, 1);\n            }\n        }\n        foreach (var kvp in dic) {\n            for (int i = 0; i < kvp.Value; i++) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        return nums.Count(n => n > 10 && n % 2 == 1 && odds.Contains(n.ToString()[0]));\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        int l = names.IndexOf(planet1);\n        int r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.Skip(l + 1).Take(r - l).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        result.Sort((x, y) => {\n            if (x.Length != y.Length) {\n                return x.Length - y.Length;\n            } else {\n                return x.CompareTo(y);\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        var result = 0.0;\n        foreach (var n in lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += n * n;\n            }\n        }\n        return (int)result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        var result = new List<int>();\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        int maxS = int.MinValue;\n        string maxExt = \"\";\n        foreach (var ext in extensions) {\n            int upper = 0;\n            int lower = 0;\n            foreach (var c in ext) {\n                if (c.IsUpper()) {\n                    upper++;\n                } else {\n                    lower++;\n                }\n            }\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (b.Substring(i) + b.Substring(0, i) in a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = abs(num).ToString();\n        var even = ds.Count(d => (d - '0') % 2 == 0);\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new List<string>();\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int> { a, b, c };\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        int maxCnt = 0;\n        string maxW = \"\";\n        foreach (var w in words) {\n            int cnt = w.Distinct().Count();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = maxW.CompareTo(w) < 0 ? maxW : w;\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        var result = new List<int>();\n        if (need <= remaining) {\n            result.Add(num + need);\n            result.Add(remaining - need);\n        } else {\n            result.Add(num + remaining);\n            result.Add(0);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = operators.ToArray();\n        var nums = operands.ToArray();\n        int i = ops.Length - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int)Math.Pow(nums[i], nums[i + 1]);\n                nums[i + 1] = 0;\n                ops[i] = \"\";\n                i--;\n            }\n        }\n        i = 0;\n        while (i < ops.Length) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums[i + 1] = 0;\n                ops[i] = \"\";\n                i--;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums[i + 1] = 0;\n                ops[i] = \"\";\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.Length) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums[i + 1] = 0;\n                ops[i] = \"\";\n                i--;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums[i + 1] = 0;\n                ops[i] = \"\";\n                i--;\n            }\n            i++;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        if (!s.Any(ch => ch.IsLetter())) {\n            return new string(s.Reverse().ToArray());\n        }\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (!ch.IsLetter()) {\n                result.Add(ch);\n            } else if (ch.IsUpper()) {\n                result.Add((char) (ch - 'a' + 'A'));\n            } else {\n                result.Add((char) (ch - 'a' + 'A'));\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        using (var md5 = MD5.Create()) {\n            var txtBytes = txt.ToBytes();\n            var md5Hash = md5.ComputeHash(txtBytes);\n            var md5Encoded = BitConverter.ToString(md5Hash).Replace(\"-\", \"\").ToLower();\n            return md5Encoded;\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        int lower = Math.Max(2, Math.Min(a, b));\n        int upper = Math.Min(8, Math.Max(a, b));\n        var result = new List<int>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] - numbers[j] < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var stk = <String>[];\n    var groups = <String>[];\n    var currentGroup = \"\";\n    for (var ch in parenString.split(\"\")) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.toInt();\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    var mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    var deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var groups = parenString.split(\" \");\n    for (var group in groups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => substring in s).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    var nSum = numbers.fold(0, (x, y) => x + y);\n    var nProduct = numbers.fold(1, (x, y) => x * y);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = float.min;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "String makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed.toString();\n        }\n    }\n    return \"\";\n}\nbool isPalindrome(String s) {\n    return s == s.split(\"\").reversed.join(\"\");\n}\n",
            "String stringXor(String a, String b) {\n    var result = \"\";\n    for (int i = 0; i < a.length; i++) {\n        result += a[i] == b[i] ? \"0\" : \"1\";\n    }\n    return result;\n}\n",
            "String? longest(List<String> strs) {\n    String? longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        result.add(s.substring(0, i + 1));\n    }\n    return result;\n}\n",
            "String stringSequence(int n) {\n    var result = <String>[];\n    for (int i = 0; i <= n; i++) {\n        result.add(i.toString());\n    }\n    return result.join(\" \");\n}\n",
            "int countDistinctCharacters(String s) {\n    var set = <String>{};\n    for (var c in s.toLowerCase()) {\n        set.add(c.toString());\n    }\n    return set.length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    };\n    var notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    var times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = <String, int>{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = numbers.split(\" \").where((x) => x in numDict).toList();\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    var sortedNumbers = numbers.sorted();\n    var minDiff = double.infinity;\n    var closestPair = <double>[];\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce((value, element) => value < element ? value : element);\n    double maxNum = numbers.reduce((value, element) => value > element ? value : element);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    var result = <int>[];\n    for (var e in values) {\n        if (e is int) {\n            result.add(e);\n        }\n    }\n    return result;\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = <int, int>{};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    var res = <int>[];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = <String>[];\n    for (var ch in s.codeUnits) {\n        if (!ch.isLetter) {\n            flipped.add(String.fromCharCode(ch));\n        } else if (ch.isLowerCase) {\n            flipped.add(String.fromCharCode(ch.toUpperCase()));\n        } else {\n            flipped.add(String.fromCharCode(ch.toLowerCase()));\n        }\n    }\n    return String.fromCharCodes(flipped);\n}\n",
            "String concatenate(List<String> strs) {\n    var result = \"\";\n    for (var s in strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    var result = <String>[];\n    for (var s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> getPositive(List<int> l) {\n    var result = <int>[];\n    for (int num in l) {\n        if (num > 0) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * x.pow(i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (x1 - x2 > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.sorted((a, b) => a - b);\n    return [sortedThird[i ~/ 3] if i % 3 == 0 else l[i] for i in range(l.length)];\n}\n",
            "List<int> listUnique(List<int> l) {\n    var result = <int>[];\n    var seen = <int>{};\n    for (int e in l) {\n        if (!seen.contains(e)) {\n            result.add(e);\n            seen.add(e);\n        }\n    }\n    return result;\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce(max);\n}\n",
            "int fizzBuzz(int n) {\n    var cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().split(\"\").where((e) => e == \"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.where((e) => e % 2 == 0).toList();\n    sortedEven.sort();\n    return [for (int i = 0; i < l.length; i++) i % 2 == 0 ? sortedEven[i ~/ 2] : l[i]];\n}\n",
            "String encodeCyclic(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join();\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    var f = [0, 1];\n    var cnt = 0;\n    while (cnt < n) {\n        var tmp = [f[1], f[0] + f[1]];\n        if (isPrime(tmp[1])) {\n            cnt++;\n        }\n        f = tmp;\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    var result = 0;\n    for (int i = 1; i <= n; i++) {\n        result += i * i;\n    }\n    return result;\n}\n",
            "List<int> incrList(List<int> l) {\n    var result = <int>[];\n    for (int i in l) {\n        result.add(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = <int>{};\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    var digits = <String>[];\n    while (x > 0) {\n        digits.add(x % bas.toString());\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    var sl = l.toList()..sort();\n    if (l.length % 2 != 0) {\n        return sl[l.length ~/ 2];\n    } else {\n        return (sl[l.length ~/ 2] + sl[l.length ~/ 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    var l = txt.length;\n    var i = 0;\n    var j = l - 1;\n    while (i < j) {\n        if (txt[i] != txt[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n",
            "int modp(int n, int p) {\n    var ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    var result = <String>[];\n    for (var ch in s.split('')) {\n        result.add(String.fromCharCode(\n            (ch.codeUnitAt(0) - 97 + 5) % 26 + 97));\n    }\n    return result.join('');\n}\nString decodeShift(String s) {\n    var result = <String>[];\n    for (var ch in s.split('')) {\n        result.add(String.fromCharCode(\n            (ch.codeUnitAt(0) - 97 + 21) % 26 + 97));\n    }\n    return result.join('');\n}\n",
            "String removeVowels(String txt) {\n    var vowels = \"aeiouAEIOU\";\n    return txt.replaceAll(RegExp(r'[aeiouAEIOU]'), '');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    for (int x in l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    var s0Set = Set<String>.from(s0.split(''));\n    var s1Set = Set<String>.from(s1.split(''));\n    return s0Set.difference(s1Set).isEmpty && s1Set.difference(s0Set).isEmpty;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = l.skip(1).map((x) => x - l[0]).toList();\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    var s1 = Set<int>.from(l1);\n    var s2 = Set<int>.from(l2);\n    return s1.intersection(s2).toList();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return n * (n + 1) / 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    var result = <int>[];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    var a = 0;\n    var b = 0;\n    var c = 1;\n    while (n > 2) {\n        var temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    var xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    var result = 0;\n    for (var c in s.codeUnits) {\n        if (c >= 65 && c <= 90) {\n            result += c - 65;\n        }\n    }\n    return result;\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.tryParse(words[words.indexOf(\"apples\") - 1]);\n    var oranges = int.tryParse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples! - oranges!;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = <int>[];\n    for (int n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n);\n        }\n    }\n    if (evens.isEmpty) {\n        return [];\n    }\n    var minEven = evens.first;\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        freqs[n] = (freqs[n] ?? 0) + 1;\n    }\n    var goodVals = freqs.keys.where((k) => freqs[k] >= k).toList();\n    return goodVals.isEmpty ? -1 : goodVals.reduce(max);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = lst.toList()..sort();\n    var result = <int>[];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left++;\n        if (left <= right) {\n            result.add(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    var isPalin = q.every((e) => e == q.last);\n    var total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    var ans = 0;\n    for (int i = 0; i < arr.length / 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    var cnt1 = lst1.fold<int>(0, (acc, e) => acc + e.length);\n    var cnt2 = lst2.fold<int>(0, (acc, e) => acc + e.length);\n    return lst1 if (cnt1 <= cnt2 else lst2);\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a ~/= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    var root = a.toDouble().rounded()..toDouble();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    var result = 0;\n    for (var c in num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
            "String decimalToBinary(int dec) {\n    var binary = dec.toBinary();\n    return \"db\" + binary.toString() + \"db\";\n}\n",
            "bool isHappy(String s) {\n    var seen = <String>{};\n    var cur = s;\n    while (cur != '1') {\n        if (seen.contains(cur)) {\n            return false;\n        }\n        seen.add(cur);\n        var sum = 0;\n        for (var c in cur.codeUnits) {\n            sum += (c - 48) * (c - 48);\n        }\n        cur = sum.toString();\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    var length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (var i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    var digitsSum = 0;\n    var s = n.toString();\n    for (var d in s) {\n        digitsSum += int.parse(d);\n    }\n    return bin(digitsSum)[2:];\n}\n",
            "int add(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String antiShuffle(String s) {\n    var words = s.split(\" \").map((word) => word.toLowerCase().codeUnits).toList();\n    words.sort((a, b) => a.compareTo(b));\n    return words.map((word) => String.fromCharCodes(word)).join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) {\n        if (a[0] == b[0]) {\n            return -(a[1] - b[1]);\n        }\n        return a[0] - b[0];\n    });\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr.last) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.toList();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = <String>[];\n    for (var ch in s.codeUnits) {\n        var shifted = ch + 4;\n        if (shifted > 122) {\n            shifted -= 26;\n        }\n        result.add(String.fromCharCode(shifted));\n    }\n    return result.join();\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = List.from(lst.toSet());\n    sl.sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = s.split(new RegExp(r\"[.!?]\\s*\"));\n    var bored = 0;\n    for (var sentence in sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            bored += 1;\n        }\n    }\n    return bored;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = <String>[];\n    for (var ch in message.codeUnits) {\n        if (ch.isLetter) {\n            var ch1 = ch.isLowerCase ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(String.fromCharCode(ch));\n        }\n    }\n    return result.join();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    var primes = lst.where((e) => isPrime(e)).toList();\n    if (primes.length == 0) {\n        return 0;\n    }\n    var largest = primes.map((e) => e.toString()).reduce((a, b) => a.length > b.length ? a : b);\n    return largest.map((e) => e.codeUnitAt(0) - 48).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((e) => e.isLowerCase) || d.keys.every((e) => e.isUpperCase);\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num = 2; num < n; num++) {\n        if (all(num % p != 0 for (int p) in primes)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a < 0 ? -a : a) % 10 * (b < 0 ? -b : b) % 10;\n}\n",
            "int countUpper(String s) {\n    var vowels = \"AEIOU\";\n    var count = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0) {\n        return num.toInt() + 0.5;\n    } else {\n        return num.toInt() - 0.5;\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    var result = <int>();\n    for (int i = 0; i < n; i++) {\n        result.add(n + 2 * i);\n    }\n    return result;\n}\n",
            "List<String> wordsString(String s) {\n    var regex = RegExp(r\"[, ]\");\n    return s.split(regex).where((w) => w.isNotEmpty).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if (x != y) else -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    var rAvg = (m + n) / 2.0 + 0.5;\n    return rAvg.toInt().toRadixString(2);\n}\n",
            "bool allDigitsOdd(String s) {\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nList<int> uniqueDigits(List<int> x) {\n    var result = <int>[];\n    for (int num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = List.from(arr)..sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]).toList();\n}\n",
            "List<int> f(int n) {\n    var nums = List.generate(n + 1, (i) => i);\n    return [\n        for (int i = 1; i <= n; i++)\n            i % 2 != 0 ? nums.sublist(0, i).reduce((a, b) => a + b) : nums.sublist(0, i).reduce((a, b) => a * b)\n    ];\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join();\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(List<int> arr) {\n    var result = 0;\n    for (int n in arr) {\n        if (digitsSum(n) > 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\nint digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.codeUnits.fold(0, (a, b) => a + b - 48);\n    } else {\n        return (nStr.substring(0, 2) * 2 + digitsSum(n)).toInt();\n    }\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    var sortedArr = List.from(arr)..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i).toList() == sortedArr.sublist(arr.length - i).toList() && arr.sublist(0, i).toList() == sortedArr.sublist(0, arr.length - i).toList()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    var oddCnt = lst1.where((num) => num % 2 != 0).length;\n    var evenCnt = lst2.where((num) => num % 2 == 0).length;\n    return \"YES\" if (evenCnt >= oddCnt) else \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    var freq = <String, int>{};\n    var words = test.split(\" \");\n    for (var w in words) {\n        freq[w] = (freq[w] ?? 0) + 1;\n    }\n    var result = <String, int>{};\n    if (freq.length > 0) {\n        var maxFreq = 0;\n        for (var k in freq.keys) {\n            if (freq[k] > maxFreq) {\n                maxFreq = freq[k];\n            }\n        }\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split(\"\").reversed.join(\"\");\n}\nList<String> reverseDelete(String s, String c) {\n    var s1 = s.split(\"\").where((ch) => !c.contains(ch)).join(\"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (var num in lst) {\n        var n = 0;\n        for (var d in num) {\n            n += d.codeUnitAt(0) % 2 == 1 ? 1 : 0;\n        }\n        var rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = curSum < 0 ? 0 : curSum;\n        curSum += n;\n        minSum = min(curSum, minSum);\n    }\n    return minSum == 0 ? min(nums) : minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    var result = 0;\n    for (var arr in grid) {\n        var sum = 0;\n        for (var e in arr) {\n            sum += e;\n        }\n        result += ceil(sum / capacity);\n    }\n    return result;\n}\n",
            "int countOnes(int num) {\n    return num.toRadixString(2).split(\"\").where((e) => e == \"1\").length;\n}\nList<int> sortArray(List<int> arr) {\n    var result = arr.toList()..sort((a, b) {\n        var aOnes = countOnes(a);\n        var bOnes = countOnes(b);\n        if (aOnes != bOnes) {\n            return aOnes - bOnes;\n        } else {\n            return a - b;\n        }\n    });\n    return result;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \").where((w) => w.length > 0).toList();\n    return words.where((w) => w.length == n && w.split(\"\").where((c) => c.toLowerCase() in consonants).length == n).toList();\n}\n",
            "String getClosestVowel(String word) {\n    var vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\nbool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true if depth == 0 else false;\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    var result = <int>[];\n    var sorted = arr.toList()..sort();\n    for (int i = 0; i < k; i++) {\n        result.add(sorted[arr.length - i - 1]);\n    }\n    return result;\n}\n",
            "int solution(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(List<int> arr, int k) {\n    var result = 0;\n    for (int n in arr.getRange(0, k)) {\n        if (n.toString().length <= 2) {\n            result += n;\n        }\n    }\n    return result;\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz.sorted();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int month = int.parse(date.substring(0, 2));\n    int day = int.parse(date.substring(3, 5));\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    return true;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    var freq = <int, int>{};\n    for (int i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    var maxCount = 0;\n    for (var count in freq.values) {\n        maxCount = max(maxCount, count);\n    }\n    return maxCount <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) return null;\n    if (arr.contains(0)) return 0;\n    var sign = arr.fold(1, (a, b) => a * (b < 0 ? -1 : 1));\n    return sign * arr.fold(0, (a, b) => a + b);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    var n = grid.length;\n    var minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                var temp = <int>[];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = min(temp);\n            }\n        }\n    }\n    var result = <int>[];\n    for (int i = 0; i < k; i++) {\n        result.add(1 if (i % 2 == 0) else minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = <int>[];\n    for (var d in str.from(n).split('')) {\n        if (int.parse(d) % 2 == 1) {\n            odds.add(int.parse(d));\n        }\n    }\n    return odds.isEmpty ? 0 : reduce<int, int>((x, y) => x * y, odds, 1);\n}\n",
            "bool isNested(String s) {\n    var openIdx = <int>[];\n    var closeIdx = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.reversed.forEach((idx) {\n        openIdx.remove(idx);\n    });\n    return openIdx.length >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    var result = 0.0;\n    for (double n in lst) {\n        result += pow(ceil(n), 2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt == null || txt.isEmpty) {\n        return false;\n    }\n    var last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last.codeUnitAt(0).isLetter;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = <int>[];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    return idx.isEmpty ? -1 : idx.max();\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.where((e) => e < 0).toList();\n    var pos = lst.where((e) => e > 0).toList();\n    var maxNeg = neg.isNotEmpty ? neg.reduce((a, b) => a > b ? a : b) : null;\n    var minPos = pos.isNotEmpty ? pos.reduce((a, b) => a < b ? a : b) : null;\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        return double.tryParse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        return a.toDouble();\n    } else if (a is double) {\n        return a;\n    }\n    throw ArgumentError(\"Type Error\");\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    var result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(RegExp(r\"\\s\"), \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length == 0 || !lst[0][0].isLetter() || lst[0].length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    return words.join(\" \".map((w) {\n        if (isPrime(w.length)) {\n            return w;\n        }\n        return \"\";\n    }).where((w) {\n        return w.isNotEmpty;\n    }).join(\" \"));\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        var firstTwo = nStr.substring(0, 2);\n        return firstTwo.codeUnitAt(0) * 2 + digitsSum(int.parse(firstTwo));\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.map((n) => digitsSum(n)).toList()..sort();\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    var result = 0;\n    for (int n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = <String>[];\n    for (var s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) {\n        if (a.length != b.length) {\n            return a.length.compareTo(b.length);\n        } else {\n            return a.compareTo(b);\n        }\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    var result = 0.0;\n    for (double n in lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    var result = <int>[];\n    for (int i = 0; i < game.length; i++) {\n        result.add(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    var maxS = -1;\n    var maxExt = \"\";\n    for (var ext in extensions) {\n        var upper = ext.where((c) => c.isUpperCase).length;\n        var lower = ext.where((c) => c.isLowerCase).length;\n        var s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    var ds = abs(num).toString();\n    var even = ds.split('').where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = <String>[];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c];\n    s.sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    var maxCnt = 0;\n    var maxW = \"\";\n    for (var w in words) {\n        var cnt = w.split(\"\").toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!s.contains(RegExp(r'[a-zA-Z]'))) {\n        return s.split('').reversed.join();\n    }\n    var result = <String>[];\n    for (var ch in s.split('')) {\n        if (!ch.contains(RegExp(r'[a-zA-Z]'))) {\n            result.add(ch);\n        } else if (ch.contains(RegExp(r'[a-z]'))) {\n            result.add(ch.toUpperCase());\n        } else {\n            result.add(ch.toLowerCase());\n        }\n    }\n    return result.join();\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt == null || txt.isEmpty) {\n        return null;\n    }\n    var md5 = md5.convert(txt.codeUnits);\n    return md5.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    var lower = max(2, min(a, b));\n    var upper = min(8, max(a, b));\n    return [i for i in range(lower, upper + 1) if i % 2 == 0];\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    for _, ch := range parenString {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, n := range numbers {\n        mean += n\n    }\n    mean /= float64(len(numbers))\n    deviation := 0.0\n    for _, n := range numbers {\n        deviation += math.Abs(n - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := []int{}\n    for i, n := range numbers {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, n)\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    for _, group := range strings.Split(parenString, \" \") {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    nProduct := 1\n    for _, n := range numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}\n",
            "func RollingMax(numbers []int) []int {\n    max := float64(math.Inf(-1))\n    result := make([]int, 0)\n    for _, num := range numbers {\n        if num > max {\n            max = float64(num)\n        }\n        result = append(result, int(max))\n    }\n    return result\n}\n",
            "func MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s + s[:i][::-1]\n        }\n    }\n    return \"\"\n}\nfunc IsPalindrome(s string) bool {\n    return s == s[::-1]\n}\n",
            "func StringXor(a string, b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest) {\n            longest = s\n        }\n    }\n    return &longest\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    for b != 0 {\n        a, b = b, a % b\n    }\n    return a\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[: i + 1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result\n}\n",
            "func CountDistinctCharacters(s string) int {\n    m := make(map[rune]bool)\n    for _, c := range s {\n        m[c] = true\n    }\n    return len(m)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := strings.Fields(musicString)\n    result := make([]int, 0)\n    for _, note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s) - len(substring) + 1; i++ {\n        if s[i : i + len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := []string{}\n    for _, n := range strings.Split(numbers, \" \") {\n        if _, ok := numDict[n]; ok {\n            numList = append(numList, n)\n        }\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    closestPair := []float64{}\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{numbers[i-1], numbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.Inf(1)\n    maxNum := math.Inf(-1)\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    }\n    return []float64{\n        (num - minNum) / (maxNum - minNum)\n        for _, num := range numbers\n    }\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := []int{}\n    for _, v := range values {\n        if i, ok := v.(int); ok {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n/i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    res := []int{}\n    for num, count := range counts {\n        if count == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    result := \"\"\n    for _, s := range strs {\n        result += s\n    }\n    return result\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    result := []int{}\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for _, e := range xs {\n        res += float64(e) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1) * Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := make([]int, len(l) / 3)\n    for i := range sortedThird {\n        sortedThird[i] = l[i*3]\n    }\n    sort.Ints(sortedThird)\n    result := make([]int, len(l))\n    for i := range l {\n        if i%3 == 0 {\n            result[i] = sortedThird[i/3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    result := []int{}\n    m := map[int]bool{}\n    for _, e := range l {\n        if _, ok := m[e]; !ok {\n            result = append(result, e)\n            m[e] = true\n        }\n    }\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, e := range l {\n        if e > max {\n            max = e\n        }\n    }\n    return max\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := make([]int, 0)\n    for _, e := range l {\n        if e % 2 == 0 {\n            sortedEven = append(sortedEven, e)\n        }\n    }\n    sortedEven = append(sortedEven, l[1:]...)\n    return sortedEven\n}\n",
            "func EncodeCyclic(s string) string {\n    result := []string{}\n    for i := 0; i < len(s); i += 3 {\n        if i + 3 > len(s) {\n            result = append(result, s[i:])\n        } else {\n            result = append(result, s[i+1:i+3])\n            result = append(result, s[i])\n        }\n    }\n    return strings.Join(result, \"\")\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = []int{f[1], f[0] + f[1]}\n        if isPrime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    if n == 1 {\n        return 0\n    }\n    return n * n + CarRaceCollision(n - 1)\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, e := range l {\n        result[i] = e + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := map[int]bool{}\n    for _, num := range l {\n        if -num in seen {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []byte{}\n    for x > 0 {\n        digits = append(digits, byte(x%bas)+'0')\n        x /= bas\n    }\n    return string(digits)\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a) * float64(h) / 2\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[(i-1)%4] + fib[(i-2)%4] + fib[(i-3)%4]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sl := make([]float64, 0)\n    for _, e := range l {\n        sl = append(sl, e)\n    }\n    sort.Float64s(sl)\n    if len(l) % 2 != 0 {\n        return sl[len(l) / 2]\n    } else {\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n    }\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == reverse(txt)\n}\nfunc reverse(s string) string {\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < j; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, 0, len(s))\n    for _, ch := range s {\n        result = append(result, (ch-97+5)%26+97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := make([]byte, 0, len(s))\n    for _, ch := range s {\n        result = append(result, (ch-97+21)%26+97)\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []rune{}\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, e := range l {\n        if e >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return len(s0) == len(s1) && strings.Count(s0, s1) == len(s0)\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n - 1) + Fib(n - 2)\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth++\n        } else if b == '>' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := 0; i < len(diff); i++ {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(x <= 0 for x in diff) || all(x >= 0 for x in diff)\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, e := range l1 {\n        m[e] = true\n    }\n    result := []int{}\n    for _, e := range l2 {\n        if m[e] {\n            result = append(result, e)\n        }\n    }\n    return result\n}\n",
            "func LargestPrimeFactor(n int) int {\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            for n%i == 0 {\n                n /= i\n            }\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return n * (n + 1) / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth++\n        } else if b == ')' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.ToLower(string(s[i])) == \"y\" || strings.ToLower(string(s[i])) == \"a\" || strings.ToLower(string(s[i])) == \"e\" || strings.ToLower(string(s[i])) == \"i\" || strings.ToLower(string(s[i])) == \"o\" || strings.ToLower(string(s[i])) == \"u\" {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        return xStr[len(xStr):] + xStr[:len(xStr)]\n    }\n    return xStr[len(xStr)-shift:] + xStr[:len(xStr)-shift]\n}\n",
            "func DigitSum(s string) int {\n    result := 0\n    for _, c := range s {\n        if unicode.IsUpper(c) {\n            result += int(c)\n        }\n    }\n    return result\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    for i, w := range words {\n        if w == \"apples\" {\n            apples = n - apples - int(words[i-1])\n        } else if w == \"oranges\" {\n            oranges = n - apples - oranges\n        }\n    }\n    return apples + oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, n := range evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    return []int{minEven, index(arr, minEven)}\n}\nfunc index(arr []int, target int) int {\n    for i, n := range arr {\n        if n == target {\n            return i\n        }\n    }\n    return -1\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    goodVals := []int{}\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) == 0 {\n        return -1\n    }\n    return max(goodVals)\n}\nfunc max(vals []int) int {\n    result := vals[0]\n    for _, v := range vals {\n        if v > result {\n            result = v\n        }\n    }\n    return result\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Slice(sl, func(i, j int) bool { return sl[i] < sl[j] })\n    result := make([]int, len(lst))\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result[left], result[right] = sl[left], sl[right]\n        left++\n        right--\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2.0\n        return math.Sqrt(s*(s-a)*(s-b)*(s-c))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, e := range q {\n        total += e\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    var ans int\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    cnt2 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if IsPrime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\nfunc IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= floor(sqrt(n)); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    root := int(math.Round(math.Pow(float64(a), 1.0/3.0)))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, c := range num {\n        if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return \"db\" + binary + \"db\"\n}\n",
            "func IsHappy(s string) bool {\n    for {\n        if len(s) < 3 {\n            return false\n        }\n        for i := 0; i < len(s) - 2; i++ {\n            if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n                return false\n            }\n        }\n        if s == \"\" {\n            return true\n        }\n        s = strings.ReplaceAll(s, s[0:2], \"\")\n    }\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, 0)\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digitsSum += int(d - '0')\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n",
            "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        words = append(words, strings.Join(sort(word), \"\"))\n    }\n    return strings.Join(words, \" \")\n}\nfunc sort(s string) []string {\n    result := []string{}\n    for _, c := range s {\n        if len(result) == 0 || result[len(result)-1] != string(c) {\n            result = append(result, string(c))\n        }\n    }\n    return result\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := [][]int{}\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        if coords[i][0] < coords[j][0] {\n            return true\n        } else if coords[i][0] == coords[j][0] {\n            return coords[i][1] < coords[j][1]\n        }\n        return false\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        return sort.Reverse(arr)\n    }\n    return sort.Slice(arr, func(i, j int) bool { return arr[i] < arr[j] })\n}\n",
            "func Encrypt(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result = append(result, shifted)\n    }\n    return string(result)\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make([]int, 0)\n    for _, e := range lst {\n        if e != 0 {\n            sl = append(sl, e)\n        }\n    }\n    if len(sl) < 2 {\n        return nil\n    }\n    sort.Ints(sl)\n    return &sl[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := regexp.MustCompile(\"[.!?]\\\\s*\").Split(s, -1)\n    return len(sentences) - strings.Count(s, \"I \")\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if _, ok := x.(int); ok && _, ok := y.(int); ok && _, ok := z.(int) {\n        if (x.(int) + y.(int) == z.(int)) || (x.(int) + z.(int) == y.(int)) || (y.(int) + z.(int) == x.(int)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []rune{}\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            ch1 := unicode.ToUpper(ch)\n            if unicode.IsLower(ch1) {\n                ch1 = unicode.ToLower(ch1)\n            }\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = ch1 + 2\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func Skjkasdkd(lst []int) int {\n    primes := []int{}\n    for _, n := range lst {\n        if isPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := \"\"\n    for _, digit := range strconv.Itoa(max(primes)) {\n        largest += string(digit)\n    }\n    result, _ := strconv.Atoi(largest)\n    return result\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc max(lst []int) int {\n    result := lst[0]\n    for _, n := range lst {\n        if n > result {\n            result = n\n        }\n    }\n    return result\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    for k, _ := range d {\n        if unicode.IsLower(rune(k[0])) {\n            for _, v := range d[k] {\n                if unicode.IsUpper(rune(v)) {\n                    return false\n                }\n            }\n        } else {\n            for _, v := range d[k] {\n                if unicode.IsLower(rune(v)) {\n                    return false\n                }\n            }\n        }\n    }\n    return true\n}\n",
            "func CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num < n; num++ {\n        if all(func(p int) bool { return num % p != 0 }, primes) {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 {\n        return b\n    }\n    if b == 1 {\n        return a\n    }\n    if a == b {\n        return a * (a - 1) / 2\n    }\n    if a > b {\n        return Multiply(a, b/2) + Multiply(a, b/2+b%2)\n    }\n    return Multiply(b, a/2) + Multiply(b, a/2+a%2)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && string(c) == vowels {\n            count++\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\n",
            "func MakeAPile(n int) []int {\n    return []int{n + 2*i for i in range(n)}\n}\n",
            "func WordsString(s string) []string {\n    return strings.Fields(s)\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x == y {\n        return -1\n    }\n    return y - 1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2.0 + 0.5)\n    return new(string, bin(rAvg)[2:])\n}\n",
            "func UniqueDigits(x []int) []int {\n    result := []int{}\n    for _, num := range x {\n        if allDigitsOdd(strconv.Itoa(num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\nfunc allDigitsOdd(s string) bool {\n    for _, digit := range s {\n        if digit % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := make([]int, 0)\n    for _, e := range arr {\n        if 1 <= e && e <= 9 {\n            sortedArr = append(sortedArr, e)\n        }\n    }\n    sort.Slice(sortedArr, func(i, j int) bool { return sortedArr[i] > sortedArr[j] })\n    result := make([]string, 0)\n    for _, e := range sortedArr {\n        result = append(result, digitNames[e-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := range nums {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i := range nums {\n        if i%2 != 0 {\n            result[i] = sum(nums[:i])\n        } else {\n            result[i] = reduce(func(x, y int) int { return x * y }, nums[:i], 1)\n        }\n    }\n    return result\n}\nfunc sum(nums []int) int {\n    result := 0\n    for _, n := range nums {\n        result += n\n    }\n    return result\n}\nfunc reduce(f func(x, y int) int, nums []int, init int) int {\n    result := init\n    for _, n := range nums {\n        result = f(result, n)\n    }\n    return result\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := [2]int{}\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            cnt[i % 2]++\n        }\n    }\n    return cnt[:]\n}\nfunc isPalindrome(n int) bool {\n    s := strconv.Itoa(n)\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        if s[i] != s[j] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func CountNums(arr []int) int {\n    result := 0\n    for _, n := range arr {\n        if digitsSum(n) > 0 {\n            result++\n        }\n    }\n    return result\n}\nfunc digitsSum(n int) int {\n    if n < 0 {\n        n = n * 2 + digitsSum(n / 10)\n    }\n    return n / 10 + n % 10\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr) - i] && arr[:i] == sortedArr[len(arr) - i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    evenCnt := 0\n    for _, num := range lst1 {\n        if num % 2 != 0 {\n            oddCnt++\n        }\n    }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        freq[w] += 1\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := strings.Map(func(r rune) rune {\n        if strings.ContainsRune(c, r) {\n            return -1\n        }\n        return r\n    }, s)\n    if isPalindrome(s1) {\n        return []string{s1, \"yes\"}\n    }\n    return []string{s1, \"no\"}\n}\nfunc isPalindrome(s string) bool {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        if s[i] != s[j] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func OddCount(lst []string) []string {\n    result := []string{}\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d % 2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.ReplaceAll(rs, \"i\", strconv.Itoa(n)))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    result := 0\n    for _, arr := range grid {\n        result += ceil(sum(arr) / capacity)\n    }\n    return result\n}\nfunc ceil(x float64) float64 {\n    if x - math.Floor(x) < 0.5 {\n        return math.Floor(x)\n    }\n    return math.Ceil(x)\n}\nfunc sum(arr []int) float64 {\n    result := 0.0\n    for _, e := range arr {\n        result += float64(e)\n    }\n    return result\n}\n",
            "func SortArray(arr []int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        c1 := countOnes(arr[i])\n        c2 := countOnes(arr[j])\n        if c1 == c2 {\n            return arr[i] < arr[j]\n        }\n        return c1 < c2\n    })\n    return arr\n}\nfunc CountOnes(num int) int {\n    return strings.Count(fmt.Sprintf(\"%b\", num), \"1\")\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Fields(s)\n    return []string{w for w in words if len([c for c in w if strings.ToLower(string(c)) in consonants]) == n}\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i >= 1; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n            if word[i-1] != 'a' && word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u' {\n                return string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\nfunc check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AddElements(arr []int, k int) int {\n    result := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            result += arr[i]\n        }\n    }\n    return result\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n = n/2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m := int(date[:2])\n    d := int(date[3:5])\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    } else if m == 4 || m == 6 || m == 9 || m == 11 {\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    } else if m == 2 {\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{strconv.Itoa(len([c for c := txt; c != \"\"; c = strings.Split(c, \"\")[0]]))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    freq := make(map[int]int)\n    for _, e := range lst {\n        freq[e]++\n    }\n    maxFreq := 0\n    for _, f := range freq {\n        if f > maxFreq {\n            maxFreq = f\n        }\n    }\n    return maxFreq <= 2\n}\n",
            "func Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length <= 0 || !isPrime(length) {\n        return \"NO\"\n    }\n    return \"YES\"\n}\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if 0 in arr {\n        return 0\n    }\n    sign := -1\n    if len([n for n in arr if n < 0])%2 == 1 {\n        sign = 1\n    }\n    return sign * sum([abs(n) for n in arr])\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                minVal = min(minVal, min(temp...))\n            }\n        }\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i] = minVal\n        }\n    }\n    return result\n}\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, (i/2 + 1))\n        } else {\n            seq = append(seq, seq[i-1] + seq[i-2] + (i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range strconv.Itoa(n) {\n        if d % 2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    return reduce(func(x, y int) int { return x * y }, odds, 1)\n}\nfunc reduce(f func(x, y int) int, all []int, init int) int {\n    result := init\n    for _, e := range all {\n        result = f(result, e)\n    }\n    return result\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx = reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}\nfunc reverse(a []int) []int {\n    for i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {\n        a[i], a[j] = a[j], a[i]\n    }\n    return a\n}\n",
            "func SumSquares(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        result += int(math.Pow(float64(math.Ceil(n)), 2))\n    }\n    return result\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n    return len(last) == 1 && last >= 'A' && last <= 'Z' || last >= 'a' && last <= 'z'\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i - 1] {\n            idx = append(idx, i)\n        }\n    }\n    return max(idx, -1)\n}\nfunc max(a []int, defaultVal int) int {\n    if len(a) == 0 {\n        return defaultVal\n    }\n    result := a[0]\n    for _, e := range a {\n        if e > result {\n            result = e\n        }\n    }\n    return result\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := []int{}\n    pos := []int{}\n    for _, e := range lst {\n        if e < 0 {\n            neg = append(neg, e)\n        } else {\n            pos = append(pos, e)\n        }\n    }\n    max_neg := max(neg)\n    min_pos := min(pos)\n    return []*int{&max_neg, &min_pos}\n}\nfunc max(lst []int) int {\n    result := lst[0]\n    for _, e := range lst {\n        if e > result {\n            result = e\n        }\n    }\n    return result\n}\nfunc min(lst []int) int {\n    result := lst[0]\n    for _, e := range lst {\n        if e < result {\n            result = e\n        }\n    }\n    return result\n}\n",
            "func CompareOne(a interface{}, b interface{}) *float64 {\n    if a == nil || b == nil {\n        return nil\n    }\n    if astr, ok := a.(string); ok {\n        if bstr, ok := b.(string); ok {\n            if astr == bstr {\n                return nil\n            }\n            if astr > bstr {\n                return astr\n            }\n            return bstr\n        }\n        if bint, ok := b.(int); ok {\n            if aint, ok := a.(int); ok {\n                if aint == bint {\n                    return nil\n                }\n                if aint > bint {\n                    return astr\n                }\n                return bstr\n            }\n            if afloat, ok := a.(float64); ok {\n                if afloat == float64(bint) {\n                    return nil\n                }\n                if afloat > float64(bint) {\n                    return astr\n                }\n                return bstr\n            }\n        }\n        if afloat, ok := a.(float64); ok {\n            if afloat == b {\n                return nil\n            }\n            if afloat > b {\n                return astr\n            }\n            return bstr\n        }\n    }\n    if bstr, ok := b.(string); ok {\n        if astr, ok := a.(string); ok {\n            if astr == bstr {\n                return nil\n            }\n            if astr > bstr {\n                return astr\n            }\n            return bstr\n        }\n        if bint, ok := b.(int); ok {\n            if aint, ok := a.(int); ok {\n                if aint == bint {\n                    return nil\n                }\n                if aint > bint {\n                    return astr\n                }\n                return bstr\n            }\n            if afloat, ok := a.(float64); ok {\n                if afloat == float64(bint) {\n                    return nil\n                }\n                if afloat > float64(bint) {\n                    return astr\n                }\n                return bstr\n            }\n        }\n        if afloat, ok := a.(float64); ok {\n            if afloat == b {\n                return nil\n            }\n            if afloat > b {\n                return astr\n            }\n            return bstr\n        }\n    }\n    if bint, ok := b.(int); ok {\n        if aint, ok := a.(int); ok {\n            if aint == bint {\n                return nil\n            }\n            if aint > bint {\n                return astr\n            }\n            return bstr\n        }\n        if afloat, ok := a.(float64); ok {\n            if afloat == float64(bint) {\n                return nil\n            }\n            if afloat > float64(bint) {\n                return astr\n            }\n            return bstr\n        }\n    }\n    if afloat, ok := a.(float64); ok {\n        if afloat == b {\n            return nil\n        }\n        if afloat > b {\n            return astr\n        }\n        return bstr\n    }\n    return nil\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= fact(i)\n    }\n    return result\n}\nfunc fact(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * fact(n - 1)\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || lst[1] != \"\" || lst[0] == \"\" || !unicode.IsLetter(rune(lst[0][0])) || len(strings.Split(lst[0], \"\")) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i%4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    result := []string{}\n    for _, w := range words {\n        if isPrime(len(w)) {\n            result = append(result, w)\n        }\n    }\n    return strings.Join(result, \" \")\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Simplify(x string, n string) bool {\n    xn := strings.Split(x, \"/\")\n    nn := strings.Split(n, \"/\")\n    num := int(xn[0]) * int(nn[0])\n    den := int(xn[1]) * int(nn[1])\n    return num % den == 0\n}\n",
            "func OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) < digitsSum(nums[j])\n    })\n    return nums\n}\nfunc digitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        return sum(int(nStr[i]-'0') for i in range(len(nStr)))\n    } else {\n        return int(nStr[:2]) * 2 + digitsSum(abs(n))\n    }\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    result := 0\n    for _, n := range nums {\n        if n > 10 && n%2 == 1 && strings.Contains(odds, string(n)) {\n            result++\n        }\n    }\n    return result\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2))/6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if !(planet1 in names && planet2 in names) {\n        return []string{}\n    }\n    l := names.index(planet1)\n    r := names.index(planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    result := 0.0\n    for _, n := range lst {\n        if n >= 0 && n%2 == 1 {\n            result += n * n\n        }\n    }\n    return int(result)\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, 0)\n    for i := 0; i < len(game); i++ {\n        result = append(result, abs(game[i] - guess[i]))\n    }\n    return result\n}\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := math.Inf(-1)\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                upper++\n            } else {\n                lower++\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if b[i:] + b[:i] == a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := strconv.Itoa(abs(num))\n    even := 0\n    for _, d := range ds {\n        if d%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    res := []string{}\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0]*s[0] + s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(set(w))\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            if w < maxW {\n                maxW = w\n            }\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    }\n    return []int{num + remaining, 0}\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := operators.copy()\n    nums := operands.copy()\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i + 1])))\n            nums = append(nums[:i], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 2:]...)\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums = append(nums[:i], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 2:]...)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums = append(nums[:i], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 2:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums = append(nums[:i], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 2:]...)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums = append(nums[:i], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 2:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            result = append(result, ch)\n        } else if unicode.IsUpper(ch) {\n            result = append(result, unicode.ToLower(ch))\n        } else {\n            result = append(result, unicode.ToUpper(ch))\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    md5Hash.Write([]byte(txt))\n    md5Encoded := md5Hash.Sum(nil)\n    md5EncodedHex := hex.EncodeToString(md5Encoded)\n    return &md5EncodedHex\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    result := []int{}\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new Stack<Character>();\n        var currentGroup = \"\";\n        for (Character ch : parenString.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double n : numbers) {\n            mean += n;\n        }\n        mean /= numbers.size();\n        double deviation = 0.0;\n        for (Double n : numbers) {\n            deviation += Math.abs(n - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        int nProduct = 1;\n        for (Integer n : numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + s.substring(0, i).reverse();\n            }\n        }\n        return \"\";\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(s.reverse());\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        var result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i) == b.charAt(i) ? \"0\" : \"1\");\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        var result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        var set = new HashSet<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            set.add(s.charAt(i));\n        }\n        return set.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<String, Integer>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = musicString.split(\" \");\n        var result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>() {{\n            put(\"zero\", 0);\n            put(\"one\", 1);\n            put(\"two\", 2);\n            put(\"three\", 3);\n            put(\"four\", 4);\n            put(\"five\", 5);\n            put(\"six\", 6);\n            put(\"seven\", 7);\n            put(\"eight\", 8);\n            put(\"nine\", 9);\n        }};\n        var numList = new ArrayList<String>();\n        for (String s : numbers.split(\" \")) {\n            if (numDict.containsKey(s)) {\n                numList.add(s);\n            }\n        }\n        Collections.sort(numList, (a, b) -> numDict.get(b) - numDict.get(a));\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        Collections.sort(sortedNumbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        List<Double> closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new ArrayList<Double>();\n                closestPair.add(sortedNumbers.get(i - 1));\n                closestPair.add(sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.MAX_VALUE;\n        double maxNum = Double.MIN_VALUE;\n        for (Double num : numbers) {\n            minNum = Math.min(minNum, num);\n            maxNum = Math.max(maxNum, num);\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>(Collections.nCopies(numbers.size(), 0.0));\n        } else {\n            return new ArrayList<Double>(\n                    Arrays.stream(numbers.toArray())\n                            .map(num -> (num - minNum) / (maxNum - minNum))\n                            .toList()\n            );\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        var result = new ArrayList<Integer>();\n        for (Object e : values) {\n            if (e instanceof Integer) {\n                result.add((Integer) e);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        var flipped = new ArrayList<Character>();\n        for (Character ch : s.toCharArray()) {\n            if (!Character.isAlphabetic(ch)) {\n                flipped.add(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.add(Character.toUpperCase(ch));\n            } else {\n                flipped.add(Character.toLowerCase(ch));\n            }\n        }\n        return String.valueOf(flipped);\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (Integer e : xs) {\n            res += e * Math.pow(x, xs.indexOf(e));\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>(l.size() / 3);\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedThird.add(l.get(i));\n        }\n        var result = new ArrayList<Integer>(l.size());\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i / 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        var set = new HashSet<Integer>();\n        for (Integer e : l) {\n            set.add(e);\n        }\n        var result = new ArrayList<Integer>();\n        for (Integer e : set) {\n            result.add(e);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.valueOf(i).chars().filter(c -> c == '7').count();\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>(l.size() / 2);\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n        var result = new ArrayList<Integer>(l.size());\n        for (int i = 0; i < l.size(); i += 2) {\n            result.add(sortedEven.get(i / 2));\n            result.add(l.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.add(s.substring(i));\n            } else {\n                result.add(s.substring(i + 1, i + 3));\n                result.add(s.substring(i, i + 1));\n            }\n        }\n        return String.join(\"\", result);\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            int[] tmp = new int[2];\n            tmp[0] = f[1];\n            tmp[1] = f[0] + f[1];\n            f = tmp;\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (Integer num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(String.valueOf(x % bas));\n            x /= bas;\n        }\n        Collections.reverse(digits);\n        return String.join(\"\", digits);\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return a * h / 2.0;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = new int[]{0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        Collections.sort(l);\n        int len = l.size();\n        if (len % 2 != 0) {\n            return l.get(len / 2);\n        } else {\n            return (l.get(len / 2) + l.get(len / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            result.append((char) ((s.charAt(i) - 'a' + 5) % 26 + 'a'));\n        }\n        return result.toString();\n    }\n    public static String decodeShift(String s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            result.append((char) ((s.charAt(i) - 'a' + 21) % 26 + 'a'));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        var vowels = \"aeiouAEIOU\";\n        var result = \"\";\n        for (char c : txt.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(s0.toCharArray()).equals(new HashSet<Character>(s1.toCharArray()));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                depth++;\n            } else if (brackets.charAt(i) == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 1; i < l.size(); i++) {\n            diff.add(l.get(i) - l.get(i - 1));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        var s1 = new HashSet<Integer>(l1);\n        var s2 = new HashSet<Integer>(l2);\n        var result = new ArrayList<Integer>();\n        for (Integer e : s1) {\n            if (s2.contains(e)) {\n                result.add(e);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return Arrays.stream(new int[n + 1]).sum();\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                depth++;\n            } else if (brackets.charAt(i) == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            int tmp = a + b + c;\n            a = b;\n            b = c;\n            c = tmp;\n            n--;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(s.charAt(i)) >= 0 || (i == s.length() - 1 && s.charAt(i) == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result += c - 'A' + 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        var words = s.split(\" \");\n        var apples = Integer.parseInt(words[words.indexOf(\"apples\") - 1]);\n        var oranges = Integer.parseInt(words[words.indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<Integer>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        int minEven = evens.get(0);\n        for (Integer e : evens) {\n            if (e < minEven) {\n                minEven = e;\n            }\n        }\n        return Arrays.asList(minEven, arr.indexOf(minEven));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = new ArrayList<Integer>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= kCount) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        return goodVals.isEmpty() ? -1 : Collections.max(goodVals);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = true;\n        for (int i = 0; i < q.size(); i++) {\n            isPalin = isPalin && q.get(i) == q.get(q.size() - i - 1);\n        }\n        int total = 0;\n        for (Integer e : q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        int cnt2 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (Global.isPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        int root = (int) Math.pow(Math.abs(a), 1.0 / 3.0);\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        var result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7' || num.charAt(i) == 'B' || num.charAt(i) == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        var set = new HashSet<Character>();\n        var sb = new StringBuilder(s);\n        while (!set.contains(sb.charAt(0))) {\n            set.add(sb.charAt(0));\n            sb.deleteCharAt(0);\n            if (sb.length() < 3) {\n                return false;\n            }\n            for (int i = 0; i < sb.length() - 2; i++) {\n                if (sb.charAt(i) == sb.charAt(i + 1) || sb.charAt(i) == sb.charAt(i + 2) || sb.charAt(i + 1) == sb.charAt(i + 2)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int) Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        return n == 1 ? 1 : 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        var digitsSum = 0;\n        for (int d = 0; d < String.valueOf(n).length(); d++) {\n            digitsSum += Integer.parseInt(String.valueOf(n).charAt(d) + \"\");\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        var words = new ArrayList<String>();\n        for (String word : s.split(\" \")) {\n            words.add(new String(word.chars().sorted().toArray()));\n        }\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(coords, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1) - a.get(1);\n            }\n            return a.get(0) - b.get(0);\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Collections.emptyList();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            return Arrays.stream(arr.toArray(new Integer[0])).boxed().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n        } else {\n            return Arrays.stream(arr.toArray(new Integer[0])).boxed().sorted(Comparator.naturalOrder()).collect(Collectors.toList());\n        }\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            int shifted = (int) ch + 4;\n            if (shifted > 122) {\n                shifted -= 26;\n            }\n            result.add((char) shifted);\n        }\n        return String.valueOf(result);\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        var sentences = Pattern.compile(\"[.!?]\\\\s*\").split(s);\n        var result = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.startsWith(\"I \")) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            if ((x + y == z) || (x + z == y) || (y + z == x)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new ArrayList<Character>();\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isLetter(ch)) {\n                char ch1 = Character.toUpperCase(ch) == ch ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n                if (vowels.indexOf(ch1) >= 0) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.add(ch1);\n            } else {\n                result.add(ch);\n            }\n        }\n        return new String(result);\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (Integer n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        var largest = String.valueOf(primes.get(primes.size() - 1));\n        var sum = 0;\n        for (int i = 0; i < largest.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(largest.charAt(i)));\n        }\n        return sum;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d == null || d.isEmpty()) {\n            return false;\n        }\n        return d.keySet().stream().allMatch(c -> c.toLowerCase().equals(c) || c.toUpperCase().equals(c));\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num < n; num++) {\n            if (all(num % p != 0 for p in primes)) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a) % 10 * Math.abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        var vowels = \"AEIOU\";\n        var result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.indexOf(s.charAt(i)) != -1) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) (num + 0.5);\n        } else {\n            return (int) (num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        var result = new ArrayList<String>();\n        var words = s.split(\"[, ]\");\n        for (String w : words) {\n            if (w.length() > 0) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 == x ? -1 : y - 1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (m + n) / 2 + 0.5;\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : x) {\n            if (allDigitsOdd(String.valueOf(num))) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n    public static boolean allDigitsOdd(String s) {\n        for (char digit : s.toCharArray()) {\n            if (digit % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = new String[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        var sortedArr = new ArrayList<Integer>(arr);\n        Collections.sort(sortedArr, Collections.reverseOrder());\n        var result = new ArrayList<String>();\n        for (Integer x : sortedArr) {\n            result.add(digitNames[x-1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(sum(nums.subList(0, i + 1)));\n            } else {\n                result.add(reduce(nums.subList(0, i + 1), 1, (x, y) -> x * y));\n            }\n        }\n        return result;\n    }\n    public static int sum(List<Integer> nums) {\n        int result = 0;\n        for (Integer num : nums) {\n            result += num;\n        }\n        return result;\n    }\n    public static <T> T reduce(List<T> nums, T init, BiFunction<T, T, T> func) {\n        T result = init;\n        for (T num : nums) {\n            result = func.apply(result, num);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int[] cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                cnt[i % 2]++;\n            }\n        }\n        return Arrays.asList(cnt[0], cnt[1]);\n    }\n    public static boolean isPalindrome(int n) {\n        return n == reverse(n);\n    }\n    public static int reverse(int n) {\n        int result = 0;\n        while (n > 0) {\n            result = result * 10 + n % 10;\n            n /= 10;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        int result = 0;\n        for (Integer n : arr) {\n            if (digitsSum(n) > 0) {\n                result++;\n            }\n        }\n        return result;\n    }\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return Arrays.stream(nStr.split(\"\")).mapToInt(Integer::parseInt).sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        var sortedArr = new ArrayList<Integer>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, arr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        int evenCnt = 0;\n        for (Integer num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return oddCnt >= evenCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = Arrays.asList(test.split(\" \"));\n        for (String w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = Arrays.stream(freq.values()).max().getAsInt();\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        var s1 = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                s1 += s.charAt(i);\n            }\n        }\n        var result = new ArrayList<String>();\n        result.add(s1);\n        result.add(isPalindrome(s1) ? \"yes\" : \"no\");\n        return result;\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(s.reverse());\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            var n = 0;\n            for (char d : num.toCharArray()) {\n                n += d % 2 == 1 ? 1 : 0;\n            }\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (Integer n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Collections.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int result = 0;\n        for (List<Integer> arr : grid) {\n            result += Math.ceil(Arrays.stream(arr).sum() / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        var result = new ArrayList<Integer>();\n        var map = new HashMap<Integer, Integer>();\n        for (Integer e : arr) {\n            map.put(e, map.getOrDefault(e, 0) + 1);\n        }\n        var pq = new PriorityQueue<Integer>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                if (map.get(o1) != map.get(o2)) {\n                    return map.get(o1) - map.get(o2);\n                } else {\n                    return o1 - o2;\n                }\n            }\n        });\n        for (Integer e : map.keySet()) {\n            pq.add(e);\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = Arrays.asList(s.split(\" \"));\n        return words.stream()\n                .filter(w -> w.length() > 0)\n                .filter(w -> w.chars().filter(c -> consonants.indexOf(c.toLowerCase()) >= 0).count() == n)\n                .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u' || word.charAt(i) == 'A' || word.charAt(i) == 'E' || word.charAt(i) == 'I' || word.charAt(i) == 'O' || word.charAt(i) == 'U') {\n                if (word.charAt(i - 1) != 'a' && word.charAt(i - 1) != 'e' && word.charAt(i - 1) != 'i' && word.charAt(i - 1) != 'o' && word.charAt(i - 1) != 'u' && word.charAt(i - 1) != 'A' && word.charAt(i - 1) != 'E' && word.charAt(i - 1) != 'I' && word.charAt(i - 1) != 'O' && word.charAt(i - 1) != 'U') {\n                    return String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return \"Yes\" if (check(s1) || check(s2)) else \"No\";\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return true if depth == 0 else false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return Collections.emptyList();\n        }\n        var result = new ArrayList<Integer>(k);\n        var sorted = new ArrayList<Integer>(arr);\n        Collections.sort(sorted);\n        for (int i = sorted.size() - 1; i >= sorted.size() - k; i--) {\n            result.add(sorted.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int result = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) != null && arr.get(i).toString().length() <= 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11 && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return Arrays.asList(String.valueOf(txt.length()).split(\"\"));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        var freq = new HashMap<Integer, Integer>();\n        for (Integer i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return Collections.max(freq.values(), Comparator.comparingInt(i -> i)) <= 2;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = -1;\n        for (Integer n : arr) {\n            if (n < 0) {\n                sign *= -1;\n            }\n        }\n        return Optional.of(sign * Arrays.stream(arr).map(n -> Math.abs(n)).sum());\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<Integer>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(minVal, Collections.min(temp));\n                }\n            }\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        List<Integer> seq = new ArrayList<Integer>();\n        if (n == 0) {\n            seq.add(1);\n            return seq;\n        }\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add((int) Math.floor(i / 2 + 1));\n            } else {\n                seq.add((int) Math.floor(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2));\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (int d : Integer.toString(n).toCharArray()) {\n            if (d % 2 == 1) {\n                odds.add(d);\n            }\n        }\n        return odds.isEmpty() ? 0 : reduce(odds, 1, (x, y) -> x * y);\n    }\n    public static int reduce(List<Integer> odds, int init, BiFunction<Integer, Integer, Integer> func) {\n        var result = init;\n        for (int i = 0; i < odds.size(); i++) {\n            result = func.apply(result, odds.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                openIdx.add(i);\n            } else if (s.charAt(i) == ']') {\n                closeIdx.add(i);\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        var result = 0;\n        for (Double n : lst) {\n            result += Math.pow(Math.ceil(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(\" \") + 1);\n        return last.length() == 1 && last.charAt(0) <= 'z' && last.charAt(0) >= 'a';\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        int max = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                max = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else {\n                pos.add(i);\n            }\n        }\n        var maxNeg = Collections.max(neg);\n        var minPos = Collections.min(pos);\n        return Arrays.asList(Optional.ofNullable(maxNeg), Optional.ofNullable(minPos));\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        if (a instanceof String) {\n            a = Double.parseDouble((String) a);\n        }\n        if (b instanceof String) {\n            b = Double.parseDouble((String) b);\n        }\n        if (a instanceof Double) {\n            if (b instanceof Double) {\n                return Optional.of(a.compareTo(b));\n            } else {\n                return Optional.of(a.compareTo(Double.parseDouble((String) b)));\n            }\n        } else {\n            if (b instanceof Double) {\n                return Optional.of(Double.parseDouble((String) a).compareTo(b));\n            } else {\n                return Optional.of(Double.parseDouble((String) a).compareTo(Double.parseDouble((String) b)));\n            }\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return Pattern.compile(\"\\\\s{3,}\").matcher(txt).replaceAll(\"-\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !lst[1].equals(\"txt\") || lst[0].length() == 0 || !lst[0].charAt(0) >= 'A' && lst[0].charAt(0) <= 'Z' || lst[0].length() > 4 || lst[0].contains(\"0123456789\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                result += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        var words = sentence.split(\" \");\n        var result = new ArrayList<String>();\n        for (String w : words) {\n            if (Global.isPrime(w.length())) {\n                result.add(w);\n            }\n        }\n        return String.join(\" \", result);\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        var xs = x.split(\"/\");\n        var ns = n.split(\"/\");\n        var num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        var den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        var result = new ArrayList<Integer>();\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                var s1 = String.valueOf(o1);\n                var s2 = String.valueOf(o2);\n                var sum1 = 0;\n                var sum2 = 0;\n                for (int i = 0; i < s1.length(); i++) {\n                    sum1 += s1.charAt(i) - '0';\n                }\n                for (int i = 0; i < s2.length(); i++) {\n                    sum2 += s2.charAt(i) - '0';\n                }\n                return sum1 == sum2 ? o1 - o2 : sum1 - sum2;\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        var odds = \"13579\";\n        var result = 0;\n        for (Integer n : nums) {\n            if (n > 10 && n % 2 == 1 && odds.contains(String.valueOf(n).charAt(0))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2))) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        var names = new ArrayList<String>();\n        names.add(\"Mercury\");\n        names.add(\"Venus\");\n        names.add(\"Earth\");\n        names.add(\"Mars\");\n        names.add(\"Jupiter\");\n        names.add(\"Saturn\");\n        names.add(\"Uranus\");\n        names.add(\"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return Collections.emptyList();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            int t = l;\n            l = r;\n            r = t;\n        }\n        if (l == r) {\n            return Collections.emptyList();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() != o2.length()) {\n                    return o1.length() - o2.length();\n                }\n                return o1.compareTo(o2);\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        var result = 0.0;\n        for (Double n : lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += n * n;\n            }\n        }\n        return (int) result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxS = Integer.MIN_VALUE;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n                    upper++;\n                } else {\n                    lower++;\n                }\n            }\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.substring(i) + b.substring(0, i)\n                    .reverseCapture(a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = String.valueOf(Math.abs(num));\n        var even = 0;\n        for (int i = 0; i < ds.length(); i++) {\n            if (ds.charAt(i) % 2 == 0) {\n                even++;\n            }\n        }\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        var values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        var numerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        var res = new ArrayList<String>();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        var s = new ArrayList<Integer>(Arrays.asList(a, b, c));\n        Collections.sort(s);\n        return s.get(0) * s.get(0) + s.get(1) * s.get(1) == s.get(2) * s.get(2);\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = w.chars().distinct().count();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = maxW.compareTo(w) < 0 ? maxW : w;\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (need <= remaining) {\n            result.add(num + need);\n            result.add(remaining - need);\n        } else {\n            result.add(num + remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = operators.stream().map(String::toLowerCase).collect(Collectors.toList());\n        var nums = operands.stream().mapToInt(Integer::intValue).collect(Collectors.toList());\n        var i = ops.size() - 1;\n        while (i >= 0) {\n            if (\"**\".equals(ops.get(i))) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (\"*\".equals(ops.get(i))) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (\"//\".equals(ops.get(i))) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (\"+\".equals(ops.get(i))) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (\"-\".equals(ops.get(i))) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (!s.chars().anyMatch(ch -> !Character.isAlphabetic(ch))) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isAlphabetic(ch)) {\n                result.add(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.add(Character.toLowerCase(ch));\n            } else {\n                result.add(Character.toUpperCase(ch));\n            }\n        }\n        return new String(result);\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(txt.getBytes());\n            return Optional.of(md.digest().toString());\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        var result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replaceAll(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.reduce((a, b) => a + Math.abs(b - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter((s) => substring.includes(s));\n}\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((a, b) => a + b, 0);\n    const nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    let maxSoFar = -Infinity;\n    const result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\nexport const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\n",
            "export const stringXor = (a, b) => {\n    return a.split(\"\").map((x, i) => x === b[i] ? \"0\" : \"1\").join(\"\");\n};\n",
            "export const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestStr = strs[0];\n    for (const s of strs) {\n        if (s.length > longestStr.length) {\n            longestStr = s;\n        }\n    }\n    return longestStr;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    return Array(n + 1).fill(0).map((_, i) => i).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s) => {\n    const set = new Set();\n    for (const c of s) {\n        set.add(c.toLowerCase());\n    }\n    return set.size;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = { o: 4, o|: 2, \".\"|: 1 };\n    const notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]);\n};\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "const numDict = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n};\nexport const sortNumbers = (numbers) => {\n    const numList = numbers.split(\" \").filter((x) => x in numDict);\n    numList.sort((a, b) => numDict[b] - numDict[a]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Number.MAX_SAFE_INTEGER;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return new Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s) => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = Math.floor(n / divisor);\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = (counts[num] || 0) + 1;\n    }\n    const result = [];\n    for (const num in counts) {\n        if (counts[num] === 1) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "export const flipCase = (s) => {\n    const flipped = [];\n    for (const ch of s) {\n        if (!ch.isAlpha()) {\n            flipped.push(ch);\n        } else if (ch.isLowerCase()) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.isUpperCase()) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "export const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter((num) => num > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const findZero = (xs) => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = [...l].sort((a, b) => a - b);\n    return l.map((_, i) => sortedThird[i / 3] || l[i]);\n}\n",
            "export const listUnique = (l) => {\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l) => {\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"\").filter((c) => c === \"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.filter((e, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 2 === 0 ? sortedEven[i // 2] : e);\n}\n",
            "export const encodeCyclic = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n) => {\n    const f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n};\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i += 1) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n * n;\n}\n",
            "export const incrList = (l) => {\n    return l.map((i) => i + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = l.sort((a, b) => a - b);\n    return l.length % 2 === 0 ? (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2 : sl[Math.floor(l.length / 2)];\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(97 + ((ch.charCodeAt(0) - 97 + 5) % 26)));\n    }\n    return result.join(\"\");\n}\nexport const decodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(97 + ((ch.charCodeAt(0) - 97 + 21) % 26)));\n    }\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.replace(new RegExp(vowels, \"g\"), \"\");\n}\n",
            "export const belowThreshold = (l, t) => {\n    return l.every((x) => x < t);\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0).isEqualTo(new Set(s1));\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.slice(1).map((y, i) => y - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    return [...set1].filter(e => set2.has(e));\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    return Array.from({ length: n + 1 }).reduce((a, _, i) => a + i, 0);\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth++;\n        } else if (b === \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    return s.toUpperCase().split(\"\").reduce((a, b) => a + b.charCodeAt(0), 0);\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf('apples') - 1]);\n    const oranges = parseInt(words[words.indexOf('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = arr.filter((n) => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = Object.entries(freqs).filter(([k, v]) => v >= k);\n    return Math.max(...goodVals.map(([k]) => k), -1);\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((v, i) => q[i] === q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((a, b) => a + b.length, 0);\n    const cnt2 = lst2.reduce((a, b) => a + b.length, 0);\n    return lst1.filter((_, i) => cnt1 <= cnt2 && cnt1 > lst2[i].length);\n}\n",
            "export const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a = Math.floor(a / i);\n            }\n        }\n    }\n    return cnt === 3;\n};\nexport const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    const root = Math.floor(Math.pow(Math.abs(a), 1 / 3));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num) => {\n    return num.replace(/[^2357BD]/g, \"\").length;\n};\n",
            "export const decimalToBinary = (dec) => {\n    return dec.toString(2);\n}\n",
            "export const isHappy = (s) => {\n    const set = new Set();\n    while (true) {\n        let sum = 0;\n        for (const c of s) {\n            sum += Math.pow(c.charCodeAt() - 'a'.charCodeAt(), 2);\n        }\n        if (sum === 1) {\n            return true;\n        }\n        if (set.has(sum)) {\n            return false;\n        }\n        set.add(sum);\n        s = sum.toString();\n    }\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        switch (true) {\n            case g === 4.0:\n                result.push(\"A+\");\n                break;\n            case g > 3.7:\n                result.push(\"A\");\n                break;\n            case g > 3.3:\n                result.push(\"A-\");\n                break;\n            case g > 3.0:\n                result.push(\"B+\");\n                break;\n            case g > 2.7:\n                result.push(\"B\");\n                break;\n            case g > 2.3:\n                result.push(\"B-\");\n                break;\n            case g > 2.0:\n                result.push(\"C+\");\n                break;\n            case g > 1.7:\n                result.push(\"C\");\n                break;\n            case g > 1.3:\n                result.push(\"C-\");\n                break;\n            case g > 1.0:\n                result.push(\"D+\");\n                break;\n            case g > 0.7:\n                result.push(\"D\");\n                break;\n            case g > 0.0:\n                result.push(\"D-\");\n                break;\n            default:\n                result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "export const solve = (n) => {\n    return (n.toString(2)).slice(2);\n}\n",
            "export const add = (lst) => {\n    return lst.reduce((acc, cur, i) => {\n        if (i % 2 === 1 && cur % 2 === 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \").map((word) => {\n        return word.split(\"\").sort().join(\"\");\n    });\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n        }\n    });\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    const result = [];\n    for (const ch of s) {\n        const shifted = ch.charCodeAt() + 4;\n        if (shifted > 122) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = [...new Set(lst)].sort((a, b) => a - b);\n    return sl.length < 2 ? null : sl[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = s.split(/\\.[^.]*\\s*/).map(s => s.trim());\n    return sentences.reduce((acc, sentence) => {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n};\n",
            "export const anyInt = (x, y, z) => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (/^[a-zA-Z]$/.test(ch)) {\n            const ch1 = ch.toUpperCase()\n                if (vowels.indexOf(ch1) >= 0) {\n                    ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n                }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes));\n    return largest.split(\"\").reduce((acc, cur) => acc + Number(cur), 0);\n}\n",
            "export const checkDictCase = (d) => {\n    if (!d) {\n        return false;\n    }\n    return d.keys().every(c => c.toLowerCase() === c) || d.keys().every(c => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every((p) => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n};\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    return num >= 0 ? Math.round(num + 0.5) : Math.round(num - 0.5);\n}\n",
            "export const makeAPile = (n) => {\n    return Array(n).fill(0).map((_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s) => {\n    return s.split(/[, ]/).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 === x ? -1 : y - 1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2.0 + 0.5);\n    return rAvg.toString(2).padStart(m.toString(2).length, \"0\");\n}\n",
            "export const uniqueDigits = (x) => {\n    return x.filter((num) => {\n        const str = num.toString();\n        return str.split(\"\").every((digit) => digit % 2 !== 0);\n    }).sort((a, b) => a - b);\n}\n",
            "const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\nexport const byLength = (arr) => {\n    const sortedArr = arr.filter((x) => x >= 1 && x <= 9).sort((a, b) => b - a).reverse();\n    return sortedArr.map((x) => digitNames[x - 1]);\n}\n",
            "export const f = (n) => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((i, idx) => {\n        if (idx % 2 !== 0) {\n            return nums.slice(0, idx).reduce((acc, cur) => acc + cur, 0);\n        } else {\n            return nums.slice(0, idx).reduce((acc, cur) => acc * cur, 1);\n        }\n    });\n}\n",
            "export const evenOddPalindrome = (n) => {\n    let cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\nfunction isPalindrome(txt) {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const countNums = (arr) => {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n};\nexport const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((a, b) => a + parseInt(b), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n};\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join(\"\") === sortedArr.slice(0, arr.length - i).join(\"\") && arr.slice(0, i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\")) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const oddCnt = lst1.filter(num => num % 2 != 0).length;\n    const evenCnt = lst2.filter(num => num % 2 == 0).length;\n    return oddCnt >= evenCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = test.split(\" \").filter((w) => w.length > 0);\n    for (const w of words) {\n        freq[w] = (freq[w] || 0) + 1;\n    }\n    const result = {};\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const k in freq) {\n            if (freq[k] === maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s, c) => {\n    const s1 = s.replace(new RegExp(c, \"g\"), \"\");\n    return [s1, s1 === s1.split(\"\").reverse().join(\"\")];\n};\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = lst.reduce((acc, cur) => acc + (cur.charCodeAt(0) % 2 === 1), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    let result = 0;\n    for (const arr of grid) {\n        result += Math.ceil(arr.reduce((a, b) => a + b) / capacity);\n    }\n    return result;\n}\n",
            "export const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const countA = countOnes(a);\n        const countB = countOnes(b);\n        if (countA !== countB) {\n            return countB - countA;\n        }\n        return a - b;\n    });\n}\nfunction countOnes(num) {\n    return num.toString(2).split(\"0\").join(\"\").length;\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => consonants.includes(c.toLowerCase())).length === n);\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\nfunction check(s) {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true if depth === 0 else false;\n}\n",
            "export const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst) => {\n    return lst.reduce((acc, cur, i) => {\n        return acc + (i % 2 === 0 && cur % 2 !== 0 ? cur : 0);\n    }, 0);\n}\n",
            "export const addElements = (arr, k) => {\n    return arr.slice(0, k).filter(n => String(n).length <= 2).reduce((a, b) => a + b, 0);\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n >> 1;\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date) => {\n    if (!(date.length === 10 && date[2] === \"-\" && date[5] === \"-\")) {\n        return false;\n    }\n    const month = parseInt(date.substring(0, 2));\n    const day = parseInt(date.substring(3, 5));\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    return true;\n}\n",
            "export const splitWords = (txt) => {\n    if (txt.indexOf(\" \") !== -1) {\n        return txt.split(\" \");\n    } else if (txt.indexOf(\",\") !== -1) {\n        return txt.split(\",\");\n    } else {\n        const count = [...txt].filter((c) => c.toLowerCase().charCodeAt() % 2 === 0).length;\n        return [count.toString()];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    const maxFreq = Math.max(...Object.values(freq), 0);\n    return maxFreq <= 2;\n}\n",
            "export const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n};\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.some((n) => n < 0) ? -1 : 1;\n    return sign * arr.reduce((a, b) => a + b, 0);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1 + (i % 2 === 0 ? 0 : minVal));\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = [...n.toString()].filter(d => d % 2 === 1).map(d => parseInt(d));\n    return odds.length > 0 ? reduce((x, y) => x * y, odds, 1) : 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (ch === '[') {\n            openIdx.push(i);\n        } else if (ch === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    return lst.reduce((acc, cur) => acc + Math.pow(Math.ceil(cur), 2), 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].charCodeAt() <= 90 && last[0].charCodeAt() >= 65;\n};\n",
            "export const canArrange = (arr) => {\n    const idx = arr.slice(1).map((v, i) => v < arr[i]).lastIndexOf(false);\n    return idx === -1 ? -1 : idx;\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter((i) => i < 0);\n    const pos = lst.filter((i) => i > 0);\n    const maxNeg = Math.max(...neg);\n    const minPos = Math.min(...pos);\n    return [maxNeg, minPos];\n}\n",
            "export const compareOne = (a, b) => {\n    if (a === b) {\n        return null;\n    } else if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].isAlpha() || lst[0].length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.map((w) => {\n        if (isPrime(w.length)) {\n            return w;\n        }\n        return \"\";\n    }).join(\" \");\n}\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const orderByPoints = (nums) => {\n    return nums.sort((a, b) => {\n        const a_str = String(a);\n        const b_str = String(b);\n        const a_len = a_str.length;\n        const b_len = b_str.length;\n        const len_diff = a_len - b_len;\n        if (len_diff !== 0) {\n            return len_diff;\n        }\n        for (let i = 0; i < a_len; i++) {\n            const a_digit = Number(a_str[i]);\n            const b_digit = Number(b_str[i]);\n            if (a_digit !== b_digit) {\n                return b_digit - a_digit;\n            }\n        }\n        return 0;\n    });\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter((n) => n > 10 && n % 2 === 1 && odds.includes(n % 10)).length;\n};\n",
            "export const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n",
            "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0).sort((a, b) => {\n        if (a.length !== b.length) {\n            return b.length - a.length;\n        }\n        return a > b ? 1 : -1;\n    });\n    return result;\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1 >= i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    return lst.reduce((acc, cur) => acc + (cur * cur), 0)\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.toUpperCase() === c) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n};\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) === a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = String(Math.abs(num));\n    const even = ds.split(\"\").reduce((acc, d) => acc + (d.charCodeAt() % 2 === 0), 0);\n    return [even, ds.length - even];\n}\n",
            "const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\nconst numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\nexport const intToMiniRoman = (num) => {\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = Math.min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n            i--;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    if (!s.includes(/[a-zA-Z]/)) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    const result = [];\n    for (const ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            result.push(ch);\n        } else if (/[a-z]/.test(ch)) {\n            result.push(ch.toUpperCase());\n        } else {\n            result.push(ch.toLowerCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    const txtBytes = txt.encode();\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest(\"hex\");\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [...new Array(upper - lower + 1).keys()].filter(i => i % 2 === 0).map(i => i + lower);\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    for (ch in parenString) {\n        if (ch == '(') {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.removeAt(stk.lastIndex)\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - num.toInt().toDouble()\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    val deviation = numbers.sumBy { it - mean }\n    return deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in numbers.indices) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split(\" \")\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.reduce { acc, i -> acc * i }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MIN_VALUE\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = maxOf(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in 0 until s.length) {\n        if (isPalindrome(s.substring(i, s.length) + s.substring(0, i))) {\n            return s + s.substring(i, s.length).reversed()\n        }\n    }\n    return \"\"\n}\nfun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\n",
            "fun stringXor(a: String, b: String): String {\n    val result = StringBuilder()\n    for (i in a.indices) {\n        result.append(if (a[i] == b[i]) \"0\" else \"1\")\n    }\n    return result.toString()\n}\n",
            "fun longest(strs: List<String>): String? {\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) return a\n    return greatestCommonDivisor(b, a % b)\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val result = mutableListOf<String>()\n    for (i in s.indices) {\n        result.add(s.substring(0, i + 1))\n    }\n    return result\n}\n",
            "fun stringSequence(n: Int): String {\n    val result = StringBuilder()\n    for (i in 0..n) {\n        result.append(\"$i \")\n    }\n    return result.toString()\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    val set = mutableSetOf<Char>()\n    for (c in s.toLowerCase()) {\n        set.add(c)\n    }\n    return set.size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\" \")\n    return notes.map { durations[it]!! }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9,\n    )\n    val numList = numbers.split(\" \").filter { it in numDict }\n    numList.sortBy { numDict[it] }\n    return numList.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.MAX_VALUE\n    val closestPair = mutableListOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair.clear()\n            closestPair.add(sortedNumbers[i - 1])\n            closestPair.add(sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.min()!!\n    val maxNum = numbers.max()!!\n    if (minNum == maxNum) {\n        return listOf<Double>(0.0)\n    } else {\n        return numbers.map { it - minNum }.map { it / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (v in values) {\n        if (v is Int) {\n            result.add(v)\n        }\n    }\n    return result\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2..n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    var divisor = 2\n    val factors = mutableListOf<Int>()\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = mutableMapOf<Int, Int>()\n    for (num in numbers) {\n        counts[num] = (counts[num] ?: 0) + 1\n    }\n    val res = mutableListOf<Int>()\n    for ((num, count) in counts) {\n        if (count == 1) {\n            res.add(num)\n        }\n    }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = StringBuilder()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.append(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.append(ch.toUpperCase())\n        } else {\n            flipped.append(ch.toLowerCase())\n        }\n    }\n    return flipped.toString()\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in l) {\n        if (num > 0) {\n            result.add(num)\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..sqrt(n).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * Math.pow(x, i.toDouble())\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (x1 - x2 > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sortedBy { it / 3 }\n    return l.mapIndexed { i, e -> if (i % 3 == 0) sortedThird[i / 3] else e }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    val set = mutableSetOf<Int>()\n    for (e in l) {\n        if (!set.contains(e)) {\n            result.add(e)\n            set.add(e)\n        }\n    }\n    return result\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    var max = l[0]\n    for (e in l) {\n        if (e > max) {\n            max = e\n        }\n    }\n    return max\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 1..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += \"7\".toList().count { it == i % 10 }\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.sorted()\n    val result = mutableListOf<Int>()\n    for (i in l.indices) {\n        if (i % 2 == 0) {\n            result.add(sortedEven[i / 2])\n        } else {\n            result.add(l[i])\n        }\n    }\n    return result\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = mutableListOf<String>()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i, s.length))\n        } else {\n            result.add(s.substring(i + 1, i + 3))\n            result.add(s[i])\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun primeFib(n: Int): Int {\n    val f = intArrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        val tmp = f[0] + f[1]\n        f[0] = f[1]\n        f[1] = tmp\n        if (isPrime(tmp)) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..(n.toDouble().sqrt() + 1).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in (i + 1) until l.size) {\n            for (k in (j + 1) until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    var result = 0\n    for (i in 1..n) {\n        result += i * i\n    }\n    return result\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    var x = x\n    val digits = mutableListOf<Char>()\n    while (x > 0) {\n        digits.add(x % bas.toChar())\n        x /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble() * h.toDouble() / 2\n}\n",
            "fun fib4(n: Int): Int {\n    var fib = intArrayOf(0, 0, 2, 0)\n    for (i in 4..n) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    return if (l.size % 2 != 0) sl[l.size / 2] else (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    val sb = StringBuilder()\n    for (c in txt) {\n        if (c.isLetterOrDigit()) {\n            sb.append(c)\n        }\n    }\n    return sb.toString() == sb.reversed().toString()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = s.map { (it.toInt() - 97 + 5) % 26 + 97 }\n    return result.joinToString(\"\")\n}\nfun decodeShift(s: String): String {\n    val result = s.map { (it.toInt() - 97 + 21) % 26 + 97 }\n    return result.joinToString(\"\")\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return txt.filter { it !in vowels }.toString()\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zipWithNext { x, y -> y - x }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    val set1 = l1.toSet()\n    val set2 = l2.toSet()\n    return set1.intersect(set2).toList()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    var result = 0\n    for (i in 1..n) {\n        result += i\n    }\n    return result\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) return 0\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in s.indices) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reversed()\n    } else {\n        return xStr.substring(xStr.length - shift, xStr.length) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    var result = 0\n    for (c in s) {\n        if (c.isUpperCase()) {\n            result += c.toInt()\n        }\n    }\n    return result\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = mutableListOf<Int>()\n    for (n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n)\n        }\n    }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.min()!!\n    return listOf(minEven, arr.indexOf(minEven))\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        freqs[n] = (freqs[n] ?: 0) + 1\n    }\n    val goodVals = freqs.keys.filter { it >= k }\n    return if (goodVals.isEmpty()) -1 else goodVals.max()!!\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left++\n        if (left <= right) {\n            result.add(sl[right])\n            right--\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty()) return false\n    val isPalin = q.all { it == q[q.size - it - 1] }\n    val total = q.sum()\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumBy { it.length }\n    val cnt2 = lst2.sumBy { it.length }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2..a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..n.sqrt().toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val root = a.toDouble().pow(1.0 / 3.0).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    return num.count { it in \"2357BD\" }\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = Integer.toBinaryString(dec)\n    return \"db$binary$binary\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    var cur = s\n    var prev = s\n    while (cur != prev) {\n        prev = cur\n        cur = prev.replace(Regex(\"(.)\\\\1+\"), \"\")\n    }\n    return cur == \"1\"\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        when {\n            g == 4.0 -> result.add(\"A+\")\n            g > 3.7 -> result.add(\"A\")\n            g > 3.3 -> result.add(\"A-\")\n            g > 3.0 -> result.add(\"B+\")\n            g > 2.7 -> result.add(\"B\")\n            g > 2.3 -> result.add(\"B-\")\n            g > 2.0 -> result.add(\"C+\")\n            g > 1.7 -> result.add(\"C\")\n            g > 1.3 -> result.add(\"C-\")\n            g > 1.0 -> result.add(\"D+\")\n            g > 0.7 -> result.add(\"D\")\n            g > 0.0 -> result.add(\"D-\")\n            else -> result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..sqrt(length.toDouble()).toInt() + 1) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    return if (n == 1) 1 else 2 * 9 * (10.pow(n - 2))\n}\n",
            "fun solve(n: Int): String {\n    var digitsSum = 0\n    for (d in n.toString()) {\n        digitsSum += d.toInt()\n    }\n    return Integer.toBinaryString(digitsSum)\n}\n",
            "fun add(lst: List<Int>): Int {\n    var result = 0\n    for ((i, x) in lst.withIndex()) {\n        if (i % 2 == 1 && x % 2 == 0) {\n            result += x\n        }\n    }\n    return result\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { it.toList().sorted().joinToString(\"\") }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    coords.sortBy { it[0] }\n    return coords\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) return emptyList()\n    if ((arr[0] + arr.last()) % 2 == 0) return arr.sorted()\n    else return arr.sortedDescending()\n}\n",
            "fun encrypt(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        val shifted = (ch.toInt() + 4).toChar()\n        if (shifted > 'z'.toInt()) {\n            shifted = (shifted - 26).toChar()\n        }\n        result.add(shifted)\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.sorted()\n    if (sl.size < 2) {\n        return null\n    }\n    return sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.split(\"\\\\.|!|\\\\?\".toRegex())\n    return sentences.filter { it.length >= 2 }.count { it.startsWith(\"I \") }\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                ch1 = (ch1.toInt() + 2).toChar()\n            }\n            result.add(ch1)\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) {\n        return 0\n    }\n    val largest = primes.max()!!.toString()\n    return largest.map { it.toInt() }.sum()\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..(n.toDouble().pow(0.5) + 1).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun checkDictCase(d: Map<String, String>): Boolean {\n    return d.keys.all { it.isLowerCase() } || d.keys.all { it.isUpperCase() }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2..n) {\n        if (all { num % it != 0 }(primes)) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return if (a < 0) -(a % 10) * (b % 10) else a % 10 * b % 10\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filterIndexed { i, c -> i % 2 == 0 && c in vowels }.count()\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num >= 0) (num + 0.5).toInt() else (num - 0.5).toInt()\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (1..n).map { it + 2 * it }\n}\n",
            "fun wordsString(s: String): List<String> {\n    val regex = Regex(\"[, ]\")\n    return s.split(regex).filter { it.isNotEmpty() }\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) return -1\n    if (y % 2 == 0) return y\n    return if (x != y) y - 1 else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) return null\n    val rAvg = (m + n) / 2 + 0.5\n    return Integer.toBinaryString(rAvg.toInt())\n}\n",
            "fun uniqueDigits(x: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num)\n        }\n    }\n    return result.sorted()\n}\nfun allDigitsOdd(s: String): Boolean {\n    return s.all { it % 2 != 0 }\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = arrayOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.sorted().filter { 1 <= it && it <= 9 }.reversed()\n    return sortedArr.map { digitNames[it - 1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.map {\n        if (it % 2 != 0) {\n            nums.take(it).sum()\n        } else {\n            nums.take(it).fold(1) { acc, e -> acc * e }\n        }\n    }\n}\n",
            "fun evenOddPalindrome(n: Int): List<Int> {\n    var cnt = arrayOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\nfun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun countNums(arr: List<Int>): Int {\n    var result = 0\n    for (n in arr) {\n        if (digitsSum(n) > 0) {\n            result += 1\n        }\n    }\n    return result\n}\nfun digitsSum(n: Int): Int {\n    var n = n\n    if (n < 0) {\n        n = n * 2 + n / 10\n    }\n    var result = 0\n    while (n > 0) {\n        result += n % 10\n        n /= 10\n    }\n    return result\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size).equals(sortedArr.subList(0, arr.size - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size - i, arr.size))) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.count { it % 2 != 0 }\n    val evenCnt = lst2.count { it % 2 == 0 }\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = test.split(\" \").filter { it.isNotEmpty() }\n    for (w in words) {\n        freq[w] = (freq[w] ?: 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.isNotEmpty()) {\n        val maxFreq = freq.values.max()!!\n        for ((k, v) in freq) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it != c[0] }.joinToString(\"\")\n    return if (isPalindrome(s1)) listOf(s1, \"yes\") else listOf(s1, \"no\")\n}\nfun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.map { it.toInt() % 2 == 1 }.sum()\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = Math.min(curSum + n, 0)\n        minSum = Math.min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.min()!!\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var result = 0\n    grid.forEach {\n        result += ceil(it.sum() / capacity)\n    }\n    return result\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedBy { (it.toString(2).count { it == '1' }).toLong() to it }\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.isNotEmpty() }\n    return words.filter { it.length == n && it.all { it.toLowerCase() in consonants } }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1) {\n        if (word[i] in vowels && word[i - 1] !in vowels && word[i + 1] !in vowels) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\nfun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == \"(\") {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) {\n        return emptyList()\n    }\n    return arr.sorted().drop(arr.size - k).toList()\n}\n",
            "fun solution(lst: List<Int>): Int {\n    var result = 0\n    for ((i, x) in lst.withIndex()) {\n        if (i % 2 == 0 && x % 2 != 0) {\n            result += x\n        }\n    }\n    return result\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    var result = 0\n    for (n in arr.subList(0, k)) {\n        if (n.toString().length <= 2) {\n            result += n\n        }\n    }\n    return result\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf<Int>()\n    collatz.add(1)\n    var current = n\n    while (current != 1) {\n        if (current % 2 != 0) {\n            collatz.add(current)\n            current = 3 * current + 1\n        } else {\n            current = current / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    return when (m) {\n        1, 3, 5, 7, 8, 10, 12 -> d in 1..31\n        4, 6, 9, 11 -> d in 1..30\n        2 -> d in 1..29\n        else -> false\n    }\n}\n",
            "fun splitWords(txt: String): List<String> {\n    if (\" \" in txt) {\n        return txt.split(\" \")\n    } else if (\",\" in txt) {\n        return txt.split(\",\")\n    } else {\n        return listOf(txt.length.toString())\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    var last = lst[0]\n    for (i in 1 until lst.size) {\n        if (lst[i] < last) {\n            return false\n        }\n        last = lst[i]\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values.max()!! <= 2\n}\n",
            "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = Math.max(interval1[0], interval2[0])\n    val r = Math.min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..(n.toDouble().pow(0.5) + 1).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) return null\n    if (arr.contains(0)) return 0\n    var sign = -1\n    if (arr.size % 2 == 1) sign = 1\n    return sign * arr.map { it.abs() }.sum()\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i != 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = temp.min()!!\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(1 if (i % 2 == 0) else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    val seq = mutableListOf<Int>()\n    if (n == 0) {\n        seq.add(1)\n    } else {\n        seq.add(1)\n        seq.add(3)\n        for (i in 2..n) {\n            if (i % 2 == 0) {\n                seq.add((i / 2 + 1).toInt())\n            } else {\n                seq.add((seq[i - 1] + seq[i - 2] + (i + 3) / 2).toInt())\n            }\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().map { it.toInt() }.filter { it % 2 == 1 }\n    return odds.reduce { x, y -> x * y }\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for (i in s.indices) {\n        if (s[i] == '[') {\n            openIdx.add(i)\n        } else if (s[i] == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    var result = 0.0\n    for (n in lst) {\n        result += pow(ceil(n).toInt(), 2)\n    }\n    return result.toInt()\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    return txt.substring(txt.lastIndexOf(\" \") + 1).length == 1 && txt.substring(txt.lastIndexOf(\" \") + 1)[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    val idx = arr.indices.filter { arr[it] < arr[it - 1] }\n    return idx.max() ?: -1\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = neg.max() ?: null\n    val minPos = pos.min() ?: null\n    return listOf(maxNeg, minPos)\n}\n",
            "fun compareOne(a: Any, b: Any): Double? {\n    if (a is String && b is String) {\n        return a.toDouble() - b.toDouble()\n    } else if (a is Int && b is Int) {\n        return a.toDouble() - b.toDouble()\n    } else if (a is Double && b is Double) {\n        return a - b\n    } else {\n        throw RuntimeException(\"Type Error\")\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return Regex(\"\\\\s{3,}\").replace(txt, \"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || lst[0][0].isNotLetter() || lst[0].filter { it.isDigit() }.size > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i]\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    val result = mutableListOf<String>()\n    for (w in words) {\n        if (isPrime(w.length)) {\n            result.add(w)\n        }\n    }\n    return result.joinToString(\" \")\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..(n.toDouble().pow(0.5) + 1).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedBy { digitsSum(it) }\n}\nfun digitsSum(n: Int): Int {\n    var n = n\n    var result = 0\n    while (n > 0) {\n        result += n % 10\n        n /= 10\n    }\n    return result\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.filter { it > 10 && it % 2 == 1 && odds.contains(str(it)[0]) }.count()\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    var c = intArrayOf(0, 0, 0)\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2))) / 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = arrayListOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return emptyList()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        val t = l\n        l = r\n        r = t\n    }\n    if (l == r) {\n        return emptyList()\n    }\n    return names.subList(l + 1, r).toList()\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { it.length % 2 == 0 }\n    return result.sortedBy { it.length to it }\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2..sqrt(n).toInt() + 1) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    var result = 0.0\n    for (n in lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n\n        }\n    }\n    return result.toInt()\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for ((x, y) in game.withIndex()) {\n        result.add(abs(x - y))\n    }\n    return result\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = -Int.MAX_VALUE\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { it.isUpperCase() }\n        val lower = ext.count { it.isLowerCase() }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"${className}.${maxExt}\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in 0 until b.length) {\n        if (b.substring(i, b.length) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = abs(num).toString()\n    val even = ds.filter { it % 2 == 0 }.count()\n    return listOf(even, ds.length - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = arrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = listOf(a, b, c).sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = minOf(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    if (need <= remaining) {\n        return listOf(num + need, remaining - need)\n    } else {\n        return listOf(num + remaining, 0)\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i] pow nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            result.add(ch)\n        } else if (ch.isUpperCase()) {\n            result.add(ch.toLowerCase())\n        } else {\n            result.add(ch.toUpperCase())\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    val md5_hash = StringBuilder()\n    val txt_bytes = txt.toByteArray()\n    val md5_encoded = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n    val md5_hash = StringBuilder()\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    return (lower..upper).filter { it % 2 == 0 }.toList()\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    foreach ($numbers as $i => $n1) {\n        foreach (range($i + 1, count($numbers)) as $j) {\n            $n2 = $numbers[$j];\n            if (abs($n1 - $n2) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch == \"(\") {\n            $stk[] = $ch;\n            $currentGroup .= $ch;\n        } elseif ($ch == \")\") {\n            $stk = array_slice($stk, 0, -1);\n            $currentGroup .= $ch;\n            if (empty($stk)) {\n                $groups[] = $currentGroup;\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - (int) $num;\n}\n",
            "function belowZero($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_sum(array_map(function ($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers));\n    return $deviation / count($numbers);\n}\n",
            "function intersperse($numbers, $delimiter) {\n    $result = [];\n    foreach ($numbers as $i => $n) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($group[$i] == ')') {\n                $depth -= 1;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_reduce(\n        $numbers,\n        function ($x, $y) {\n            return $x * $y;\n        },\n        1\n    );\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = PHP_INT_MIN;\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return substr($s, $i) . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor ($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == $b[$i] ? \"0\" : \"1\");\n    }\n    return $result;\n}\n",
            "function longest ($strs) {\n    $longest = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest)) {\n            $longest = $s;\n        }\n    }\n    return $longest;\n}\n",
            "function greatestCommonDivisor($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence ($n) {\n    return implode(\" \", range(1, $n));\n}\n",
            "function countDistinctCharacters ($s) {\n    return count(array_unique(strtolower($s)));\n}\n",
            "function parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    return array_map(function ($note) use ($durations) {\n        return $durations[$note];\n    }, $notes);\n}\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if ($s[$i : $i + strlen($substring)] == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = array_filter(explode(\" \", $numbers), function ($x) use ($numDict) {\n        return isset($numDict[$x]);\n    });\n    usort($numList, function ($a, $b) use ($numDict) {\n        return $numDict[$b] - $numDict[$a];\n    });\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements ($numbers) {\n    $sortedNumbers = array_map(\n        function ($n) { return (float)$n; },\n        array_sort($numbers)\n    );\n    $minDiff = PHP_INT_MAX;\n    $closestPair = [];\n    for ($i = 1; $i < count($sortedNumbers); $i++) {\n        $diff = $sortedNumbers[$i] - $sortedNumbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$sortedNumbers[$i - 1], $sortedNumbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function ($num) use ($minNum, $maxNum) {\n            return ($num - $minNum) / ($maxNum - $minNum);\n        }, $numbers);\n    }\n}\n",
            "function filterIntegers ($values) {\n    return array_filter($values, function ($v) { return is_int($v); });\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n = intval($n / $divisor);\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        $counts[$num] = isset($counts[$num]) ? $counts[$num] + 1 : 1;\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase($s) {\n    $flipped = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } else {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode('', $flipped);\n}\n",
            "function concatenate($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function ($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "function getPositive ($l) {\n    return array_filter($l, function ($num) { return $num > 0; });\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    foreach ($xs as $i => $e) {\n        $res += $e * $x**$i;\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird ($l) {\n    $sortedThird = sort($l);\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $result[] = $sortedThird[$i / 3];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "function listUnique ($l) {\n    $result = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $result)) {\n            $result[] = $e;\n        }\n    }\n    return $result;\n}\n",
            "function maxElement ($l) {\n    return max($l);\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += str_count($i, \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = array_values(array_sort($l, SORT_NUMERIC));\n    return array_pad([], count($l), null);\n}\n",
            "function encodeCyclic($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode(\"\", $result);\n}\nfunction decodeCyclic($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero($l) {\n    $len = count($l);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            for ($k = $j + 1; $k < $len; $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n ** 2;\n}\n",
            "function incrList ($l) {\n    return array_map(function ($i) { return $i + 1; }, $l);\n}\n",
            "function pairsSumToZero($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "function changeBase($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = (string)($x % $bas);\n        $x = floor($x / $bas);\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[($i - 1) % 4] = array_sum($fib);\n    }\n    return $fib[($n - 1) % 4];\n}\n",
            "function median($l) {\n    $sl = array_reverse(sort($l));\n    return $sl[(count($l) - 1) / 2];\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\n",
            "function modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result[] = chr(((ord($s[$i]) - 97 + 5) % 26) + 97);\n    }\n    return implode($result);\n}\nfunction decodeShift ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result[] = chr(((ord($s[$i]) - 97 + 21) % 26) + 97);\n    }\n    return implode($result);\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return str_replace($vowels, \"\", $txt);\n}\n",
            "function belowThreshold ($l, $t) {\n    return count(array_filter($l, function ($x) { return $x < $t; })) == count($l);\n}\n",
            "function add ($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count(array_intersect(str_split($s0), str_split($s1))) == count(array_unique(str_split($s0)));\n}\n",
            "function fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            $depth += 1;\n        } elseif ($brackets[$i] == \">\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = array_map(function ($x, $y) {\n        return $y - $x;\n    }, $l, array_slice($l, 1));\n    return array_reduce($diff, function ($x, $y) {\n        return $x && ($y <= 0 || $y >= 0);\n    }, true);\n}\n",
            "function common ($l1, $l2) {\n    return array_values(array_intersect(array_values($l1), array_values($l2)));\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n            $n = floor($n / $i);\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return array_sum(range(0, $n));\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '(') {\n            $depth++;\n        } elseif ($brackets[$i] == ')') {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strtolower($s[$i]) == $vowels || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $x_str = (string)$x;\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "function digitSum ($s) {\n    return array_sum(array_map('ord', array_filter(str_split($s), function ($c) { return $c >= 'A' && $c <= 'Z'; })));\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[array_search('apples', $words) - 1]);\n    $oranges = intval($words[array_search('oranges', $words) - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck($arr) {\n    $evens = array_filter($arr, function ($n) { return $n % 2 == 0; });\n    $minEven = min($evens);\n    return [$minEven, array_search($minEven, $arr)];\n}\n",
            "function search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        $freqs[$n] = isset($freqs[$n]) ? $freqs[$n] + 1 : 1;\n    }\n    $goodVals = array_keys($freqs, max($freqs));\n    return max($goodVals, default=-1);\n}\n",
            "function strangeSortList ($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    foreach (range(0, count($q) - 1) as $i) {\n        $isPalin = $isPalin && $q[$i] == $q[count($q) - $i - 1];\n    }\n    $total = array_sum($q);\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < floor(count($arr) / 2); $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map('strlen', $lst1));\n    $cnt2 = array_sum(array_map('strlen', $lst2));\n    return $lst1 if ($cnt1 <= $cnt2 else $lst2);\n}\n",
            "function isMultiplyPrime ($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (is_prime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube($a) {\n    $a = abs($a);\n    $root = intval(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey ($num) {\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], ['2', '3', '5', '7', 'B', 'D'])) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function decimalToBinary($dec) {\n    $binary = base_convert($dec, 10, 2);\n    return \"db\" . $binary . \"db\";\n}\n",
            "function isHappy ($s) {\n    $s = str_split($s);\n    $visited = [];\n    $cur = 0;\n    while (true) {\n        $cur = 0;\n        foreach ($s as $c) {\n            $cur += $c * $c;\n        }\n        if ($cur == 1) {\n            return true;\n        }\n        if (isset($visited[$cur])) {\n            return false;\n        }\n        $visited[$cur] = 1;\n    }\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        switch ($g) {\n            case 4.0:\n                $result[] = \"A+\";\n                break;\n            case 3.7:\n            case 3.3:\n            case 3.0:\n                $result[] = \"A\";\n                break;\n            case 2.7:\n            case 2.3:\n            case 2.0:\n                $result[] = \"B\";\n                break;\n            case 1.7:\n            case 1.3:\n            case 1.0:\n                $result[] = \"C\";\n                break;\n            case 0.7:\n            case 0.3:\n            case 0.0:\n                $result[] = \"D\";\n                break;\n            default:\n                $result[] = \"E\";\n                break;\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)) + 1; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    return $n == 1 ? 1 : 2 * 9 * (10 ** ($n - 2));\n}\n",
            "function solve ($n) {\n    $digitsSum = 0;\n    for ($i = 0; $i < strlen($n); $i++) {\n        $digitsSum += intval(substr($n, $i, 1));\n    }\n    return decbin($digitsSum);\n}\n",
            "function add($lst) {\n    return array_sum(array_filter(array_column($lst, null, 1), function ($v) {\n        return $v % 2 == 0 && $v % 2 == 1;\n    }));\n}\n",
            "function antiShuffle ($s) {\n    $words = array_map(\n        function ($word) {\n            return strrev($word);\n        },\n        explode(\" \", $s)\n    );\n    return implode(\" \", $words);\n}\n",
            "function getRow($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $e) {\n            if ($e == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function ($a, $b) {\n        return $a[0] == $b[0] ? -$a[1] + $b[1] : $a[0] - $b[0];\n    });\n    return $coords;\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        return array_reverse(sort($arr));\n    } else {\n        return sort($arr);\n    }\n}\n",
            "function encrypt ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $shifted = ord($s[$i]) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return implode('', $result);\n}\n",
            "function nextSmallest($lst) {\n    $sl = array_unique(sort($lst));\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "function isBored ($s) {\n    $sentences = explode(\".\", $s);\n    $result = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && substr($sentence, 0, 2) == \"I \") {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = strtoupper($ch) if strtolower($ch) === $ch else strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd($lst) {\n    $primes = array_filter($lst, function ($n) {\n        return isPrime($n);\n    });\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = (string)max($primes);\n    return array_sum(array_map('intval', str_split($largest)));\n}\n",
            "function checkDictCase ($d) {\n    if (!$d) {\n        return false;\n    }\n    return count(array_filter(array_keys($d), function ($c) { return strtolower($c) === $c; })) > 0 && count(array_filter(array_keys($d), function ($c) { return strtoupper($c) === $c; })) > 0;\n}\n",
            "function countUpTo($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        if (true === array_reduce($primes, function ($carry, $prime) use ($num) {\n            return $carry && $num % $prime !== 0;\n        }, true)) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i % 2 == 0 && strpos($vowels, $s[$i]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "function makeAPile ($n) {\n    return array_merge([$n + 2 * $i for $i in range($n)], []);\n}\n",
            "function wordsString ($s) {\n    return explode(', ', preg_replace('/[^a-zA-Z0-9]+/', ' ', $s));\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1 === $x ? -1 : $y - 1;\n}\n",
            "function roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = int(($m + $n) / 2.0 + 0.5);\n    return bin($rAvg)[2:];\n}\n",
            "function allDigitsOdd($s) {\n    return array_reduce(str_split($s), function ($carry, $digit) {\n        return $carry && $digit % 2 != 0;\n    }, true);\n}\nfunction uniqueDigits($x) {\n    return array_values(array_filter(array_map('strval', $x), function ($num) {\n        return allDigitsOdd($num);\n    }));\n}\n",
            "function byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_reverse(array_filter(range(1, 9), function ($x) use ($arr) { return in_array($x, $arr); }));\n    return array_map(function ($x) use ($digitNames) { return $digitNames[$x-1]; }, $sortedArr);\n}\n",
            "function f($n) {\n    $nums = range(1, $n);\n    $result = [];\n    foreach ($nums as $i) {\n        $result[] = $i;\n        if ($i % 2 != 0) {\n            $result[] = array_sum($nums);\n        } else {\n            $result[] = array_product(array_slice($nums, 0, $i));\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome($i)) {\n            $cnt[($i % 2) == 0 ? 0 : 1]++;\n        }\n    }\n    return $cnt;\n}\n",
            "function countNums ($arr) {\n    $result = 0;\n    foreach ($arr as $n) {\n        $sum = 0;\n        $nStr = (string)$n;\n        for ($i = 0; $i < strlen($nStr); $i++) {\n            $sum += (int)$nStr[$i];\n        }\n        if ($sum > 0) {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function moveOneBall ($arr) {\n    $sortedArr = $arr;\n    sort($sortedArr);\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (array_slice($arr, $i) == array_slice($sortedArr, $len - $i) && array_slice($arr, 0, $i) == array_slice($sortedArr, 0, $len - $i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange($lst1, $lst2) {\n    $oddCnt = count(array_filter($lst1, function($num) { return $num % 2 != 0; }));\n    $evenCnt = count(array_filter($lst2, function($num) { return $num % 2 == 0; }));\n    return \"YES\" if ($evenCnt >= $oddCnt) else \"NO\";\n}\n",
            "function histogram($test) {\n    $freq = [];\n    $words = explode(' ', $test);\n    foreach ($words as $w) {\n        $freq[$w] = isset($freq[$w]) ? $freq[$w] + 1 : 1;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction reverseDelete($s, $c) {\n    $s1 = str_replace($c, \"\", $s);\n    return [$s1, \"yes\" == isPalindrome($s1) ? \"yes\" : \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            $n += ord($num[$i]) % 2 == 1;\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", strval($n), $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}\n",
            "function maxFill($grid, $capacity) {\n    $result = 0;\n    foreach ($grid as $arr) {\n        $result += ceil(array_sum($arr) / $capacity);\n    }\n    return $result;\n}\n",
            "function countOnes($num) {\n    return substr_count(decbin($num), \"1\");\n}\nfunction sortArray($arr) {\n    usort($arr, function ($a, $b) {\n        $c = countOnes($a) - countOnes($b);\n        return $c ?: $a - $b;\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $w) {\n        if (strlen($w) > 0) {\n            $result[] = $w;\n        }\n    }\n    return array_filter($result, function ($w) use ($consonants, $n) {\n        return strlen(preg_replace(\"/[^\" . $consonants . \"]/\", \"\", $w)) == $n;\n    });\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function matchParens ($lst) {\n    $s1 = implode($lst[0], $lst[1]);\n    $s2 = implode($lst[1], $lst[0]);\n    return \"Yes\" if check($s1) || check($s2) else \"No\";\n}\nfunction check ($s) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == \"(\") {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return true if $depth == 0 else false;\n}\n",
            "function maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    rsort($arr);\n    return array_slice($arr, -$k);\n}\n",
            "function solution ($lst) {\n    $result = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2 != 0) {\n            $result += $x;\n        }\n    }\n    return $result;\n}\n",
            "function addElements ($arr, $k) {\n    return array_sum(array_filter(array_slice($arr, 0, $k), function ($n) { return strlen($n) <= 2; }));\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = (int)($n / 2);\n        }\n    }\n    return array_reverse(array_unique($collatz));\n}\n",
            "function validDate ($date) {\n    if (strlen($date) !== 10 || $date[2] !== '-' || $date[5] !== '-') {\n        return false;\n    }\n    $m = (int)substr($date, 0, 2);\n    $d = (int)substr($date, 3, 2);\n    if ($m in [1, 3, 5, 7, 8, 10, 12] && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if ($m in [4, 6, 9, 11] && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m === 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        return [strval(strlen([$c for $c in $txt if cpctype($c) == 0 && ord($c) % 2 == 0]))];\n    }\n}\n",
            "function isSorted($lst) {\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = isset($freq[$i]) ? $freq[$i] + 1 : 1;\n    }\n    $max = max($freq.values(), default=0);\n    return $max <= 2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return \"YES\" if ($length > 0 && isPrime($length)) else \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = -1;\n    if (count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1) {\n        $sign = 1;\n    }\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($minVal, min($temp));\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 if ($i % 2 == 0 else $minVal);\n    }\n    return $result;\n}\n",
            "function tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = ($i / 2 + 1);\n        } else {\n            $seq[] = ($seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2);\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = array_filter(str_split($n), function ($d) { return ($d % 2) == 1; });\n    return array_reduce($odds, function ($x, $y) { return $x * $y; }, 1) if count($odds) > 0 else 0;\n}\n",
            "function isNested ($s) {\n    $open_idx = [];\n    $close_idx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '[') {\n            $open_idx[] = $i;\n        } elseif ($s[$i] == ']') {\n            $close_idx[] = $i;\n        }\n    }\n    $close_idx = array_reverse($close_idx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($close_idx);\n    foreach ($open_idx as $idx) {\n        if ($i < $l && $idx < $close_idx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    return array_sum(array_map(function ($n) { return pow(ceil($n), 2); }, $lst));\n}\n",
            "function checkIfLastCharIsALetter($txt) {\n    if (empty($txt)) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt, ' ') + 1);\n    return strlen($last) == 1 && ctype_alpha($last[0]);\n}\n",
            "function canArrange($arr) {\n    $idx = array_keys(array_filter(array_map(function ($i) use ($arr) {\n        return $arr[$i] < $arr[$i - 1];\n    }, range(1, count($arr)))));\n    return max($idx, default=-1);\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($i) { return $i < 0; });\n    $pos = array_filter($lst, function ($i) { return $i > 0; });\n    $maxNeg = max($neg) ?? null;\n    $minPos = min($pos) ?? null;\n    return [$maxNeg, $minPos];\n}\n",
            "function compareOne ($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    return preg_replace('/\\\\s{3,}/', '-', $txt);\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || strlen(preg_replace(\"/[0-9]/\", \"\", $lst[0])) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += $lst[$i] * $lst[$i];\n        } elseif ($i % 4 == 0) {\n            $result += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence($sentence) {\n    $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words as $w) {\n        if (isPrime($w)) {\n            $result[] = $w;\n        }\n    }\n    return implode(\" \", $result);\n}\n",
            "function simplify($x, $n) {\n    $xs = explode('/', $x);\n    $ns = explode('/', $n);\n    $num = (int) $xs[0] * (int) $ns[0];\n    $den = (int) $xs[1] * (int) $ns[1];\n    return $num % $den == 0;\n}\n",
            "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split($nStr)));\n    } else {\n        return (intval($nStr[0]) * 2 + digitsSum(abs($n)));\n    }\n}\nfunction orderByPoints($nums) {\n    usort($nums, function ($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $nums;\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, $n) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function getMaxTriples($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[($a % 3)] += 1;\n    }\n    return ($c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6);\n}\n",
            "function bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l === false || $r === false) {\n        return [];\n    }\n    if ($l > $r) {\n        $l = $r;\n        $r = $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    usort($result, function ($a, $b) {\n        return strlen($a) == strlen($b) ? strcmp($a, $b) : strlen($a) <=> strlen($b);\n    });\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; floor($i * sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && $n % 2 == 1) {\n            $result += $n * $n;\n        }\n    }\n    return $result;\n}\n",
            "function compare ($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -1;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = substr_count(strtoupper($ext), \"A\");\n        $lower = substr_count(strtoupper($ext), \"a\");\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . \".\" . $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, substr($b, $i) . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = strval($num);\n    $even = substr_count($ds, '0');\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax ($words) {\n    $maxCnt = 0;\n    $maxW = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique($w));\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        } elseif ($cnt == $maxCnt) {\n            $maxW = min($maxW, $w);\n        }\n    }\n    return $maxW;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == '**') {\n            $nums[$i] = bcpow($nums[$i], $nums[$i + 1]);\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == '*') {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n            $i--;\n        } elseif ($ops[$i] == '//') {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == '+') {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n            $i--;\n        } elseif ($ops[$i] == '-') {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i--;\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "function solve ($s) {\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (!preg_match('/[a-zA-Z]/', $s[$i])) {\n            $result[] = $s[$i];\n        } elseif (strtolower($s[$i]) == $s[$i]) {\n            $result[] = strtoupper($s[$i]);\n        } else {\n            $result[] = strtolower($s[$i]);\n        }\n    }\n    return implode('', $result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (empty($txt)) {\n        return null;\n    }\n    $md5_hash = hash_init('md5');\n    hash_update($md5_hash, $txt);\n    $md5_encoded = hash_final($md5_hash);\n    return $md5_encoded;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return array_filter(range($lower, $upper), function ($i) { return $i % 2 == 0; });\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    for i in 0...numbers.length\n        for j in (i+1)...numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    return false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(/\\s/, \"\")\n    for ch in parens\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop()\n            current_group += ch\n            if stk.empty?\n                groups << current_group\n                current_group = \"\"\n            end\n        end\n    end\n    return groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = numbers.sum / numbers.length\n    deviation = numbers.inject(0) {|sum, x| sum + (x - mean).abs}\n    deviation / numbers.length\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |n, i|\n        if i != 0\n            result << delimiter\n        end\n        result << n\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(' ')\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == '('\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elsif ch == ')'\n                depth -= 1\n        end\n        result.append(max_depth)\n    end\n    return result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select {|s| s.include?(substring)}\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce(:*)\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s[0...(s.length / 2)].reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0...s.length\n        if is_palindrome(s[i...s.length])\n            return s + s[0...i].reverse\n        end\n    end\n    \"\"\nend\n",
            "def string_xor(a, b)\n    a.chars.zip(b.chars).map {|x, y| x == y ? \"0\" : \"1\"}.join\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    strs.each do |s|\n        if s.length > longest_s.length\n            longest_s = s\n        end\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    return b if b == 0\n    greatest_common_divisor(b, a % b)\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    (0..s.length).each do |i|\n        prefixes << s[0..i]\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n    \" \".join([i.to_s for i in (0..n)])\nend\n",
            "def count_distinct_characters(s)\n    s.downcase.chars.uniq.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    notes.map {|note| durations[note]}\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    (0..s.length - substring.length).each do |i|\n        if s[i...i + substring.length] == substring\n            times += 1\n        end\n    end\n    times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    }\n    num_list = numbers.split(\" \").select {|x| num_dict.has_key?(x)}\n    num_list.sort_by {|x| num_dict[x]}\n    return num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    for i in 1..(numbers.size - 1)\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    return [0.0] * numbers.length if min_num == max_num\n    return numbers.map {|num| (num - min_num) / (max_num - min_num)}\nend\n",
            "def filter_integers(values)\n    values.select {|x| x.is_a?(Integer)}\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    (2..n).each do |i|\n        return n / i if n % i == 0\n    end\n    1\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    return factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = {}\n    numbers.each do |num|\n        counts[num] = counts.get(num, 0) + 1\n    end\n    numbers.select {|num| counts[num] == 1}\nend\n",
            "def flip_case(s)\n    flipped = []\n    s.each_char do |ch|\n        if not ch.isalpha\n            flipped << ch\n        elsif ch.islower\n            flipped << ch.upcase\n        elsif ch.isupper\n            flipped << ch.downcase\n        end\n    end\n    flipped.join\nend\n",
            "def concatenate(strs)\n    strs.join(\"\")\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    strs.select {|s| s.startswith?(prefix_str)}\nend\n",
            "def get_positive(l)\n    l.select {|num| num > 0}\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).to_i).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    for i in 0...xs.length\n        res += xs[i] * x**i\n    end\n    res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = l.sort_by {|e| e}\n    return sorted_third.each_slice(3).map {|e| e[0]}\nend\n",
            "def list_unique(l)\n    l.uniq.sort\nend\n",
            "def max_element(l)\n    l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    (1..n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    cnt\nend\n",
            "def sort_even(l)\n    sorted_even = l.sort_by {|e| e}\n    return [sorted_even[i / 2] if i % 2 == 0 else l[i] for i in 0...l.length]\nend\n",
            "def encode_cyclic(s)\n    result = []\n    s.chars.each_slice(3).each do |chunk|\n        if chunk.size == 3\n            result << chunk[1]\n            result << chunk[0]\n        else\n            result << chunk[0]\n        end\n    end\n    return result.join\nend\ndef decode_cyclic(s)\n    return encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).to_i).each do |i|\n        return false if n % i == 0\n    end\n    return true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        cnt += 1 if is_prime(f[1])\n    end\n    f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    for i in 0...l.length\n        for j in (i + 1)...l.length\n            for k in (j + 1)...l.length\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    l.map {|i| i + 1}\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    l.each do |num|\n        if seen.include?(-num)\n            return true\n        end\n        seen << num\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    return \"0\" if x == 0\n    digits = []\n    while x > 0\n        digits.push(x % bas.to_s)\n        x /= bas\n    end\n    digits.join(\"\")\nend\n",
            "def triangle_area(a, h)\n    a * h / 2.0\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    (4...n + 1).each do |i|\n        fib[i % 4] = fib.sum\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n    sl = l.sort\n    return sl[(l.size - 1) / 2] if l.size % 2 != 0\n    return (sl[(l.size - 1) / 2] + sl[(l.size - 1) / 2 - 1]) / 2\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\n",
            "def modp(n, p)\n    ret = 1\n    (1..n).each do |_|\n        ret = (ret * 2) % p\n    end\n    ret\nend\n",
            "def encode_shift(s)\n    result = s.chars.map {|ch| chr(((ord(ch) - 97 + 5) % 26) + 97)}\n    result.join\nend\ndef decode_shift(s)\n    result = s.chars.map {|ch| chr(((ord(ch) - 97 + 21) % 26) + 97)}\n    result.join\nend\n",
            "def remove_vowels(txt)\n    txt.gsub(/[aeiouAEIOU]/, '')\nend\n",
            "def below_threshold(l, t)\n    l.all? {|x| x < t}\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.to_set == s1.chars.to_set\nend\n",
            "def fib(n)\n    return n if n <= 1\n    fib(n - 1) + fib(n - 2)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n",
            "def monotonic(l)\n    diff = l[1..-1].zip(l).map {|x, y| y - x}\n    return diff.all? {|x| x <= 0} || diff.all? {|x| x >= 0}\nend\n",
            "def common(l1, l2)\n    l1.intersection(l2)\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n    n\nend\n",
            "def sum_to_n(n)\n    (n + 1).to_i.step(1).inject(0, :+)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def derivative(xs)\n    result = []\n    for i in 1..(xs.length - 1)\n        result << xs[i] * i\n    end\n    return result\nend\n",
            "def fibfib(n)\n    return 0 if n <= 1\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    s.length.times do |i|\n        if vowels.include?(s[i].downcase) || (i == s.length - 1 && s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        x_str[::-1]\n    else\n        x_str[-shift..-1] + x_str[0...-shift]\n    end\nend\n",
            "def digit_sum(s)\n    s.split('').map(&:upcase).map(&:to_i).sum\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index(\"apples\") - 1].to_i\n    oranges = words[words.index(\"oranges\") - 1].to_i\n    n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select {|n| n % 2 == 0}\n    return [] if evens.empty?\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = {}\n    lst.each do |n|\n        freqs[n] = freqs.get(n, 0) + 1\n    end\n    good_vals = freqs.select {|k, v| v >= k}\n    good_vals.max.first if good_vals.any?\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, lst.size - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    return result\nend\n",
            "def triangle_area(a, b, c)\n    return -1.0 if a + b <= c || a + c <= b || b + c <= a\n    s = (a + b + c) / 2.0\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\nend\n",
            "def will_it_fly(q, w)\n    return false if q.length == 0\n    is_palin = q.all? {|i| q[i] == q[q.length - i - 1]}\n    total = q.sum\n    return is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    for i in 0...arr.length / 2\n        if arr[i] != arr[arr.length - i - 1]\n            ans += 1\n        end\n    end\n    return ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.inject(0) {|sum, s| sum + s.length}\n    cnt2 = lst2.inject(0) {|sum, s| sum + s.length}\n    return lst1 if cnt1 <= cnt2\n    lst2\nend\n",
            "def is_multiply_prime(a)\n    cnt = 0\n    for i in 2..a\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n            break if cnt == 3\n        end\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    return true if n < 2\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    num.chars.count {|x| x == \"2\" || x == \"3\" || x == \"5\" || x == \"7\" || x == \"B\" || x == \"D\"}\nend\n",
            "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    return \"db#{binary}db\"\nend\n",
            "def is_happy(s)\n    return false if s.length < 3\n    for i in 0...s.length - 2\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    return true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    for g in grades\n        case g\n        when 4.0 then result << \"A+\"\n        when 4.0..3.7 then result << \"A\"\n        when 3.7..3.3 then result << \"A-\"\n        when 3.3..3.0 then result << \"B+\"\n        when 3.0..2.7 then result << \"B\"\n        when 2.7..2.3 then result << \"B-\"\n        when 2.3..2.0 then result << \"C+\"\n        when 2.0..1.7 then result << \"C\"\n        when 1.7..1.3 then result << \"C-\"\n        when 1.3..1.0 then result << \"D+\"\n        when 1.0..0.7 then result << \"D\"\n        when 0.7..0.0 then result << \"D-\"\n        else result << \"E\"\n        end\n    end\n    return result\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..Math.sqrt(length).to_i).each do |i|\n        return false if length % i == 0\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    return 1 if n == 1\n    return 2 * 9 * (10 ** (n - 2))\nend\n",
            "def solve(n)\n    digits_sum = 0\n    str_n = n.to_s\n    str_n.each_byte do |d|\n        digits_sum += d.to_i\n    end\n    bin(digits_sum)[2..-1]\nend\n",
            "def add(lst)\n    lst.each_with_index.filter {|x, i| i % 2 == 1 && x % 2 == 0}.sum\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \").map {|word| word.chars.sort.join}\n    words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |e, j|\n            if e == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort_by! {|a| [a[0], -a[1]]}\n    return coords\nend\n",
            "def sort_array(arr)\n    return [] if arr.size == 0\n    return arr.sort.reverse if (arr[0] + arr[-1]) % 2 == 0\n    return arr.sort\nend\n",
            "def encrypt(s)\n    result = []\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result << ch = shifted.chr\n    end\n    result.join\nend\n",
            "def next_smallest(lst)\n    sl = lst.sort\n    return nil if sl.length < 2\n    sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    sentences.count {|sentence| sentence.size >= 2 && sentence[0..1] == \"I \"}\nend\n",
            "def any_int(x, y, z)\n    x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer) &&\n        (x + y == z || x + z == y || y + z == x)\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    message.each_char do |ch|\n        if ch.isalpha?\n            ch1 = ch.upcase! if ch.islower?\n            if vowels.include?(ch1)\n                ch1 = chr(ch1.ord + 2)\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    result.join\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).to_i).each do |i|\n        return false if n % i == 0\n    end\n    return true\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    return 0 if primes.empty?\n    largest = primes.max.to_s\n    sum = 0\n    largest.each_char do |digit|\n        sum += digit.to_i\n    end\n    return sum\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    return true if d.values.all? {|v| v.downcase == v} || d.values.all? {|v| v.upcase == v}\n    false\nend\n",
            "def count_up_to(n)\n    primes = []\n    (2..n).each do |num|\n        if primes.all? {|p| num % p != 0}\n            primes << num\n        end\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    a.abs % 10 * b.abs % 10\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    s.chars.select {|c| c.upcase == c && vowels.include?(c)}.count\nend\n",
            "def closest_integer(value)\n    num = Float(value)\n    num >= 0 ? (num + 0.5).to_i : (num - 0.5).to_i\nend\n",
            "def make_a_pile(n)\n    [n + 2 * i for i in 0...n]\nend\n",
            "def words_string(s)\n    s.split(/[, ]/).select {|w| w.length > 0}\nend\n",
            "def choose_num(x, y)\n    return -1 if x > y\n    return y if y % 2 == 0\n    return y - 1 if x != y\n    return -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = (m + n) / 2.0 + 0.5\n    bin(r_avg)[2..-1]\nend\n",
            "def all_digits_odd(s)\n    s.each_byte.all? {|digit| digit % 2 != 0}\nend\ndef unique_digits(x)\n    x.sort_by {|num| num.to_s}.select {|num| all_digits_odd(num.to_s)}\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.sort {|a, b| b <=> a}\n    sorted_arr.select {|x| 1 <= x <= 9}.map {|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    return nums.map {|i| i if i % 2 != 0 ? nums.sum(0, i) : nums.reduce(1, :*)}\nend\n",
            "def is_palindrome(txt)\n    txt == txt[::-1]\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    (1...n + 1).each do |i|\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    n_str.to_i.sum {|d| d.to_i} if n >= 0\n    n_str.to_i.to_i[0, 2] * 2 + digits_sum(n.abs) if n < 0\nend\ndef count_nums(arr)\n    arr.count {|n| digits_sum(n) > 0}\nend\n",
            "def move_one_ball(arr)\n    return true if arr.empty?\n    sorted_arr = arr.sort\n    for i in 0...arr.size\n        return true if arr[i...].sort == sorted_arr[0...arr.size - i] and arr[0...i].sort == sorted_arr[arr.size - i..-1]\n    end\n    false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count {|num| num % 2 != 0}\n    even_cnt = lst2.count {|num| num % 2 == 0}\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split(\" \")\n    words.each do |w|\n        freq[w] = freq[w] ? freq[w] + 1 : 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        freq.each do |k, v|\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s[s.size / 2..-1]\nend\ndef reverse_delete(s, c)\n    s1 = s.chars.select {|ch| ch != c}.join\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = lst.map {|d| d.ord % 2 == 1}.sum\n        rs = \"the number of odd elements in the string i of the input.\"\n        result << rs.sub(\"i\", n.to_s)\n    end\n    result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    min_sum = [min_sum, nums.min].min\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map {|arr| ceil(arr.sum / capacity)}.sum\nend\n",
            "def count_ones(num)\n    num.to_s(2).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort_by {|x| [count_ones(x), x]}\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").select {|w| w.length > 0}\n    words.select {|w| w.length == n}\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in (word.length - 2).downto(1)\n        if vowels.include?(word[i]) and not vowels.include?(word[i - 1]) and not vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "def match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\nend\ndef check(s)\n    depth = 0\n    for ch in s\n        if ch == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return true if depth == 0 else false\nend\n",
            "def maximum(arr, k)\n    return [] if k == 0\n    arr.sort[-k..-1]\nend\n",
            "def solution(lst)\n    sum = 0\n    lst.each_with_index do |x, i|\n        sum += x if i % 2 == 0 and x % 2 != 0\n    end\n    sum\nend\n",
            "def add_elements(arr, k)\n    arr.first(k).select {|n| n.to_s.length <= 2}.sum\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz << n\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    collatz.sort\nend\n",
            "def valid_date(date)\n    return false if date.length != 10 or date[2] != \"-\" or date[5] != \"-\"\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    return true if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31\n    return true if m in [4, 6, 9, 11] and d >= 1 and d <= 30\n    return true if m == 2 and d >= 1 and d <= 29\n    return false\nend\n",
            "def split_words(txt)\n    if txt.include?(\" \")\n        return txt.split(\" \")\n    elsif txt.include?(\",\")\n        return txt.split(\",\")\n    else\n        return [txt.length.to_s]\n    end\nend\n",
            "def is_sorted(lst)\n    return lst.each_cons(2).all? {|a, b| a <= b} if lst.size > 1\n    return true\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).to_i).each do |i|\n        return false if n % i == 0\n    end\n    return true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    sign = -1 if arr.count {|n| n < 0} % 2 == 1\n    return sign * arr.sum {|n| n.abs}\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp.push(grid[i - 1][j])\n                end\n                if j != 0\n                    temp.push(grid[i][j - 1])\n                end\n                if i != n - 1\n                    temp.push(grid[i + 1][j])\n                end\n                if j != n - 1\n                    temp.push(grid[i][j + 1])\n                end\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    for i in 0...k\n        result.push(1 if i % 2 == 0 else min_val)\n    end\n    return result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3]\n    (2...n + 1).each do |i|\n        seq << (i % 2 == 0 ? (i / 2 + 1) : (seq[i - 1] + seq[i - 2] + (i + 3) / 2))\n    end\n    seq\nend\n",
            "def digits(n)\n    odds = []\n    str_n = n.to_s\n    str_n.each_char do |d|\n        odds << d.to_i if d.to_i % 2 == 1\n    end\n    return odds.inject(1, :*) if odds.length > 0 else 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    for i in 0...s.length\n        ch = s[i]\n        if ch == '['\n            open_idx.push(i)\n        elsif ch == ']'\n            close_idx.push(i)\n        end\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    for idx in open_idx\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    return cnt >= 2\nend\n",
            "def sum_squares(lst)\n    lst.map {|n| ceil(n) * ceil(n)}.sum\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    txt.rindex(' ') + 1 == txt.length ? txt[txt.rindex(' ') + 1].isalpha? : false\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.length <= 1\n    idx = arr.each_index.select {|i| arr[i] < arr[i - 1]}\n    idx.max\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max if neg.size > 0\n    min_pos = pos.min if pos.size > 0\n    [max_neg, min_pos]\nend\n",
            "def compare_one(a, b)\n    if a.is_a?(String) && b.is_a?(String)\n        a1 = a.to_f\n        b1 = b.to_f\n    elsif a.is_a?(Integer) && b.is_a?(Integer)\n        a1 = a.to_f\n        b1 = b.to_f\n    elsif a.is_a?(Float) && b.is_a?(Float)\n        a1 = a\n        b1 = b\n    else\n        raise RuntimeError(\"Type Error\")\n    end\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, '-').gsub(/\\s/, '_')\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 or not suf.include?(lst[1]) or lst[0].length == 0 or not lst[0][0].isalpha() or lst[0].length > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for i in 0...lst.length\n        if i % 3 == 0\n            result += lst[i] * lst[i]\n        elsif i % 4 == 0\n            result += lst[i] * lst[i] * lst[i]\n        else\n            result += lst[i]\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).to_i).each do |i|\n        return false if n % i == 0\n    end\n    return true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    words.join(\" \").gsub(/[a-zA-Z]+/, \"\").strip.split(\" \").join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = Integer(xs[0]) * Integer(ns[0])\n    den = Integer(xs[1]) * Integer(ns[1])\n    return num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).sum\n    else\n        return (n_str[0, 2].to_i * 2 + digits_sum(n.abs))\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by {|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    nums.select {|n| n > 10 and n % 2 == 1 and odds.include?(n.to_s[0])}.length\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.include?(planet1) or !names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    return names[l + 1..r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select {|s| s.length % 2 == 0}\n    return result.sort_by {|s| [s.length, s]}\nend\n",
            "def x_or_y(n, x, y)\n    return y if n < 2\n    for i in 2..Math.sqrt(n).to_i + 1\n        return y if n % i == 0\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    sum = 0\n    lst.each do |n|\n        sum += n * n if n >= 0 and n % 2 == 1\n    end\n    sum\nend\n",
            "def compare(game, guess)\n    game.zip(guess).map {|x, y| abs(x - y)}\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.count(/[A-Z]/)\n        lower = ext.count(/[a-z]/)\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    return \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    (0...a.length).each do |i|\n        return true if b[i..-1] + b[0...i] == a\n    end\n    return false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s\n    even = ds.count {|d| d.ord % 2 == 0}\n    [even, ds.size - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0...values.length\n        while num >= values[i]\n            res.push(numerals[i])\n            num -= values[i]\n        end\n    end\n    return res.join\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    max_w\nend\n",
            "def eat(num, need, remaining)\n    return [num + need, remaining - need] if need <= remaining\n    return [num + remaining, 0]\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    return s[::-1] if s.downcase.chars.all? {|ch| !ch.isalpha}\n    result = []\n    s.downcase.chars.each do |ch|\n        result << (ch.isupper ? ch.downcase : ch.upcase)\n    end\n    result.join\nend\n",
            "def string_to_md5(txt)\n    return unless txt\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.encode\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    return [i for i in (lower..upper).step(2) if i % 2 == 0]\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut stk = Vec::new();\n    let mut groups = Vec::new();\n    let mut current_group = String::new();\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group);\n                current_group = String::new();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().fold(0.0, |acc, x| acc + (x - mean).abs());\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut paren_groups = paren_string.split_whitespace();\n    let mut result = Vec::new();\n    while let Some(group) = paren_groups.next() {\n        let mut depth = 0;\n        let mut max_depth = 0;\n        let mut paren_stack = VecDeque::new();\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n                paren_stack.push_back(ch);\n            } else if ch == ')' {\n                depth -= 1;\n                paren_stack.pop_back();\n            }\n        }\n        result.push(max_depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.contains(substring)).map(|s| s.to_string()).collect::<Vec<String>>()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut n_sum = 0;\n    let mut n_product = 1;\n    for n in numbers {\n        n_sum += n;\n        n_product *= n;\n    }\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = numbers[0];\n    let mut result = vec![];\n    for num in numbers {\n        max_so_far = max_so_far.max(*num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if s.eq(s.chars().rev().collect::<String>()) {\n        return s.to_string();\n    }\n    for i in 0..s.len() {\n        if s[i..].eq(s[i..].chars().rev().collect::<String>()) {\n            return s.to_string() + &s[..i].chars().rev().collect::<String>();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::new();\n    for (x, y) in a.chars().zip(b.chars()) {\n        result.push_str(if x == y { \"0\" } else { \"1\" });\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    let mut longest_s = String::new();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    return Some(longest_s);\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 { return a }\n    greatest_common_divisor(b, a % b)\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut result = vec![];\n    for i in 0..s.len() {\n        result.push(s[0..=i].to_string());\n    }\n    result\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.to_lowercase().into_bytes().iter().fold(0, |acc, c| acc + (c != b' '))\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = [(\"o\", 4), (\"o|\", 2), (\".|\", 1)];\n    let notes = music_string.split_whitespace();\n    notes.map(|note| {\n        durations.iter().find(|&(n, _)| n == note).unwrap().1\n    }).collect()\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..s.len() - substring.len() + 1 {\n        if s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict: HashMap<&str, i32> = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ].iter().cloned().collect();\n    let num_list = numbers\n        .split(\" \")\n        .filter(|x| num_dict.contains_key(x))\n        .map(|x| num_dict[x])\n        .collect::<Vec<i32>>();\n    num_list.sort();\n    num_list.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut numbers = numbers.clone();\n    numbers.sort_unstable();\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = Vec::new();\n    for i in 1..numbers.len() {\n        let diff = numbers[i] - numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![numbers[i - 1], numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().min().unwrap();\n    let max_num = numbers.iter().max().unwrap();\n    if min_num == max_num {\n        return vec![0.0; numbers.len()]\n    } else {\n        return numbers.iter().map(|num| (num - min_num) / (max_num - min_num)).collect::<Vec<f64>>()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.iter().filter(|x| x.is::<i32>()).map(|x| *x.as_ref::<i32>().unwrap()).collect::<Vec<i32>>()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    for num in numbers {\n        *counts.entry(*num).or_insert(0) += 1;\n    }\n    numbers\n        .iter()\n        .filter(|num| counts.get(*num) == Some(&1))\n        .map(|num| *num)\n        .collect()\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_ascii_uppercase());\n        } else {\n            flipped.push(ch.to_ascii_lowercase());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.iter().collect::<String>()\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.starts_with(prefix_str)).map(|s| s.to_string()).collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&x| x > 0).map(|&x| x).collect::<Vec<i32>>()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 { return false; }\n    for i in 2..=(n.sqrt() as i32) {\n        if n % i == 0 { return false; }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] as f64 * x.powf(i as f64);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while x1.abs() - x2.abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        match poly(xs, mid).cmp(&0.0) {\n            Ordering::Equal => return mid,\n            Ordering::Greater => x2 = mid,\n            Ordering::Less => x1 = mid,\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l[..l.len() / 3].to_vec();\n    sorted_third.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            result.push(sorted_third[i / 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    l.into_iter().collect::<std::collections::HashSet<_>>().into_iter().collect()\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    *l.iter().max().unwrap()\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().chars().filter(|c| *c == '7').count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l.iter().filter(|&x| x % 2 == 0).map(|&x| x).collect::<Vec<i32>>();\n    sorted_even.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i / 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        result.push(s.chars().nth(i).unwrap());\n        if i + 1 < s.len() {\n            result.push(s.chars().nth(i + 1).unwrap());\n            if i + 2 < s.len() {\n                result.push(s.chars().nth(i + 2).unwrap());\n                i += 3;\n            } else {\n                i += 2;\n            }\n        } else {\n            i += 1;\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        result.push(s.chars().nth(i).unwrap());\n        if i + 1 < s.len() {\n            result.push(s.chars().nth(i + 1).unwrap());\n            if i + 2 < s.len() {\n                result.push(s.chars().nth(i + 2).unwrap());\n                i += 3;\n            } else {\n                i += 2;\n            }\n        } else {\n            i += 1;\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 { return false; }\n    for i in 2..=(n as f64).sqrt() as i32 {\n        if n % i == 0 { return false; }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = vec![0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = vec![f[1], f[0] + f[1]];\n        if is_prime(f[1]) { cnt += 1; }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    let mut result = 0;\n    for i in 1..=n {\n        result += i * i;\n    }\n    result\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&x| x + 1).collect::<Vec<i32>>()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if seen.contains(&(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    let mut digits = String::new();\n    while x > 0 {\n        digits.push_str(&(x % bas).to_string());\n        x /= bas;\n    }\n    digits.chars().rev().collect::<String>()\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    a as f64 * h as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 0..(n + 1) {\n        if i % 4 == 0 {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4];\n        } else if i % 4 == 1 {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 3) % 4];\n        } else if i % 4 == 2 {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4];\n        } else {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 3) % 4];\n        }\n    }\n    fib[n % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut l = l.clone();\n    l.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if l.len() % 2 != 0 {\n        l[l.len() / 2]\n    } else {\n        (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        result.push((((ch as u8 - b'a' as u8) + 5) % 26) as char);\n    }\n    result\n}\npub fn decode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        result.push((((ch as u8 - b'a' as u8) + 21) % 26) as char);\n    }\n    result\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    txt.chars().filter(|c| !vowels.contains(c)).collect()\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    s0.chars().collect::<std::collections::HashSet<char>>() == s1.chars().collect::<std::collections::HashSet<char>>()\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    match n {\n        0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let mut diff = vec![];\n    for i in 1..l.len() {\n        diff.push(l[i] - l[i - 1]);\n    }\n    diff.iter().all(|x| x <= 0) || diff.iter().all(|x| x >= 0)\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    l1.intersection(l2).to_vec()\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (0..=n).sum()\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    xs.windows(2).map(|x| x[1] - x[0]).collect::<Vec<_>>()\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 { return 0 }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    while n > 2 {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for i in 0..s.len() {\n        if vowels.contains(s.chars().nth(i).unwrap()) || (i == s.len() - 1 && s.chars().nth(i).unwrap().to_lowercase() == \"y\") {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let mut x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        x_str.chars().rev().collect::<String>()\n    } else {\n        let mut shift_str = x_str[x_str.len() - shift as usize..].to_string();\n        shift_str.push_str(&x_str[..x_str.len() - shift as usize]);\n        shift_str\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c.to_digit(10).unwrap()).sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words = s.split(' ');\n    let apples = words.nth(words.find(\"apples\").unwrap() - 1).unwrap().parse::<i32>().unwrap();\n    let oranges = words.nth(words.find(\"oranges\").unwrap() - 1).unwrap().parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = arr.iter().filter(|&n| n % 2 == 0).collect::<Vec<_>>();\n    if evens.is_empty() {\n        return vec![]\n    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index = arr.iter().position(|&n| n == *min_even).unwrap();\n    vec![*min_even, min_even_index as i32]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for n in lst {\n        *freqs.entry(n).or_insert(0) += 1;\n    }\n    let mut good_vals = Vec::new();\n    for (k, v) in freqs.iter() {\n        if *v >= k {\n            good_vals.push(*k);\n        }\n    }\n    if good_vals.is_empty() { -1 } else { *good_vals.iter().max().unwrap() }\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = lst.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    let s = (a + b + c) as f64 / 2.0;\n    let area = s * (s - a) * (s - b) * (s - c);\n    if area < 0.0 {\n        return -1.0;\n    }\n    return area.sqrt();\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.len() == 0 {\n        return false;\n    }\n    let is_palin = q.iter().zip(q.iter().rev()).all(|(a, b)| a == b);\n    let total = q.iter().sum::<i32>();\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let mut cnt1 = 0;\n    let mut cnt2 = 0;\n    for s in lst1 {\n        cnt1 += s.len();\n    }\n    for s in lst2 {\n        cnt2 += s.len();\n    }\n    if cnt1 <= cnt2 { lst1.to_vec() } else { lst2.to_vec() }\n}\n",
            "pub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\nfn is_prime(n: i32) -> bool {\n    if n < 2 { return false; }\n    for i in 2..=floor(sqrt(n)) {\n        if n % i == 0 { return false; }\n    }\n    true\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 { return x == n; }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = a.powf(1.0 / 3.0) as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    num.chars().filter(|c| *c == '2' || *c == '3' || *c == '5' || *c == '7' || *c == 'B' || *c == 'D').count() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    let mut binary = String::new();\n    let mut dec = dec;\n    while dec > 0 {\n        binary.push_str(if dec % 2 == 0 { \"0\" } else { \"1\" });\n        dec /= 2;\n    }\n    binary.chars().rev().collect()\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    let mut cur = s.clone();\n    while !seen.contains(&cur) {\n        seen.insert(cur.clone());\n        cur = String::from(cur.chars().fold(String::new(), |acc, c| {\n            let mut acc = acc;\n            acc.push_str(&c.to_string().repeat(2).as_str());\n            acc\n        }))\n    }\n    seen.contains(&cur)\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut map = HashMap::new();\n    map.insert(4.0, \"A+\");\n    map.insert(4.0, \"A\");\n    map.insert(3.7, \"A-\");\n    map.insert(3.3, \"B+\");\n    map.insert(3.0, \"B\");\n    map.insert(2.7, \"B-\");\n    map.insert(2.3, \"C+\");\n    map.insert(2.0, \"C\");\n    map.insert(1.7, \"C-\");\n    map.insert(1.3, \"D+\");\n    map.insert(1.0, \"D\");\n    map.insert(0.7, \"D-\");\n    map.insert(0.0, \"E\");\n    let mut result = Vec::new();\n    for g in grades {\n        let grade = map.get(&(*g).clone()).unwrap();\n        result.push(grade.to_string());\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..((length as f64).sqrt() as usize + 1) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    2 * 9 * (10i32.pow(n - 2))\n}\n",
            "pub fn solve(n: i32) -> String {\n    let mut digits_sum = 0;\n    let mut n = n;\n    while n > 0 {\n        digits_sum += n % 10;\n        n /= 10;\n    }\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate()\n        .filter(|(i, x)| i % 2 == 1 && x % 2 == 0)\n        .map(|(_, x)| *x)\n        .sum()\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let words = s.split(\" \")\n        .map(|word| word.chars().collect::<Vec<char>>())\n        .collect::<Vec<Vec<char>>>();\n    let mut result = String::new();\n    for word in words {\n        result.push_str(word.iter().collect::<String>());\n        result.push(' ');\n    }\n    result.pop();\n    result\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut result = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                result.push(vec![i, j]);\n            }\n        }\n    }\n    result.sort_by(|a, b| a[0].cmp(&b[0]));\n    result\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.len() == 0 {\n        return vec![]\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        arr.clone().into_iter().rev().collect()\n    } else {\n        arr.clone().into_iter().collect()\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = (ch as u8 + 4) % 122 + 97;\n        result.push(char::from(shifted));\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = lst.clone().to_owned().into_iter().collect::<std::collections::HashSet<_>>();\n    if sl.len() < 2 {\n        return None;\n    }\n    let mut sl = sl.into_iter().collect::<Vec<_>>();\n    sl.sort_unstable();\n    Some(sl[1])\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = s.split(|c| c == '.' || c == '!' || c == '?' || c == ' ')\n        .filter(|s| s.len() >= 2)\n        .filter(|s| s.starts_with(\"I \"))\n        .collect::<Vec<&str>>();\n    sentences.len() as i32\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    match (x, y, z) {\n        (Box::new(x) as Box<dyn std::any::Any>, Box::new(y) as Box<dyn std::any::Any>, Box::new(z) as Box<dyn std::any::Any>) => {\n            match (x, y, z) {\n                (x, y, z) if (x + y == z) || (x + z == y) || (y + z == x) => true,\n                _ => false,\n            }\n        },\n        _ => false,\n    }\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = vec![];\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_uppercase() { ch.to_lowercase() } else { ch.to_uppercase() };\n            if vowels.contains(ch1) {\n                ch1 = ch1.to_string() + \"2\";\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    result.iter().collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 { return false; }\n    for i in 2..=(n as f64).sqrt() as i32 {\n        if n % i == 0 { return false; }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let mut pq = BinaryHeap::new();\n    for e in lst {\n        pq.push(Reverse(*e));\n    }\n    let mut result = 0;\n    while !pq.is_empty() {\n        result += pq.pop().unwrap().0;\n    }\n    result\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    let mut is_upper = true;\n    let mut is_lower = true;\n    for (_, v) in d {\n        if v.chars().any(|c| c.is_lowercase()) {\n            is_lower = false;\n        }\n        if v.chars().any(|c| c.is_uppercase()) {\n            is_upper = false;\n        }\n    }\n    is_upper || is_lower\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![2];\n    for num in 3..=n {\n        if !primes.iter().all(|&p| num % p != 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    let a = a.abs();\n    let b = b.abs();\n    let mut result = 0;\n    for i in 0..a {\n        result += b;\n    }\n    result\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    s.chars().filter(|c| c.is_ascii_uppercase() && c.to_string().as_str() != \" \")\n        .filter(|c| vowels.contains(c))\n        .count() as i32\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5) as i32\n    } else {\n        (num - 0.5) as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect::<Vec<i32>>()\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_ascii_alphabetic() {\n            word.push(c);\n        } else {\n            if word.len() > 0 {\n                result.push(word);\n                word.clear();\n            }\n        }\n    }\n    if word.len() > 0 {\n        result.push(word);\n    }\n    result\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y { -1 } else if y % 2 == 0 { y } else { y - 1 }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    let r_avg = (m + n) / 2.0 + 0.5;\n    let r_avg = r_avg.floor() as i32;\n    let r_avg = r_avg.to_string();\n    Some(r_avg)\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in x {\n        if all_digits_odd(num.to_string().as_str()) {\n            result.push(*num);\n        }\n    }\n    result.sort();\n    result\n}\nfn all_digits_odd(s: &str) -> bool {\n    s.bytes().all(|digit| digit % 2 != 0)\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let mut map = BTreeMap::new();\n    for e in arr {\n        let count = map.entry(*e).or_insert(0);\n        *count += 1;\n    }\n    let mut result = Vec::new();\n    for (k, v) in map {\n        for _ in 0..v {\n            result.push(k.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut nums = (1..=n).collect::<Vec<i32>>();\n    let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 != 0 {\n            result.push(nums[0..i].iter().sum::<i32>());\n        } else {\n            result.push(nums[0..i].iter().fold(1, |x, y| x * y));\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[i as usize % 2] += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|n| digits_sum(*n) > 0).count() as i32\n}\npub fn digits_sum(n: i32) -> i32 {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n    sum\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    let mut arr = arr.clone();\n    arr.sort();\n    for i in 0..arr.len() {\n        if arr[i:].len() == arr.len() - i && arr[0..i].len() == i && arr[i:] == arr[0..i] {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let mut odd_cnt = 0;\n    let mut even_cnt = 0;\n    for num in lst1 {\n        if num % 2 != 0 {\n            odd_cnt += 1;\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            even_cnt += 1;\n        }\n    }\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String,i32> {\n    let mut freq = HashMap::new();\n    let words = test.split_whitespace().collect::<Vec<&str>>();\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n    let mut result = HashMap::new();\n    if !freq.is_empty() {\n        let max_freq = *freq.values().max().unwrap();\n        for (k, v) in freq {\n            if v == max_freq {\n                result.insert(k.to_string(), v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let mut s1 = String::new();\n    for ch in s.chars() {\n        if !c.contains(ch) {\n            s1.push(ch);\n        }\n    }\n    if s1.len() == 0 {\n        return vec![String::from(\"no\")];\n    }\n    if s1.len() == s.len() {\n        return vec![s1, String::from(\"yes\")];\n    }\n    return vec![s1, String::from(\"no\")];\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = vec![];\n    for num in lst {\n        let mut n = 0;\n        for d in num.chars() {\n            if d.is_ascii_digit() {\n                if d.to_digit(10).unwrap() % 2 == 1 {\n                    n += 1;\n                }\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\";\n        let mut s = rs.replace(\"i\", &n.to_string());\n        result.push(s);\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = cur_sum.min(0) + n;\n        min_sum = min_sum.min(cur_sum);\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| arr.iter().sum::<i32>() / capacity).sum::<i32>()\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    arr.clone().sort_by(|a, b| {\n        let cnt_a = count_ones(*a);\n        let cnt_b = count_ones(*b);\n        match cnt_a.cmp(&cnt_b) {\n            Ordering::Equal => a.cmp(b),\n            Ordering::Less => Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n        }\n    })\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let mut words = s.split(\" \").filter(|w| !w.is_empty()).collect::<Vec<String>>();\n    let mut result = Vec::new();\n    for w in words.iter_mut() {\n        let mut consonants_set = HashSet::new();\n        for c in w.chars() {\n            consonants_set.insert(c.to_ascii_lowercase());\n        }\n        if consonants_set.len() == n {\n            result.push(w.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (0..word.len() - 2).rev() {\n        if word.chars().nth(i).unwrap() == 'a' || word.chars().nth(i).unwrap() == 'e' || word.chars().nth(i).unwrap() == 'i' || word.chars().nth(i).unwrap() == 'o' || word.chars().nth(i).unwrap() == 'u' || word.chars().nth(i).unwrap() == 'A' || word.chars().nth(i).unwrap() == 'E' || word.chars().nth(i).unwrap() == 'I' || word.chars().nth(i).unwrap() == 'O' || word.chars().nth(i).unwrap() == 'U' {\n            if word.chars().nth(i - 1).unwrap() != 'a' && word.chars().nth(i - 1).unwrap() != 'e' && word.chars().nth(i - 1).unwrap() != 'i' && word.chars().nth(i - 1).unwrap() != 'o' && word.chars().nth(i - 1).unwrap() != 'u' && word.chars().nth(i + 1).unwrap() != 'a' && word.chars().nth(i + 1).unwrap() != 'e' && word.chars().nth(i + 1).unwrap() != 'i' && word.chars().nth(i + 1).unwrap() != 'o' && word.chars().nth(i + 1).unwrap() != 'u' {\n                return word[i..i + 1].to_string();\n            }\n        }\n    }\n    return \"\".to_string();\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0] + &lst[1];\n    let s2 = &lst[1] + &lst[0];\n    if check(s1) || check(s2) { \"Yes\" } else { \"No\" }\n}\nfn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' { depth += 1 } else { depth -= 1 }\n        if depth < 0 { return false }\n    }\n    true\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    let mut result = arr.clone();\n    result.sort_by(|a, b| b.cmp(a));\n    result[..k as usize].to_vec()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate()\n        .filter(|(i, x)| i % 2 == 0 && x % 2 != 0)\n        .map(|(_, x)| *x)\n        .sum()\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut result = 0;\n    for n in arr.iter() {\n        if arr.len() <= k {\n            break;\n        }\n        if n.len() <= 2 {\n            result += n;\n        }\n    }\n    result\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if !date.len() == 10 || !date.chars().nth(2) == Some('-') || !date.chars().nth(5) == Some('-') {\n        return false;\n    }\n    let month = date.chars().nth(0).unwrap() as u32 * 10 + date.chars().nth(1).unwrap() as u32;\n    let day = date.chars().nth(3).unwrap() as u32 * 10 + date.chars().nth(4).unwrap() as u32;\n    match month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => {\n            if day >= 1 && day <= 31 {\n                return true;\n            }\n        }\n        4 | 6 | 9 | 11 => {\n            if day >= 1 && day <= 30 {\n                return true;\n            }\n        }\n        2 => {\n            if day >= 1 && day <= 29 {\n                return true;\n            }\n        }\n        _ => {}\n    }\n    false\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    if let Some(pos) = txt.find(\" \") {\n        result.append(&mut txt[..pos].split(\",\").map(|s| s.to_string()).collect::<Vec<String>>());\n        result.append(&mut txt[pos + 1..].split(\" \").map(|s| s.to_string()).collect::<Vec<String>>());\n    } else {\n        result.append(&mut txt.split(\",\").map(|s| s.to_string()).collect::<Vec<String>>());\n    }\n    result\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    let mut freq = std::collections::HashMap::new();\n    for i in lst {\n        freq.entry(*i).or_insert(0) += 1;\n    }\n    let mut max_freq = 0;\n    for i in freq.values() {\n        max_freq = max_freq.max(*i);\n    }\n    max_freq <= 2\n}\n",
            "pub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let (l, r) = (\n        interval1.iter().max().unwrap(),\n        interval2.iter().min().unwrap(),\n    );\n    let length = r - l;\n    if length > 0 && is_prime(length as i32) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    let mut sign = 1;\n    let mut result = 1;\n    for n in arr {\n        if n == 0 { return Some(0) }\n        if n < 0 { sign = -1 }\n        result *= n * sign;\n    }\n    Some(result)\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = min(min_val, min(temp));\n            }\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push(1 if i % 2 == 0 else min_val);\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        vec![1]\n    } else {\n        let mut seq = vec![1, 3];\n        for i in 2..=n {\n            if i % 2 == 0 {\n                seq.push((i / 2 + 1));\n            } else {\n                seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        seq\n    }\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut odds = vec![];\n    for d in n.to_string().chars() {\n        if d.to_digit(10).unwrap() % 2 == 1 {\n            odds.push(d.to_digit(10).unwrap());\n        }\n    }\n    if odds.len() > 0 {\n        odds.iter().fold(1, |x, y| x * y)\n    } else {\n        0\n    }\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = vec![];\n    let mut close_idx = vec![];\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter().map(|n| n.powi(2)).sum::<i32>()\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.len() == 0 {\n        return false;\n    }\n    let last = &txt[txt.rfind(' ').unwrap() + 1..];\n    last.len() == 1 && last.chars().nth(0).unwrap().is_alphabetic()\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    let mut idx = Vec::new();\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx.push(i);\n        }\n    }\n    if idx.is_empty() {\n        return -1;\n    }\n    idx.sort();\n    idx.last().unwrap().max(idx[0])\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = lst.iter().filter(|&x| x < 0).map(|x| *x).collect::<Vec<i32>>();\n    let mut pos = lst.iter().filter(|&x| x > 0).map(|x| *x).collect::<Vec<i32>>();\n    let mut max_neg = None;\n    let mut min_pos = None;\n    if neg.len() > 0 {\n        max_neg = Some(neg.iter().max().unwrap());\n    }\n    if pos.len() > 0 {\n        min_pos = Some(pos.iter().min().unwrap());\n    }\n    vec![max_neg, min_pos]\n}\n",
            "pub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = a.deref().try_into().unwrap_or(0.0);\n    let b1 = b.deref().try_into().unwrap_or(0.0);\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut result = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let mut result = txt.to_string();\n    result.replace_all(\"  \", \"-\");\n    result.replace_all(\" \", \"_\")\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let suf = vec![\"txt\", \"exe\", \"dll\"];\n    let lst = file_name.split(\".\");\n    if lst.len() != 2 || !suf.contains(&lst[1]) || lst[0].len() == 0 || !lst[0].chars().nth(0).unwrap().is_alphabetic() || lst[0].chars().filter(|x| x.is_numeric()).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            result += lst[i] * lst[i];\n        } else if i % 4 == 0 {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    result\n}\n",
            "pub fn words_in_sentence(sentence: &String) -> String {\n    let words = sentence.split(\" \").collect::<Vec<&str>>();\n    let mut result = String::new();\n    for w in words {\n        if is_prime(w.len() as i32) {\n            result.push_str(w);\n            result.push(' ');\n        }\n    }\n    result.trim_end().to_owned()\n}\nfn is_prime(n: i32) -> bool {\n    if n < 2 { return false; }\n    for i in 2..=(n as f64).sqrt() as i32 {\n        if n % i == 0 { return false; }\n    }\n    true\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs = x.split(\"/\").collect::<Vec<_>>();\n    let ns = n.split(\"/\").collect::<Vec<_>>();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n    sum\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    nums.iter().map(|n| digits_sum(*n)).collect::<Vec<i32>>()\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    nums.iter().filter(|&n| n > 10 && n % 2 == 1 && odds.contains(n.to_string().chars().nth(0).unwrap())).count() as i32\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[a as usize % 3] += 1;\n    }\n    let mut result = 0;\n    result += c[0] * c[1] * c[2];\n    result += c[0] * (c[0] - 1) * (c[0] - 2);\n    result += c[1] * (c[1] - 1) * (c[1] - 2);\n    result += c[2] * (c[2] - 1) * (c[2] - 2);\n    result // 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        \"Mercury\".to_string(),\n        \"Venus\".to_string(),\n        \"Earth\".to_string(),\n        \"Mars\".to_string(),\n        \"Jupiter\".to_string(),\n        \"Saturn\".to_string(),\n        \"Uranus\".to_string(),\n        \"Neptune\".to_string(),\n    ];\n    let mut l = names.iter().position(|n| n == planet1).unwrap();\n    let mut r = names.iter().position(|n| n == planet2).unwrap();\n    if l > r {\n        l = r;\n        r = l;\n    }\n    if l == r {\n        return vec![];\n    }\n    let mut result = vec![];\n    for n in &names[l + 1..r] {\n        result.push(n.to_string());\n    }\n    result\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result = lst.iter().filter(|s| s.len() % 2 == 0).map(|s| s.clone()).collect::<Vec<String>>();\n    result.sort_by(|a, b| a.len().cmp(&b.len()).then(a.cmp(b)));\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 { return y }\n    for i in 2..((n as f64).sqrt() as i32 + 1) {\n        if n % i == 0 { return y }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter().filter(|n| n >= 0 && n % 2 == 1).map(|n| n * n).sum::<f64>() as i32\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter()\n        .zip(guess.iter())\n        .map(|(&x, &y)| (x - y).abs())\n        .collect::<Vec<i32>>()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = -i32::MAX;\n    let mut max_ext = String::new();\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext.clone();\n        }\n    }\n    format!(\"{}{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    let mut a_chars = a.chars();\n    let mut b_chars = b.chars();\n    let mut a_chars_iter = a_chars.enumerate();\n    let mut b_chars_iter = b_chars.enumerate();\n    while let (Some(a_ch), Some(b_ch)) = (a_chars_iter.next(), b_chars_iter.next()) {\n        if a_ch != b_ch {\n            return false;\n        }\n    }\n    while let (Some(a_ch), Some(b_ch)) = (a_chars_iter.next(), b_chars_iter.next_back()) {\n        if a_ch != b_ch {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = format!(\"{:b}\", num.abs());\n    let even = ds.chars().filter(|c| *c == '0').count() as i32;\n    vec![even, ds.len() as i32 - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(&numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let s = [a, b, c].sort_unstable();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\".to_string();\n    for w in words {\n        let cnt = w.chars().collect::<std::collections::HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            max_w = max_w.min(w);\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = VecDeque::new();\n    let mut nums = VecDeque::new();\n    for (i, op) in operators.iter().enumerate() {\n        if op == \"**\" {\n            ops.push_back(\"**\");\n            nums.push_back(operands[i + 1]);\n        } else if op == \"*\" {\n            ops.push_back(\"*\");\n            nums.push_back(operands[i + 1]);\n        } else if op == \"//\" {\n            ops.push_back(\"//\");\n            nums.push_back(operands[i + 1]);\n        } else if op == \"+\" {\n            ops.push_back(\"+\");\n            nums.push_back(operands[i + 1]);\n        } else if op == \"-\" {\n            ops.push_back(\"-\");\n            nums.push_back(operands[i + 1]);\n        }\n    }\n    while !ops.is_empty() {\n        if ops.pop_back().unwrap() == \"**\" {\n            nums.back_mut().unwrap() *= nums.pop_back().unwrap();\n        } else if ops.pop_back().unwrap() == \"*\" {\n            nums.back_mut().unwrap() *= nums.pop_back().unwrap();\n        } else if ops.pop_back().unwrap() == \"//\" {\n            nums.back_mut().unwrap() /= nums.pop_back().unwrap();\n        } else if ops.pop_back().unwrap() == \"+\" {\n            nums.back_mut().unwrap() += nums.pop_back().unwrap();\n        } else if ops.pop_back().unwrap() == \"-\" {\n            nums.back_mut().unwrap() -= nums.pop_back().unwrap();\n        }\n    }\n    nums.pop_front().unwrap()\n}\n",
            "pub fn solve(s: &String) -> String {\n    if !s.chars().all(|ch| !ch.is_alphabetic()) {\n        s.chars().rev().collect()\n    } else {\n        let mut result = String::new();\n        for ch in s.chars() {\n            if !ch.is_alphabetic() {\n                result.push(ch);\n            } else if ch.is_uppercase() {\n                result.push(ch.to_lowercase().to_string());\n            } else {\n                result.push(ch.to_uppercase().to_string());\n            }\n        }\n        result\n    }\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    let mut md5_hash = SipHasher::new_default();\n    let txt_bytes = txt.as_bytes();\n    md5_hash.write(txt_bytes);\n    let md5_encoded = md5_hash.finish().to_string();\n    Some(md5_encoded)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    (lower..=upper).filter(|&i| i % 2 == 0).collect::<Vec<i32>>()\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- 0 until numbers.length) {\n        for (j <- i + 1 until numbers.length) {\n            if (math.abs(numbers(i) - numbers(j)) < threshold) {\n                return true\n            }\n        }\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    val stk = mutable.Stack[Char]()\n    var currentGroup = \"\"\n    for (ch <- parenString) {\n        if (ch == '(') {\n            stk.push(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.pop()\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - num.floor\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) return true\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => math.abs(x - mean)).sum\n    deviation / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    numbers.zipAll(Seq(delimiter), delimiter, delimiter).flatMap(_._1)\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    val parenGroups = parenString.split(\" \")\n    for (group <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    result.toSeq\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.product\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var maxSoFar = Int.MinValue\n    val result = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        maxSoFar = math.max(maxSoFar, num)\n        result += maxSoFar\n    }\n    result.toList\n}\n",
            "def makePalindrome(s: String): String = {\n    if (isPalindrome(s)) s\n    else {\n        for (i <- 0 until s.length) {\n            if (isPalindrome(s.slice(i, s.length) + s.slice(0, i))) {\n                return s + s.slice(0, i).reverse\n            }\n        }\n        \"\"\n    }\n}\ndef isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\n",
            "def stringXor(a: String, b: String): String = {\n    (a zip b) map { case (x, y) => if (x == y) \"0\" else \"1\" } mkString \"\"\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    strs.maxBy(_.length)\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    val prefixes = mutable.ListBuffer[String]()\n    for (i <- 0 until s.length) {\n        prefixes += s.substring(0, i + 1)\n    }\n    prefixes.toList\n}\n",
            "def stringSequence(n: Int): String = {\n    (0 to n).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    musicString.split(\" \").map(durations)\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    var i = 0\n    while (i < s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n        i += 1\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val num_dict = Map(\n        \"zero\" -> 0,\n        \"one\" -> 1,\n        \"two\" -> 2,\n        \"three\" -> 3,\n        \"four\" -> 4,\n        \"five\" -> 5,\n        \"six\" -> 6,\n        \"seven\" -> 7,\n        \"eight\" -> 8,\n        \"nine\" -> 9,\n    )\n    val num_list = numbers.split(\" \").filter(num_dict.contains)\n    num_list.sorted(key = num_dict(_)).mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.MaxValue\n    var closestPair = Seq[Double]()\n    for (i <- 1 until numbers.size) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        Seq.fill(numbers.length)(0.0)\n    } else {\n        numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter(x => x.isInstanceOf[Int]).map(x => x.asInstanceOf[Int])\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    for (i <- 2 until n) {\n        if (n % i == 0) return n / i\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    var factors = mutable.ListBuffer[Int]()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors += divisor\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.toList\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = numbers.groupBy(x => x).mapValues(_.length)\n    numbers.filter(x => counts(x) == 1)\n}\n",
            "def flipCase(s: String): String = {\n    val flipped = new StringBuilder()\n    for (ch <- s) {\n        if (!ch.isLetter()) {\n            flipped.append(ch)\n        } else if (ch.isLower) {\n            flipped.append(ch.toUpper)\n        } else {\n            flipped.append(ch.toLower)\n        }\n    }\n    flipped.toString\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(num => num > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    @tailrec\n    def loop(i: Int): Unit = {\n        if (i < xs.length) {\n            res += xs(i) * Math.pow(x, i)\n            loop(i + 1)\n        }\n    }\n    loop(0)\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1 = 1.0\n    var x2 = -1.0\n    @tailrec\n    def loop(): Double = {\n        if (poly(xs, x1) * poly(xs, x2) > 0) {\n            val mid = (x1 + x2) / 2\n            if (poly(xs, mid) == 0) mid\n            else if (poly(xs, mid) * poly(xs, x1) < 0) loop(x2 = mid)\n            else loop(x1 = mid)\n        } else (x1 + x2) / 2\n    }\n    loop()\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.sortBy(x => x / 3)\n    l.zipWithIndex.map {\n        case (x, i) if i % 3 == 0 => sortedThird(i / 3)\n        case (x, i) => x\n    }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 1 to n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(\"7\")\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(_ % 2 == 0).sorted\n    l.map(if (i % 2 == 0) sortedEven(i / 2) else _)\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (i <- 0 until s.length) {\n        if (i + 3 <= s.length) {\n            result.append(s(i + 1))\n            result.append(s(i + 2))\n            result.append(s(i))\n        } else {\n            result.append(s(i))\n        }\n    }\n    result.mkString\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def primeFib(n: Int): Int = {\n    val f = Array.fill(n + 1)(0)\n    f(0) = 0\n    f(1) = 1\n    var cnt = 0\n    var i = 2\n    while (cnt < n) {\n        f(i) = f(i - 1) + f(i - 2)\n        if (isPrime(f(i))) {\n            cnt += 1\n        }\n        i += 1\n    }\n    f(i - 1)\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length) {\n        for (j <- i + 1 until l.length) {\n            for (k <- j + 1 until l.length) {\n                if (l(i) + l(j) + l(k) == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    var result = 0\n    for (i <- 1 to n) {\n        result += i * i\n    }\n    result\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(i => i + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set[Int]()\n    for (num <- l) {\n        if (seen.contains(-num)) return true\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) \"0\"\n    else {\n        val digits = mutable.ListBuffer[Char]()\n        var y = x\n        while (y > 0) {\n            digits.append(y % bas.toInt)\n            y /= bas\n        }\n        digits.reverse.mkString\n    }\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    a.toDouble * h.toDouble / 2\n}\n",
            "def fib4(n: Int): Int = {\n    val fib = Array(0, 0, 2, 0)\n    for (i <- 4 until (n + 1)) {\n        fib(i % 4) = fib.sum\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.size % 2 != 0) sl(l.size / 2) else (sl(l.size / 2) + sl(l.size / 2 - 1)) / 2\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (i <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    s.map(ch => (ch.toInt - 97 + 5) % 26 + 97).map(_.toChar).mkString\n}\ndef decodeShift(s: String): String = {\n    s.map(ch => (ch.toInt - 97 + 21) % 26 + 97).map(_.toChar).mkString\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filterNot(vowels.contains)\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(x => x < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.slice(1, l.length).zip(l).map(_._1 - _._2)\n    diff.forall(x => x <= 0) || diff.forall(x => x >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    l1.intersect(l2)\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i\n        } else {\n            i += 1\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    (0 until n).sum\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.sliding(2).map(x => x.head * x.last).toList\n}\n",
            "def fibfib(n: Int): Int = {\n    if (n <= 1) return 0\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        val tmp = a + b + c\n        a = b\n        b = c\n        c = tmp\n        n -= 1\n    }\n    c\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (vowels.contains(s(i)) || (i == s.length - 1 && s(i) == 'y')) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) xStr else xStr.substring(xStr.length - shift, xStr.length) + xStr.substring(0, xStr.length - shift)\n}\n",
            "def digitSum(s: String): Int = {\n    s.toUpperCase.map(c => c.toInt - 64).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \")\n    val apples = words.indexOf(\"apples\") match {\n        case -1 => 0\n        case i => words(i - 1).toInt\n    }\n    val oranges = words.indexOf(\"oranges\") match {\n        case -1 => 0\n        case i => words(i - 1).toInt\n    }\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(n => n % 2 == 0)\n    if (evens.isEmpty) return Seq()\n    val minEven = evens.min\n    Seq(minEven, arr.indexOf(minEven))\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = scala.collection.mutable.Map[Int, Int]()\n    for (n <- lst) {\n        freqs.update(n, freqs.getOrElse(n, 0) + 1)\n    }\n    val goodVals = freqs.filter(x => x._2 >= x._1).keys.toList\n    if (goodVals.isEmpty) -1 else goodVals.max\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.toSeq\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.isEmpty) false\n    else {\n        val isPalin = q.forall(q(i) == q(q.length - i - 1))\n        val total = q.sum\n        isPalin && total <= w\n    }\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length / 2) {\n        if (arr(i) != arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    var cnt = 0\n    var b = a\n    while (b > 1) {\n        if (isPrime(b)) {\n            cnt += 1\n            b /= b\n        } else {\n            b -= 1\n        }\n    }\n    cnt == 3\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) x == n\n    else {\n        var tmp = 1\n        while (tmp < x) {\n            tmp *= n\n        }\n        tmp == x\n    }\n}\n",
            "def isCube(a: Int): Boolean = {\n    val root = math.round(math.pow(math.abs(a), 1.0 / 3.0)).toInt\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(x => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D')\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = dec.toBinaryString\n    f\"db${binary}db\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    var slow = s.toCharArray.map(_.toString).toList\n    var fast = s.toCharArray.map(_.toString).toList\n    var slow_prev = slow\n    var fast_prev = fast\n    while (slow != fast) {\n        slow = slow.map(_.toString.toInt).sum\n        fast = fast.map(_.toString.toInt).sum\n        slow = slow.map(_.toString.toInt).sum\n        fast = fast.map(_.toString.toInt).sum\n        if (slow == fast) {\n            return false\n        }\n        slow_prev = slow\n        fast_prev = fast\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (g <- grades) {\n        if (g == 4.0) {\n            result.addOne(\"A+\")\n        } else if (g > 3.7) {\n            result.addOne(\"A\")\n        } else if (g > 3.3) {\n            result.addOne(\"A-\")\n        } else if (g > 3.0) {\n            result.addOne(\"B+\")\n        } else if (g > 2.7) {\n            result.addOne(\"B\")\n        } else if (g > 2.3) {\n            result.addOne(\"B-\")\n        } else if (g > 2.0) {\n            result.addOne(\"C+\")\n        } else if (g > 1.7) {\n            result.addOne(\"C\")\n        } else if (g > 1.3) {\n            result.addOne(\"C-\")\n        } else if (g > 1.0) {\n            result.addOne(\"D+\")\n        } else if (g > 0.7) {\n            result.addOne(\"D\")\n        } else if (g > 0.0) {\n            result.addOne(\"D-\")\n        } else {\n            result.addOne(\"E\")\n        }\n    }\n    result.toList\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) return false\n    for (i <- 2 to math.sqrt(length).toInt) {\n        if (length % i == 0) return false\n    }\n    true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10 ** (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = n.toLong.map(_.toString).sum\n    digitsSum.toBinaryString\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(x => x._2 % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map(word => word.sorted)\n    words.mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = for {\n        i <- 0 until lst.length\n        j <- 0 until lst(i).length\n        if lst(i)(j) == x\n    } yield Seq(i, j)\n    coords.sortWith((a, b) => (a(0), -a(1)) < (b(0), -b(1)))\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.size == 0) return Seq()\n    if ((arr.head + arr.last) % 2 == 0) arr.sorted(Ordering.Int.reverse) else arr.sorted\n}\n",
            "def encrypt(s: String): String = {\n    val result = s.toCharArray.map(ch => (ch + 4).toChar)\n    new String(result)\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.sorted\n    if (sl.length < 2) None else Some(sl(1))\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = Regex(\"[.!?]\\\\s*\").split(s).filter(_.length >= 2)\n    sentences.count(_.startsWith(\"I \"))\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x match {\n        case i: Int =>\n            y match {\n                case j: Int =>\n                    z match {\n                        case k: Int =>\n                            (i + j == k) || (i + k == j) || (j + k == i)\n                        case _ => false\n                    }\n                case _ => false\n            }\n        case _ => false\n    }\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = new mutable.StringBuilder()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (vowels.contains(ch1)) {\n                ch1 = ch1.toChar + 2\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    result.toString\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\ndef skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(isPrime)\n    if (primes.isEmpty) 0 else primes.max.toString.map(_.toInt).sum\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) false\n    else {\n        d.forall(x => x._1.toLowerCase == x._1 || x._1.toUpperCase == x._1)\n    }\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    val primes = mutable.ListBuffer[Int]()\n    for (num <- 2 to n) {\n        if (primes.forall(num % _ != 0)) {\n            primes.append(num)\n        }\n    }\n    primes.toList\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val result = absA * absB\n    if (a < 0 && b < 0) result else -result\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    s.toCharArray.zipWithIndex.count(x => x._2 % 2 == 0 && vowels.contains(x._1))\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toDouble\n    if (num >= 0) {\n        num.toInt + 0.5\n    } else {\n        num.toInt - 0.5\n    }\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (1 to n).map(i => i + 2 * i)\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    s.split(\"[, ]\").filter(_.length > 0)\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1\n    else if (y % 2 == 0) y\n    else if (x == y) -1\n    else y - 1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) None else {\n        val rAvg = (m + n) / 2 + 0.5\n        val binStr = bin(rAvg).substring(2)\n        Some(binStr)\n    }\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    val result = x.filter(num => {\n        val digits = num.toString.toCharArray\n        digits.forall(digit => digit % 2 != 0)\n    })\n    result.sorted\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sortBy(x => x).reverse\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    val result = (1 to n).map(i => {\n        if (i % 2 != 0) nums.take(i).sum else nums.take(i).product\n    })\n    result\n}\n",
            "def evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array.fill(2)(0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt\n}\ndef isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    var result = 0\n    for (n <- arr) {\n        if (digitsSum(n) > 0) {\n            result += 1\n        }\n    }\n    result\n}\ndef digitsSum(n: Int): Int = {\n    var n_str = n.toString\n    if (n >= 0) {\n        n_str.toInt.sum\n    } else {\n        (n_str.take(2).toInt * 2) + digitsSum(n.abs)\n    }\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.isEmpty) true\n    else {\n        val sortedArr = arr.sorted\n        for (i <- 0 until arr.length) {\n            if (arr.slice(i, arr.length) == sortedArr.slice(0, arr.length - i) && arr.slice(0, i) == sortedArr.slice(arr.length - i, arr.length)) true\n        }\n        false\n    }\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.count(num => num % 2 != 0)\n    val evenCnt = lst2.count(num => num % 2 == 0)\n    if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String, Int] = {\n    val freq = scala.collection.mutable.Map[String, Int]()\n    val words = test.split(\" \").filter(_.nonEmpty)\n    for (w <- words) {\n        freq.getOrElseUpdate(w, 0) += 1\n    }\n    val result = scala.collection.mutable.Map[String, Int]()\n    if (freq.size > 0) {\n        val maxFreq = freq.values.max\n        for ((k, v) <- freq) {\n            if (v == maxFreq) {\n                result += k -> v\n            }\n        }\n    }\n    result\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filter(ch => !ch.equals(c))\n    if (isPalindrome(s1)) Seq(s1, \"yes\") else Seq(s1, \"no\")\n}\ndef isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = lst.map(s => {\n        val n = s.toCharArray.map(_.toInt).filter(_ % 2 == 1).size\n        s\"the number of odd elements in the string i of the input. i = $n\"\n    })\n    result\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = math.min(curSum + n, 0)\n        minSum = math.min(curSum, minSum)\n    }\n    if (minSum == 0) minSum = nums.min\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(_.sum / capacity).map(math.ceil).sum\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    val result = arr.sorted.zipWithIndex.map { case (x, y) => (countOnes(x), x, y) }\n    result.sortBy(_._1).map(_._2).toList\n}\ndef countOnes(num: Int): Int = {\n    val bin = num.toBinaryString\n    bin.count(\"1\")\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(_.nonEmpty)\n    words.filter(w => w.length > n && w.toLowerCase.count(c => consonants.contains(c)) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- 0 until word.length - 2 by -1) {\n        if (vowels.contains(word(i)) && !vowels.contains(word(i - 1)) && !vowels.contains(word(i + 1))) {\n            return word(i)\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == '(') depth += 1\n        else depth -= 1\n        if (depth < 0) return false\n    }\n    true\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) return Seq()\n    arr.sorted.slice(arr.size - k, arr.size)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 != 0).map(_._1).sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    var result = 0\n    for (n <- arr.take(k)) {\n        if (n.toString.length <= 2) result += n\n    }\n    result\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    val collatz = Seq(1)\n    var current = n\n    while (current != 1) {\n        if (current % 2 != 0) {\n            collatz :+= current\n            current = 3 * current + 1\n        } else {\n            current = current / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length != 10 || date(2) != '-' || date(5) != '-') return false\n    val month = date.substring(0, 2).toInt\n    val day = date.substring(3, 5).toInt\n    if (month in Array(1, 3, 5, 7, 8, 10, 12) && day >= 1 && day <= 31) return true\n    if (month in Array(4, 6, 9, 11) && day >= 1 && day <= 30) return true\n    if (month == 2 && day >= 1 && day <= 29) return true\n    false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) txt.split(\" \") else if (txt.contains(\",\")) txt.split(\",\") else Seq(txt.length.toString)\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    lst.sliding(2).forall(t => t.head <= t.last) && lst.groupBy(x => x).mapValues(_.length).values.max <= 2\n}\n",
            "def intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None\n    else if (arr.contains(0)) Some(0)\n    else {\n        val sign = if (arr.count(n => n < 0) % 2 == 1) -1 else 1\n        arr.map(n => abs(n)).sum.map(sign * _)\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = ListBuffer[Int]()\n                if (i != 0) temp += grid(i - 1)(j)\n                if (j != 0) temp += grid(i)(j - 1)\n                if (i != n - 1) temp += grid(i + 1)(j)\n                if (j != n - 1) temp += grid(i)(j + 1)\n                minVal = temp.min\n            }\n        }\n    }\n    val result = ListBuffer[Int]()\n    for (i <- 0 until k) {\n        result += (1 if i % 2 == 0 else minVal)\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) Seq(1) else {\n        val seq = Seq(1, 3)\n        for (i <- 2 until (n + 1)) {\n            if (i % 2 == 0) seq :+= i / 2 + 1 else seq :+= seq(i - 1) + seq(i - 2) + (i + 3) / 2\n        }\n        seq\n    }\n}\n",
            "def digits(n: Int): Int = {\n    val odds = for (d <- n.toString) yield d.toInt\n    val result = odds.reduceOption(_ * _).getOrElse(0)\n    result\n}\n",
            "def isNested(s: String): Boolean = {\n    var cnt = 0\n    var i = 0\n    val openIdx = scala.collection.mutable.Stack[Int]()\n    val closeIdx = scala.collection.mutable.Stack[Int]()\n    for (ch <- s) {\n        if (ch == '[') {\n            openIdx.push(i)\n        } else if (ch == ']') {\n            closeIdx.push(i)\n        }\n        if (openIdx.nonEmpty && closeIdx.nonEmpty && openIdx.top < closeIdx.top) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(math.ceil).map(math.pow(_, 2)).sum\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) false\n    else {\n        val last = txt.substring(txt.lastIndexOf(' ') + 1)\n        last.length == 1 && last.head.isLetter\n    }\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    val idx = arr.indices.filter(i => arr(i) < arr(i - 1))\n    idx.max\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = if (neg.nonEmpty) neg.max else None\n    val minPos = if (pos.nonEmpty) pos.min else None\n    Seq(maxNeg, minPos)\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    if (a.isInstanceOf[String]) {\n        val a1 = a.asInstanceOf[String].replace(\",\", \".\")\n        val b1 = b.asInstanceOf[String].replace(\",\", \".\")\n        if (a1 == b1) None else if (a1 > b1) Some(a1) else Some(b1)\n    } else if (a.isInstanceOf[Int]) {\n        val a1 = a.asInstanceOf[Int]\n        val b1 = b.asInstanceOf[Int]\n        if (a1 == b1) None else if (a1 > b1) Some(a1) else Some(b1)\n    } else if (a.isInstanceOf[Double]) {\n        val a1 = a.asInstanceOf[Double]\n        val b1 = b.asInstanceOf[Double]\n        if (a1 == b1) None else if (a1 > b1) Some(a1) else Some(b1)\n    } else {\n        throw new RuntimeException(\"Type Error\")\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    val regex = \"\"\"\\s{3,}\"\"\".r\n    val result = regex.replaceAll(txt, \"-\").replaceAll(\" \", \"_\")\n    result\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = Seq(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.length != 2 || !suf.contains(lst(1)) || lst(0).length == 0 || !lst(0).head.isLetter || lst(0).length > 3 || lst(0).filter(_.isDigit).length > 3) \"No\" else \"Yes\"\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- 0 until lst.length) {\n        if (i % 3 == 0) {\n            result += lst(i) * lst(i)\n        } else if (i % 4 == 0) {\n            result += lst(i) * lst(i) * lst(i)\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    val result = words.filter(w => isPrime(w.length)).mkString(\" \")\n    result\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(digitsSum)\n}\ndef digitsSum(n: Int): Int = {\n    n.toString.map(_.toString.toInt).sum\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    nums.filter(n => n > 10 && n % 2 == 1 && (n + \"\").slice(0, 1).toSet.contains(n % 10)).length\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    var c = Array(0, 0, 0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    (c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) / 6).toInt\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) Seq() else {\n        val l = names.indexOf(planet1)\n        val r = names.indexOf(planet2)\n        if (l > r) Seq() else {\n            if (l == r) Seq() else {\n                names.slice(l + 1, r)\n            }\n        }\n    }\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    lst.filter(_.length % 2 == 0).sorted(Ordering.by(_.length).thenBy(_.reverse))\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) return y\n    for (i <- 2 to math.sqrt(n).toInt + 1) {\n        if (n % i == 0) return y\n    }\n    x\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(_ >= 0 && _ % 2 == 1).map(n => n * n).sum\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map(x => math.abs(x._1 - x._2))\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var maxS = -1.0\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    s\"$className.$maxExt\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) return false\n    for (i <- 0 until b.length) {\n        if (b.substring(i, b.length) + b.substring(0, i) in a) return true\n    }\n    false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = abs(num).toString\n    val even = ds.count(_.toString.toInt % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = Seq(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = Seq(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutable.ListBuffer[String]()\n    for (i <- 0 until values.length) {\n        while (num >= values(i)) {\n            res += numerals(i)\n            num -= values(i)\n        }\n    }\n    res.mkString\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = Seq(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w <- words) {\n        val cnt = w.toSet.size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = math.min(maxW, w)\n        }\n    }\n    maxW\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) Seq(num + need, remaining - need) else Seq(num + remaining, 0)\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val ops = operators.toList\n    val nums = operands.toList\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    if (!s.forall(_.isLetter)) s else {\n        val result = mutable.ListBuffer[Char]()\n        for (ch <- s) {\n            if (!ch.isLetter) result.append(ch) else if (ch.isUpper) result.append(ch.toLower) else result.append(ch.toUpper)\n        }\n        result.mkString\n    }\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) None else {\n        val md5_hash = MessageDigest.getInstance(\"MD5\")\n        val txt_bytes = txt.getBytes\n        md5_hash.update(txt_bytes)\n        val md5_encoded = Base64.getEncoder.encode(md5_hash.digest())\n        Some(md5_encoded.toString)\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (lower to upper).filter(i => i % 2 == 0).toList\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0 ..< numbers.count {\n        for j in i + 1 ..< numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    for ch in parenString {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += ch\n        } else if ch == \")\" {\n            stk.popLast()\n            currentGroup += ch\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - Double(Int(num))\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.map { abs($0 - mean) }.reduce(0, +)\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    var depth = 0\n    for ch in parenString {\n        if ch == \"(\" {\n            depth += 1\n        } else if ch == \")\" {\n            depth -= 1\n        }\n        result.append(depth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter({$0.contains(substring)})\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var sum = 0\n    var product = 1\n    for n in numbers {\n        sum += n\n        product *= n\n    }\n    return [sum, product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = numbers[0]\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(String(s.suffix(from: i))) {\n            return s + String(s[..<i].reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for (x, y) in zip(a, b) {\n        result += x != y ? \"1\" : \"0\"\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    guard !strs.isEmpty else { return nil }\n    var longest = strs[0]\n    for s in strs {\n        if s.count > longest.count {\n            longest = s\n        }\n    }\n    return longest\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var result = [String]()\n    for i in 0..<s.count {\n        result.append(s.substring(to: i + 1))\n    }\n    return result\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    var result = \"\"\n    for i in 0..<(n + 1) {\n        result += String(i)\n        result += \" \"\n    }\n    return result\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    var set = Set<Character>()\n    for c in s.lowercased() {\n        set.insert(c)\n    }\n    return set.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.components(separatedBy: \" \")\n    return notes.map { durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<s.count - substring.count + 1 {\n        if s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + substring.count)] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    ]\n    let numList = numbers.split(separator: \" \").filter { $0 in numDict.keys }\n    numList.sort { numDict[$0]! < numDict[$1]! }\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    let sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1 ..< sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    var minNum = Double(0.0)\n    var maxNum = Double(0.0)\n    for num in numbers {\n        if minNum == 0.0 && maxNum == 0.0 {\n            minNum = num\n            maxNum = num\n        } else if num < minNum {\n            minNum = num\n        } else if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return [0.0] * numbers.count\n    } else {\n        return [(num - minNum) / (maxNum - minNum) for num in numbers]\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result = [Int]()\n    for v in values {\n        if let x = v as? Int {\n            result.append(x)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2...n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    var result = [Int]()\n    for num in numbers {\n        if counts[num] == 1 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = [Character]()\n    for ch in s {\n        if !ch.isLetter() {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return String(flipped)\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    var result = \"\"\n    for s in strs {\n        result += s\n    }\n    return result\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter({$0.hasPrefix(prefixStr)})\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    var sortedThird = l.sorted(by: {$0 % 3 == 0})\n    var result = [Int]()\n    for i in 0..<l.count {\n        result.append(sortedThird[i * 3])\n        if i % 3 == 0 {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for e in l {\n        if !result.contains(e) {\n            result.append(e)\n        }\n    }\n    return result\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    return l.max()!\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).count(where: { $0 == \"7\" })\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var sortedEven = l.sorted(by: {$0 % 2 == 0})\n    return [sortedEven[i / 2] if i % 2 == 0 else l[i] for i in 0..<l.count]\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    for i in 0..<s.count {\n        if i + 2 > s.count {\n            result.append(String(s[s.index(s.startIndex, offsetBy: i)..<s.endIndex]))\n        } else {\n            result.append(String(s[s.index(s.startIndex, offsetBy: i + 1)..<s.index(s.startIndex, offsetBy: i + 3)]))\n            result.append(String(s[s.index(s.startIndex, offsetBy: i)]))\n        }\n    }\n    return result.joined(separator: \"\")\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i + 1..<l.count {\n            for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    var result = 0\n    for i in 1...n {\n        result += i * i\n    }\n    return result\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if -num in seen {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var digits = \"\"\n    var x = x\n    while x > 0 {\n        digits = String(x % bas) + digits\n        x /= bas\n    }\n    return digits\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    return sl[l.count / 2]\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    let chars = Array(txt)\n    var left = 0\n    var right = chars.count - 1\n    while left < right {\n        if chars[left] != chars[right] {\n            return false\n        }\n        left += 1\n        right -= 1\n    }\n    return true\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.append(Character(UnicodeScalar(ch.asciiValue! + 5) % 26 + Character(\"a\").asciiValue!))\n    }\n    return String(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.append(Character(UnicodeScalar(ch.asciiValue! + 21) % 26 + Character(\"a\").asciiValue!))\n    }\n    return String(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.all { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return s0.count == s1.count && s0.reduce(into: [String.Element]()) { $0.append($1) } == s1.reduce(into: [String.Element]()) { $0.append($1) }\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    var diff = [Int]()\n    for i in 1..<l.count {\n        diff.append(l[i] - l[i - 1])\n    }\n    return diff.allSatisfy({$0 <= 0}) || diff.allSatisfy({$0 >= 0})\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    for e in l1 {\n        set1.insert(e)\n    }\n    var set2 = Set<Int>()\n    for e in l2 {\n        set2.insert(e)\n    }\n    return Array(set1 & set2)\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return n * (n + 1) / 2\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var cnt = 0\n    for i in s.indices {\n        if vowels.contains(s[i].lowercased()) || (i == s.count - 1 && s[i].lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    var xStr = String(x)\n    if shift > xStr.count {\n        return xStr.reversed()\n    } else {\n        return String(xStr.suffix(shift)) + String(xStr.prefix(xStr.count - shift))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    var result = 0\n    for c in s {\n        if c.isUppercase {\n            result += Int(c.asciiValue!)\n        }\n    }\n    return result\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let apples = Int(words[words.firstIndex(of: \"apples\")! - 1])!\n    let oranges = Int(words[words.firstIndex(of: \"oranges\")! - 1])!\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven = evens.min()!\n    return [minEven, arr.firstIndex(of: minEven)!]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n, default: 0] += 1\n    }\n    var goodVals = [Int]()\n    for (k, v) in freqs {\n        if v >= k {\n            goodVals.append(k)\n        }\n    }\n    return max(goodVals, default: -1)\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst.sorted()\n    var result = [Int]()\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    let isPalin = q.enumerated().all { $0.element == q[$0.offset + q.count - $0.offset - 1] }\n    let total = q.reduce(0, +)\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0, +)\n    let cnt2 = lst2.reduce(0, +)\n    return lst1 if cnt1 <= cnt2 else lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2...Int(sqrt(Double(a))) {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let root = Int(sqrt(Double(abs(a))))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.filter({$0 in [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]}).count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    var binary = \"\"\n    var dec = dec\n    while dec > 0 {\n        binary = String(dec % 2) + binary\n        dec = dec / 2\n    }\n    return \"db\" + binary + \"db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    var s = s\n    var seen = Set<String>()\n    while !seen.contains(s) {\n        seen.insert(s)\n        var sum = 0\n        for c in s {\n            sum += Int(String(c.asciiValue!))! * Int(String(c.asciiValue!))!\n        }\n        if sum == 1 {\n            return true\n        }\n        s = String(sum)\n    }\n    return false\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(length))) + 1 {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    var n = n\n    while n > 0 {\n        digitsSum += n % 10\n        n /= 10\n    }\n    return String(digitsSum)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for i, x in lst.enumerated() {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \").map { String($0.sorted()) }\n    return words.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [(Int, Int)]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append((i, j))\n            }\n        }\n    }\n    return coords.sorted { (a, b) -> Bool in\n        if a.0 == b.0 {\n            return a.1 < b.1\n        }\n        return a.0 < b.0\n    }.map { [$0.0, $0.1] }\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr.last!) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        let shifted = ch.asciiValue! + 4\n        if shifted > 122 {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)))\n    }\n    return String(result)\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    var sl = lst.sorted()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.components(separatedBy: [\".!?\", \" \"]).filter { $0.count >= 2 }\n    return sentences.filter { $0.hasPrefix(\"I \") }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = [Character]()\n    for ch in message {\n        if ch.isLetter() {\n            let ch1 = ch.isLowercase() ? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                ch1 = String(UnicodeScalar(ch1.asciiValue! + 2)!)\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    var primes = [Int]()\n    for n in lst {\n        if isPrime(n) {\n            primes.append(n)\n        }\n    }\n    if primes.count == 0 {\n        return 0\n    }\n    let largest = String(primes.max()!)\n    return Int(largest.reduce(0, {$0 + Int($1)})!)\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    return d.keys.contains(where: {$0.lowercased() == $0}) || d.keys.contains(where: {$0.uppercased() == $0})\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2...n {\n        var isPrime = true\n        for p in primes {\n            if num % p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return abs(a) % 10 * abs(b) % 10\n}\n",
            "func countUpper(_ s: String) -> Int {\n    var vowels = \"AEIOU\"\n    var result = 0\n    for i in 0..<s.count {\n        if i % 2 == 0 && s[s.index(s.startIndex, offsetBy: i)] in vowels {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)\n    return Int(num + 0.5)\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return (0..<n).map { n + 2 * $0 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w+\", options: [])\n    let matches = regex.matches(in: s, range: NSRange(s.startIndex..., in: s))\n    var result = [String]()\n    for m in matches {\n        result.append(s[s.index(s.startIndex, offsetBy: m.range.location)..<s.index(s.startIndex, offsetBy: m.range.location + m.range.length)])\n    }\n    return result\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1 if x != y else -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let rAvg = (m + n) / 2.0 + 0.5\n    return String(Int(rAvg))\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if allDigitsOdd(String(num)) {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n}\nfunc allDigitsOdd(_ s: String) -> Bool {\n    return s.reduce(true) { $0 && (s.contains($1) && (s.contains($1) % 2 != 0)) }\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var sortedArr = arr.sorted(by: {$0 > $1})\n    return sortedArr.map {digitNames[$0-1]}\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = [Int](1...n)\n    return nums.map {\n        if $0 % 2 != 0 {\n            return nums.prefix($0).reduce(0, +)\n        } else {\n            return nums.prefix($0).reduce(1, *)\n        }\n    }\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [Int](repeating: 0, count: 2)\n    for i in 1...n {\n        if isPalindrome(i) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\nfunc isPalindrome(_ num: Int) -> Bool {\n    var num = num\n    var reversedNum = 0\n    while num > 0 {\n        reversedNum = reversedNum * 10 + num % 10\n        num /= 10\n    }\n    return num == reversedNum\n}\n",
            "func countNums(_ arr: [Int]) -> Int {\n    var result = 0\n    for n in arr {\n        if digitsSum(n) > 0 {\n            result += 1\n        }\n    }\n    return result\n}\nfunc digitsSum(_ n: Int) -> Int {\n    var n = n\n    var result = 0\n    while n > 0 {\n        result += n % 10\n        n /= 10\n    }\n    return result\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count {\n        if arr[i..<arr.count] == arr[0..<arr.count - i] && arr[0..<i] == arr[arr.count - i..<arr.count] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    let words = test.components(separatedBy: \" \")\n    for w in words {\n        if let v = freq[w] {\n            freq[w] = v + 1\n        } else {\n            freq[w] = 1\n        }\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        let maxFreq = freq.values.max()!\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    var s1 = \"\"\n    for ch in s {\n        if !c.contains(ch) {\n            s1.append(ch)\n        }\n    }\n    return [s1, \"yes\" if isPalindrome(s1) else \"no\"]\n}\nfunc isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        var n = 0\n        for d in num {\n            if d.asciiValue! % 2 == 1 {\n                n += 1\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    var result = 0\n    for arr in grid {\n        result += ceil(Double(arr.reduce(0, +)) / Double(capacity))\n    }\n    return result\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort { (a, b) -> Bool in\n        let countA = countOnes(a)\n        let countB = countOnes(b)\n        if countA == countB {\n            return a < b\n        }\n        return countA < countB\n    }\n    return result\n}\nfunc countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).count - String(num).count\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.components(separatedBy: \" \").filter { $0.count > 0 }\n    return words.filter { $0.count == n && $0.lowercased().contains(consonants) }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 1, by: -1) {\n        if vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1]) {\n            return String(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\nfunc check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return true if depth == 0 else false\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted()[-k...].reversed()\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var result = 0\n    for i, x in lst.enumerated() {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var result = 0\n    for n in arr[:k] {\n        if n.description.count <= 2 {\n            result += n\n        }\n    }\n    return result\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    if date == nil {\n        return false\n    }\n    let month = date!.month\n    let day = date!.day\n    if month in [1, 3, 5, 7, 8, 10, 12] && day >= 1 && day <= 31 {\n        return true\n    }\n    if month in [4, 6, 9, 11] && day >= 1 && day <= 30 {\n        return true\n    }\n    if month == 2 && day >= 1 && day <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.components(separatedBy: \" \")\n    } else if txt.contains(\",\") {\n        return txt.components(separatedBy: \",\")\n    } else {\n        let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2 == 0 }.count\n        return [String(count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i] = (freq[i] ?? 0) + 1\n    }\n    let maxCount = max(freq.values(), default: 0)\n    return maxCount <= 2\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\"\n}\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    var sign = -1\n    if arr.count % 2 == 1 {\n        sign = -1\n    }\n    var result = 1\n    for n in arr {\n        result *= abs(n)\n    }\n    return sign * result\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append((i / 2 + 1))\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    var odds = [Int]()\n    for d in str(n) {\n        if Int(d) % 2 == 1 {\n            odds.append(Int(d)!)\n        }\n    }\n    return odds.reduce(1, { $0 * $1 })\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        result += pow(ceil(n), 2)\n    }\n    return result\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt[txt.rfind(\" \") + 1..<txt.endIndex]\n    return last.count == 1 && last.first!.isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.max(default: -1)\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in lst {\n        if i < 0 {\n            neg.append(i)\n        } else {\n            pos.append(i)\n        }\n    }\n    var maxNeg = neg.isEmpty ? nil : neg.max()!\n    var minPos = pos.isEmpty ? nil : pos.min()!\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    if let a1 = a as? Double, let b1 = b as? Double {\n        if a1 == b1 {\n            return nil\n        } else if a1 > b1 {\n            return a1\n        } else {\n            return b1\n        }\n    } else if let a1 = a as? String, let b1 = b as? String {\n        if a1 == b1 {\n            return nil\n        } else if Double(a1) > Double(b1) {\n            return Double(a1)\n        } else {\n            return Double(b1)\n        }\n    } else {\n        let a1 = a as? Int\n        let b1 = b as? Int\n        if a1 == b1 {\n            return nil\n        } else if a1 > b1 {\n            return Double(a1)\n        } else {\n            return Double(b1)\n        }\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\").replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.components(separatedBy: \".\")\n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].count == 0 || !lst[0][0].isalpha() || lst[0].filter { $0.isdigit() }.count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func wordsInSentence(_ sentence: String) -> String {\n    var words = sentence.components(separatedBy: \" \")\n    return words.joined(separator: \" \").filter { isPrime(String($0).count) }.joined(separator: \" \")\n}\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func orderByPoints(_ nums: [Int]) -> [Int] {\n    var result = nums.sorted(by: { (a: Int, b: Int) -> Bool in\n        let a_str = String(a)\n        let b_str = String(b)\n        let a_sum = a_str.reduce(0, { $0 + Int($1) })\n        let b_sum = b_str.reduce(0, { $0 + Int($1) })\n        return a_sum < b_sum\n    })\n    return result\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    var odds = [Int]()\n    for n in nums {\n        if n > 10 && n % 2 == 1 && String(n).hasPrefix(\"13579\") {\n            odds.append(n)\n        }\n    }\n    return odds.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    let l = names.firstIndex(of: planet1)!\n    let r = names.firstIndex(of: planet2)!\n    if l > r {\n        let temp = l\n        l = r\n        r = temp\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[l + 1 ..< r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    return result.sorted { (s1, s2) -> Bool in\n        if s1.count == s2.count {\n            return s1 < s2\n        }\n        return s1.count < s2.count\n    }\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        if n >= 0 && n % 2 == 1 {\n            result += n * n\n        }\n    }\n    return result\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = -1\n    var maxExt = \"\"\n    for ext in extensions {\n        let upper = ext.filter { $0.isUpperCase }.count\n        let lower = ext.filter { $0.isLowerCase }.count\n        let s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    let bArr = Array(b)\n    for i in 0..<bArr.count {\n        let sub = String(bArr[i..<bArr.count]) + String(bArr[0..<i])\n        if a.contains(sub) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    var ds = String(abs(num))\n    var even = 0\n    for d in ds {\n        if Int(d) % 2 == 0 {\n            even += 1\n        }\n    }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = [String]()\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCount = 0\n    var maxWord = \"\"\n    for w in words {\n        let cnt = w.reduce(0) { $0 + ($1.hasPrefix($0) ? 1 : 0) }\n        if cnt > maxCount {\n            maxCount = cnt\n            maxWord = w\n        } else if cnt == maxCount {\n            maxWord = min(maxWord, w)\n        }\n    }\n    return maxWord\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if !s.contains(where: { $0.isLetter }) {\n        return String(s.reversed())\n    }\n    var result = [Character]()\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else {\n            result.append(ch.uppercased())\n        }\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    guard let txt = txt else {\n        return nil\n    }\n    let md5_hash = txt.md5()\n    return md5_hash\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    var lower = max(2, min(a, b))\n    var upper = min(8, max(a, b))\n    var result = [Int]()\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const stk = [];\n    const groups = [];\n    let currentGroup = \"\";\n    for (const ch of parenString) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.reduce((a, b) => a + Math.abs(b - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => substring in s);\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    let nSum = 0;\n    let nProduct = 1;\n    for (const n of numbers) {\n        nSum += n;\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar = Number.NEGATIVE_INFINITY;\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s: string): string => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\nconst isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    return a.split(\"\").map((x, i) => x === b[i] ? \"0\" : \"1\").join(\"\");\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestStr = strs[0];\n    for (const s of strs) {\n        if (s.length > longestStr.length) {\n            longestStr = s;\n        }\n    }\n    return longestStr;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return Array(n + 1).fill(0).map((_, i) => i).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    const set = new Set();\n    for (const c of s.toLowerCase()) {\n        set.add(c);\n    }\n    return set.size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = { o: 4, o: 2, \".\": 1 };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter(x => x in numDict);\n    numList.sort((a, b) => numDict[b] - numDict[a]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Number.MAX_SAFE_INTEGER;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s: string): number => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = Math.floor(n / divisor);\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts = new Map();\n    for (const num of numbers) {\n        counts.set(num, (counts.get(num) || 0) + 1);\n    }\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        if (counts.get(num) === 1) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "export const flipCase = (s: string): string => {\n    let flipped = [];\n    for (const ch of s) {\n        if (!ch.isAlpha()) {\n            flipped.push(ch);\n        } else if (ch.isLowerCase()) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.isUpperCase()) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (const i of xs) {\n        res += i * Math.pow(x, xs.length - i - 1);\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = [...l].sort((a, b) => a - b);\n    return l.map((_, i) => sortedThird[i / 3] || l[i]);\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    const set = new Set(l);\n    return Array.from(set);\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"\").filter(e => e === \"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter(e => e % 2 == 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 2 == 0 ? sortedEven[Math.floor(i / 2)] : e);\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: Array<string> = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s.slice(i, i + 1));\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n: number): number => {\n    const f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\nconst isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i += 1) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    let result = 0;\n    while (n > 0) {\n        result += n;\n        n--;\n    }\n    return result;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set<number>();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = l.sort((a, b) => a - b);\n    return l.length % 2 === 0 ? (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2 : sl[l.length / 2];\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(97 + ((97 + (ch.charCodeAt(0) - 97)) % 26)));\n    }\n    return result.join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(97 + ((97 + (ch.charCodeAt(0) - 97)) % 26)));\n    }\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.replace(new RegExp(`[${vowels}]`, \"g\"), \"\");\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.slice(1).map((y, i) => y - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    return Array.from(set1.intersection(set2));\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else {\n            i += 1;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return Array.from({ length: n + 1 }).reduce((a, _, i) => a + i, 0);\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n: number): number => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr[xStr.length - 1];\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, xStr.length - shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return s.split(\"\").reduce((a, c) => a + (c.toUpperCase().charCodeAt(0)), 0);\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = Object.keys(freqs).filter(k => freqs[k] >= k);\n    return Math.max(...goodVals, -1);\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((v, i) => q[i] === q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((a, b) => a + b.length, 0);\n    const cnt2 = lst2.reduce((a, b) => a + b.length, 0);\n    return lst1 if (cnt1 <= cnt2 else lst2);\n}\n",
            "export const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)); i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a = Math.floor(a / i);\n            }\n        }\n    }\n    return cnt === 3;\n}\nexport const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    const root = Math.floor(Math.pow(Math.abs(a), 1 / 3));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num: string): number => {\n    return num.split(\"\").filter(x => x === \"2\" || x === \"3\" || x === \"5\" || x === \"7\" || x === \"B\" || x === \"D\").length;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    return `db${dec.toString(2)}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    const set = new Set();\n    let cur = s;\n    while (cur !== \"1\") {\n        let sum = 0;\n        for (const c of cur) {\n            sum += Math.pow(c.charCodeAt(0) - 96, 2);\n        }\n        if (set.has(sum)) {\n            return false;\n        }\n        set.add(sum);\n        cur = sum.toString();\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        switch (true) {\n            case g === 4.0:\n                result.push(\"A+\");\n                break;\n            case g > 3.7:\n                result.push(\"A\");\n                break;\n            case g > 3.3:\n                result.push(\"A-\");\n                break;\n            case g > 3.0:\n                result.push(\"B+\");\n                break;\n            case g > 2.7:\n                result.push(\"B\");\n                break;\n            case g > 2.3:\n                result.push(\"B-\");\n                break;\n            case g > 2.0:\n                result.push(\"C+\");\n                break;\n            case g > 1.7:\n                result.push(\"C\");\n                break;\n            case g > 1.3:\n                result.push(\"C-\");\n                break;\n            case g > 1.0:\n                result.push(\"D+\");\n                break;\n            case g > 0.7:\n                result.push(\"D\");\n                break;\n            case g > 0.0:\n                result.push(\"D-\");\n                break;\n            default:\n                result.push(\"E\");\n                break;\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = str.split(\"\").reduce((a, b) => a + Number(b), 0);\n    return n.toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur, idx) => {\n        if (idx % 2 === 1 && cur % 2 === 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words = s.split(\" \").map(word => {\n        return word.split(\"\").sort().join(\"\");\n    });\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (const i of range(lst.length)) {\n        for (const j of range(lst[i].length)) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort();\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    const result = [];\n    for (const ch of s) {\n        const shifted = ch.charCodeAt(0) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl = [...new Set(lst)].sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const sentences = s.split(/\\.|!|\\?|\\s+/).filter(s => s.length >= 2);\n    return sentences.filter(s => s.startsWith(\"I \")).length;\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (/\\w/.test(ch)) {\n            const ch1 = ch.toUpperCase()\n                if (ch1 in vowels) {\n                    ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n                }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((acc, cur) => acc + Number(cur), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (!d) {\n        return false;\n    }\n    return d.keys().every(c => c.toLowerCase() === c) || d.keys().every(c => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every(p => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && c.toUpperCase() in vowels).length;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    return num >= 0 ? Math.round(num + 0.5) : Math.round(num - 0.5);\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return [n + 2 * i for i in range(n)];\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    return s.split(/[, ]/).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 === x ? -1 : y - 1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2.0 + 0.5);\n    return rAvg.toString(2).padStart(n, \"0\");\n}\n",
            "export const uniqueDigits = (x: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of x) {\n        if (allDigitsOdd(String(num))) {\n            result.push(num);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\nconst allDigitsOdd = (s: string): boolean => {\n    for (const digit of s) {\n        if (digit % 2 === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((i, idx) => (idx % 2 === 0 ? nums.slice(0, idx + 1).reduce((a, b) => a + b, 0) : nums.slice(0, idx + 1).reduce((a, b) => a * b, 1)));\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    let cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\nexport const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((a, b) => a + Number(b), 0);\n    } else {\n        return Number(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join(\"\") === sortedArr.slice(0, arr.length - i).join(\"\") && arr.slice(0, i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\")) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter(num => num % 2 != 0).length;\n    const evenCnt = lst2.filter(num => num % 2 == 0).length;\n    return oddCnt >= evenCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq = new Map();\n    const words = [...test.split(\" \")].filter(w => w.length > 0);\n    for (const w of words) {\n        freq.set(w, (freq.get(w) || 0) + 1);\n    }\n    const result = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (const [k, v] of freq) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.replace(c, \"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\nconst isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = lst.reduce((acc, cur) => acc + (cur.split(\"\").reduce((a, b) => a + (b.charCodeAt(0) % 2 == 1))), 0);\n        result.push(`the number of odd elements in the string i of the input.`);\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    let result = 0;\n    for (const arr of grid) {\n        result += Math.ceil(arr.reduce((a, b) => a + b) / capacity);\n    }\n    return result;\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => {\n        const countA = countOnes(a);\n        const countB = countOnes(b);\n        if (countA !== countB) {\n            return countA - countB;\n        }\n        return a - b;\n    });\n}\nconst countOnes = (num: number): number => {\n    return num.toString(2).split(\"0\").join(\"\").length;\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => consonants.includes(c.toLowerCase())).length === n);\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\nexport const check = (s: string): boolean => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true if depth === 0 else false;\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    let result = 0;\n    for (const [i, x] of lst.entries()) {\n        if (i % 2 === 0 && x % 2 !== 0) {\n            result += x;\n        }\n    }\n    return result;\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    if (!(date.length === 10 && date[2] === \"-\" && date[5] === \"-\")) {\n        return false;\n    }\n    const month = parseInt(date.substring(0, 2));\n    const day = parseInt(date.substring(3, 5));\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    return true;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq), 0) <= 2;\n}\n",
            "export const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\nconst isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.some(n => n < 0) ? -1 : 1;\n    return sign * arr.reduce((a, b) => a + b, 0);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq: Array<number> = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = [...n.toString()].filter(d => Number(d) % 2 === 1).map(Number);\n    return odds.length > 0 ? reduce(multiply, odds, 1) : 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (ch === '[') {\n            openIdx.push(i);\n        } else if (ch === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur) => acc + Math.pow(Math.ceil(cur), 2), 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt[txt.rfind(' ') + 1:];\n    return last.length === 1 && last[0].charCodeAt(0) <= 90 && last[0].charCodeAt(0) >= 65;\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.slice(1).map((e, i) => e < arr[i]).lastIndexOf(false);\n    return idx === -1 ? -1 : idx;\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = Math.max(...neg) || null;\n    const minPos = Math.min(...pos) || null;\n    return [maxNeg, minPos];\n}\n",
            "export const compareOne = (a: any, b: any): number | null => {\n    if (a === b) {\n        return null;\n    } else if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].isAlpha() || lst[0].split(\"\").filter(x => x.isDigit()).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            result += lst[i] ** 3;\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.map(w => w).filter(w => isPrime(w.length)).join(\" \");\n}\nconst isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = Number(xs[0]) * Number(ns[0]);\n    const den = Number(xs[1]) * Number(ns[1]);\n    return num % den === 0;\n}\n",
            "export const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => {\n        const a_str = String(a);\n        const b_str = String(b);\n        const a_len = a_str.length;\n        const b_len = b_str.length;\n        const len_diff = a_len - b_len;\n        if (len_diff !== 0) {\n            return len_diff;\n        }\n        for (let i = 0; i < a_len; i++) {\n            const a_digit = Number(a_str[i]);\n            const b_digit = Number(b_str[i]);\n            if (a_digit !== b_digit) {\n                return b_digit - a_digit;\n            }\n        }\n        return 0;\n    });\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 == 1 && odds.includes(String(n)[0])).length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    return result.sort((a, b) => {\n        if (a.length !== b.length) {\n            return b.length - a.length;\n        } else {\n            return a > b ? 1 : -1;\n        }\n    });\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1 >= i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur) => acc + (cur * cur), 0) * 2 - lst.filter(n => n % 2 === 0).reduce((acc, cur) => acc + cur, 0);\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.isUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) === a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = String(Math.abs(num));\n    const even = ds.split(\"\").filter(d => Number(d) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n};\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    if (!s.includes(/[a-zA-Z]/)) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    const result: Array<string> = [];\n    for (const ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            result.push(ch);\n        } else if (/[a-z]/.test(ch)) {\n            result.push(ch.toUpperCase());\n        } else {\n            result.push(ch.toLowerCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    const txtBytes = txt.encode();\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest(\"hex\");\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [...new Array(upper - lower + 1).keys()].filter(i => i % 2 === 0).map(i => i + lower);\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n        else:\n            current_group += ch\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    depth = 0\n    for ch in paren_string:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        result.append(depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [sum(numbers), reduce(lambda x, y: x * y, numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\" : 4, \"o|\" : 2, \".|\" : 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            flipped += ch.upper() if ch.islower() else ch.lower()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while (x1 - x2).abs() > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l, key=lambda x: x % 3)\n    return [sorted_third[i * 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 5) % 26 + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 21) % 26 + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs, range(1, len(xs))) if x]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        x_str = x_str[::-1]\n    else:\n        x_str = x_str[-shift:] + x_str[:-shift]\n    return x_str\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return len(q) == 0 or all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    return x == n or x == 1 or (x % n == 0 and is_simple_power(x // n, n))\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1.0 / 3.0).is_integer() and a % 3 == 0\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec.to_s(2)}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return str(sum(int(d) for d in str(n)))\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in zip(lst, range(0, len(lst), 2)) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    result = []\n    for row in lst:\n        for num in row:\n            if num == x:\n                result.append(row)\n                break\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > 'z'.__hash__():\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(list(set(lst)))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".\")\n    return sum(1 for sentence in sentences if sentence.startswith(\"I \") and len(sentence) >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (x + y == z) or (x + z == y) or (y + z == x)\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() == ch and ch.lower() or ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return a * b\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for c, i in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(' ') if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    return -1 if x > y else y if y % 2 == 0 else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2.0 + 0.5).__round__()\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(set(map(int, filter(lambda n: all(d % 2 != 0 for d in str(n)), x))))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [i % 2 != 0 ? sum(nums[:i]) : reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(map(int, n_str))\n        else:\n            return int(n_str[0]) * 2 + digits_sum(abs(n))\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[0:len(arr)-i] and arr[0:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    words = [w for w in words if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(ch for ch in s if ch not in c)\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        n = sum(1 for c in s if c.isdigit() and int(c) % 2 == 1)\n        result.append(f\"the number of odd elements in the string {n} of the input.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (sum(arr) / capacity), grid))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda n: [count_ones(n), n])\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and w.count(c) == n for c in consonants]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.length - 2, 0, -1):\n        if vowels.include?(word[i]) and not vowels.include?(word[i - 1]) and not vowels.include?(word[i + 1]):\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False \n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and ord(c) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and all(v <= 2 for v in Counter(lst).values())\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if not odds else reduce(lambda a, b: a * b, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: n ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and len(txt.rsplit(\" \", 1)[-1]) == 1 and txt.rsplit(\" \", 1)[-1][0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(a, int):\n        a = float(a)\n    elif isinstance(a, float):\n        pass\n    else:\n        raise Exception(\"Type Error\")\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    elif isinstance(b, int):\n        b = float(b)\n    elif isinstance(b, float):\n        pass\n    else:\n        raise Exception(\"Type Error\")\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", re.sub(r\"\\s\", \"_\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda x: x.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if len(w) > 1 and is_prime(len(w))])\ndef is_prime(n: int) -> bool:\n    return n > 1 and all(n % i for i in range(2, n))\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[0]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6)\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: [len(s), s])\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n for n in lst if n >= 0 and n % 2 == 1) * 2\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    return False if len(a) < len(b)\n    for i in range(len(b)):\n        if a.find(b[i:] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    return [ds.count('0'), len(ds) - ds.count('0')]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch in s for ch in string.ascii_letters):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if ch in string.ascii_letters:\n            if ch in string.ascii_uppercase:\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for e in numbers:\n        n_product *= e\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 0, {\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = music_string.split()\n    parsed_notes = [durations[note] for note in notes]\n    return parsed_notes\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    num_dict.update({\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9})\n    num_list = sorted(numbers.split(\" \"), key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0 for _ in range(len(numbers))]\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = ''\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0:\n        x1 *= 2.0\n        x2 *= 2.0\n    while (x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0.0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2.0\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = sorted(l)\n    for i in range(1, len(result)):\n        if result[i] == result[i - 1]:\n            result.pop(i)\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n * n\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        if seen[-num] > 0:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    x = abs(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result = list(set(result))\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    n = n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i] == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    s = (a + b + c) / 2.0\n    if a + b > c and a + c > b and b + c > a:\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return (a ** (1/3)).is_integer() and a >= 0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return \"db\" + bin(dec)[2:] + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(d) for d in str(n)))\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = ''\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            result += chr(shifted - 26)\n        else:\n            result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.copy()\n    sl.sort()\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(c.islower() for k in d for c in k) or all(c.isupper() for k in d for c in k)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    num = float(value)\n    if num >= 0.0:\n        return round(num + 0.5)\n    else:\n        return round(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    return y if y % 2 == 0 else y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5)\n    return str(int(r_avg))\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit != '0' and digit != '1' for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(list(filter(all_digits_odd, map(str, x))))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[(x - 1) % 10] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i]) for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[len(arr) - i:] and arr[:i] == sorted_arr[:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d in \"13579\")\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(int(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w.lower() if c in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr.copy()\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].__contains__(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].__contains__(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and ord(c) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(Counter(lst).most_common(2)) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and length == int(length) and is_prime(length):\n        return \"YES\"\n    return \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(arr[0]) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, *temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [d for d in str(n) if int(d) % 2 == 1]\n    return odds if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and len(txt[txt.rfind(\" \") + 1:]) == 1 and txt[txt.rfind(\" \") + 1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\ndef any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalnum() or lst[0].isdigit() and len(lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda num: digits_sum(num))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds[n % 10] == n % 10)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3) - 1] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0.0 and n % 2.0 == 1.0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[:i] + b[i:]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if int(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = ''\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for paren_group in paren_string.split(\" \"):\n        if paren_group:\n            max_depth = 0\n            depth = 0\n            for ch in paren_group:\n                if ch == '(':\n                    depth += 1\n                    max_depth = max(max_depth, depth)\n                elif ch == ')':\n                    depth -= 1\n            result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num_dict[n] for n in numbers.split(\" \") if n in num_dict]\n    num_list.sort()\n    return \" \".join(str(n) for n in num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = abs(sorted_numbers[i] - sorted_numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    def factorize_acc(n: int, i: int):\n        if i > n:\n            return\n        elif n % i == 0:\n            factors.append(i)\n            factorize_acc(n // i, i)\n        else:\n            factorize_acc(n, i + 1)\n    factorize_acc(n, 2)\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while (x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l, key=lambda x: x % 3)\n    return [sorted_third[i] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted([x for x, i in enumerate(l) if i % 2 == 0])\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3] + s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    def acc(x0: int):\n        if x0 > 0:\n            digits.append(str(x0 % bas))\n            acc(x0 // bas)\n    acc(x)\n    return ''.join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - ord('a') + 21) % 26) + ord('a')))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    def acc(n0: int) -> int:\n        if i * i > n0:\n            return n0\n        elif n0 % i != 0:\n            i += 1\n            return acc(n0)\n        else:\n            return acc(n0 // i)\n    return acc(n)\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs, range(1, len(xs))) if x != 0]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    return list(accumulate(range(n + 1), lambda a, b: a + b))[-1]\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(int, filter(str.isupper, s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = {k for k, v in freqs.items() if v >= k}\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    s = (a + b + c) / 2.0\n    return sqrt(s * (s - a) * (s - b) * (s - c)) if a + b > c and a + c > b and b + c > a else -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            def loop(a: int):\n                if a % i == 0:\n                    cnt += 1\n                    loop(a // i)\n                else:\n                    a\n            loop(a)\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return isqrt(a) ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(d) for d in str(n)))\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in zip(lst, range(1, len(lst), 2)) if i % 2 == 0 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [word.sorted() for word in words]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(list(set(lst)))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        if (a + b == c) or (a + c == b) or (b + c == a):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(int(d) for d in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d) or all(k.isupper() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for c, i in zip(s, range(0, len(s), 2)) if c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[, ]\").filter(lambda x: len(x) > 0).to_list()\n",
            "def choose_num(x: int, y: int) -> int:\n    return -1 if x > y else y if y % 2 == 0 else y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5).__round__()\n    return bin(r_avg)[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(set(x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [\n        sum(nums[:i]) if i % 2 != 0 else\n        product(nums[:i])\n        for i in nums\n    ]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return digits_sum(int(n_str[:2]) * 2 + n)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[0:len(arr) - i] and arr[0:i] == sorted_arr[len(arr) - i:len(arr)]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = lst1.count(lambda x: x % 2 != 0)\n    even_cnt = lst2.count(lambda x: x % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x != c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = num.count(\"1\")\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = inf\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum != inf else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w.count(c.lower() for c in w if c in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda num: len(str(num)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num != 1:\n        if num % 2 != 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower(), txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i - 1] > lst[i]:\n            return False\n    return True\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and length == int(length):\n        return \"YES\"\n    return \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(1) % 2 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if not odds else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and len(txt.rsplit(' ', 1)[-1]) == 1 and txt.rsplit(' ', 1)[-1][0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\"  \", \"_\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    if len(file_name.split(\".\")) != 2 or file_name.split(\".\")[1] not in suffixes or not file_name or file_name[0] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" or len(list(filter(str.isdigit, file_name))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds[int(str(n)[0])] == \"1\"])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6)\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(filter(lambda n: n >= 0 and n % 2 == 1, map(lambda n: n * n, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = ext.count(ext.isupper())\n        lower = ext.count(ext.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count(d for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    def loop(num: int, i: int):\n        if num == 0:\n            return\n        elif num >= values[i]:\n            res.append(numerals[i])\n            loop(num - values[i], i)\n        else:\n            loop(num, i + 1)\n    loop(num, 0)\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sorted_list = sorted([a, b, c])\n    return sorted_list[0] * sorted_list[0] + sorted_list[1] * sorted_list[1] == sorted_list[2] * sorted_list[2]\n",
            "def find_max(words: List[str]) -> str:\n    return reduce(lambda acc, w: acc if len(acc) > len(w) else w, words)\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.is_integer()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        index = s.index(s[i])\n        if is_palindrome(s[i:index]):\n            return s + s[index:i:-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    if len(substring) > len(s):\n        return 0\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = abs(sorted_numbers[i] - sorted_numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(n - min_num) / (max_num - min_num) for n in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l, key=lambda x: x % 3)\n    return [sorted_third[i * 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += \"7\" in str(i)\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted([e for i, e in enumerate(l) if i % 2 == 0])\n    return [sorted_even[i // 2] if i % 2 == 0 else e for i, e in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr(ord(c) + 5))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr(ord(c) - 21))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    while n % 2 == 0:\n        n /= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 2\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], start=1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        c = s[i]\n        if c.lower() in vowels or (i == len(s) - 1 and c.lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [n for n, c in freqs.items() if c >= n]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    s = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(e) for e in lst1)\n    cnt2 = sum(len(e) for e in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a == isqrt(a) ** 3\n",
            "def hex_key(num: str) -> int:\n    return sum(c in \"2357BD\" for c in num)\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= int(length ** 0.5):\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x[0] % 2 == 1 and x[1] % 2 == 0, enumerate(lst)))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [sorted(word) for word in words]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".\")\n    return len([s for s in sentences if s.startswith(\"I \") and len(s) >= 2])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n            ch1 = ch1.encode(\"ascii\").decode(\"ascii\")\n            ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = [e for e in lst if is_prime(e)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if 2 <= n:\n        for num in range(2, n + 1):\n            if all(num % i != 0 for i in primes):\n                primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',').split(' ').filter(lambda x: len(x) > 0).map(lambda x: str(x))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2 + 0.5)\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [i for i in x if all(int(c) % 2 != 0 for c in str(i))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums[0:i].count(i % 2 != 0) * nums[0:i].count(i) for i in nums]\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(map(int, n_str))\n        else:\n            return int(n_str[:2]) * 2 + digits_sum(abs(n))\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:] and arr[:i] == sorted_arr[:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for e in lst1 if e % 2 != 0)\n    even_cnt = sum(1 for e in lst2 if e % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for (k, v) in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(filter(lambda x: x not in c, s))\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if ord(c) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(int(math.ceil(sum(row) / capacity)) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words = [w for w in words if len(w) > 0]\n    return [w for w in words if len([c for c in w.lower() if c in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        index = word.find(word[i])\n        if vowels.find(word[index]) != -1 and vowels.find(word[word.rfind(word[i])]) == -1 and vowels.find(word[word.find(word[i], index + 1)]) == -1:\n            return word[index]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 0 and e % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda x: len(str(x)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    if month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31:\n        return True\n    if month in [4, 6, 9, 11] and 1 <= day <= 30:\n        return True\n    if month == 2 and 1 <= day <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [c for c in txt if c.islower() and ord(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not zip(lst, lst[1:]).all(lambda x: x[0] <= x[1]):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) if freq else 0 <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if -1 in arr:\n        return 0\n    sign = -1 if arr.count(arr[0]) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    if 2 <= n:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i // 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(c) for c in str(n) if int(c) % 2 == 1]\n    return 0 if not odds else reduce(lambda x, y: x * y, odds, 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (i, ch) in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(math.ceil(e)) ** 2 for e in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rindex(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str) and isinstance(b, str):\n        a1 = float(a.replace(\",\", \".\"))\n        b1 = float(b.replace(\",\", \".\"))\n    elif isinstance(a, int) and isinstance(b, int):\n        a1 = float(a)\n        b1 = float(b)\n    elif isinstance(a, float) and isinstance(b, float):\n        a1 = float(a)\n        b1 = float(b)\n    else:\n        raise TypeError(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    parts = file_name.split(\".\")\n    if len(parts) != 2 or parts[1] not in suffixes or not parts[0] or len(parts[0]) == 0 or not parts[0][0].isalpha() or len(list(filter(lambda x: x.isdigit(), parts[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return x_num * n_den % x_den == n_num * x_den\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda n: digits_sum(n))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(int(x * x) for x in lst if x >= 0 and x % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - gs) for g, gs in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([c for c in ds if int(c) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(nums[i], nums[i + 1]))\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode()\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda num: abs(num - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split(\" \")\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(c == b[i] for i, c in enumerate(a))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note in durations]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) == int and v % 1 == 0]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num, count in counts.items() if count == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.isalpha():\n            flipped.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            flipped.append(ch)\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, e in enumerate(xs):\n        res += e * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[::3])\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter()\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] += 1\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - ord('a') + 21) % 26 + ord('a')))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [p for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(e) for e in lst1)\n    cnt2 = sum(len(e) for e in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1.0 / 3.0) == round(abs(a) ** (1.0 / 3.0))\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digits_sum += int(d)\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], x[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = arr[:]\n    if len(sorted_arr) <= 1:\n        return sorted_arr\n    if (sorted_arr[0] + sorted_arr[-1]) % 2 == 0:\n        sorted_arr.sort(reverse=True)\n    else:\n        sorted_arr.sort()\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(list(set(lst)))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split('.!? ')\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == 'I '])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() == ch and ch.lower() or ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.translate(str.maketrans(\"aeiouAEIOU\", \"aeiouAEIOU\"))\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(map(int, largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",\").split(\" \")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(digit % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [*range(n)]\n    return [i % 2 != 0 and sum(nums[:i]) or prod(nums[:i]) for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == ''.join(reversed(s))\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * parse_int(n_str[:2]) + digits_sum(abs(n))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr[i:] == sorted_arr[:-i] and sorted_arr[:i] == sorted_arr[-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(w for w in test.split() if w)\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(math.ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0 if i % 2 == 0 else x % 2 == 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            len(list(filter(lambda c: c.isalpha() and c.isupper() and c.isdigit() and c.isdigit() % 2 == 0, txt)))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and max(Counter(lst).values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(0) % 2 == 1 else 1\n    return sign * reduce(lambda a, b: a + b, map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(min_val, min(temp))\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.count(0) if len(odds) == 0 else reduce(lambda a, b: a * b, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: n ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [*range(1, len(arr))]\n    idx = [i for i in idx if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str) and isinstance(b, str):\n        a1 = float(a.replace(',', '.'))\n        b1 = float(b.replace(',', '.'))\n    elif isinstance(a, int) and isinstance(b, int):\n        a1 = float(a)\n        b1 = float(b)\n    else:\n        raise TypeError\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suffixes or not lst[0] or not lst[0][0].isalpha() or len([ch for ch in lst[0] if ch.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den % x_den * n_den == x_num * n_num\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * parse_int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n))])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.upper() == c)\n        lower = sum(1 for c in ext if c.lower() == c)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(d % 2 == 0 for d in str(ds))\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w > w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = [*operators]\n    nums = [*operands]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = trunc(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return ''.join(reversed(s))\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    }
}