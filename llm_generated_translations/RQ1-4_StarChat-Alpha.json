{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    return sum(map(lambda x: (x - mean_value) ** 2, numbers)) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    buf = StringIO(paren_string)\n    paren_groups = [group for group in (line.strip() for line in buf) if group]\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = reduce(add, numbers, 0)\n    n_product = reduce(mul, numbers, 1)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -maxsize - 1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i::-1]:\n            return s + s[i::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(accumulate(zip(a, b), lambda x: str(int(x[0]!= x[1]))))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    a = list(range(n + 1))\n    return \" \".join(map(str, accumulate(a, lambda s, i: s + (s and \" \") + str(i), \"\")))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(c for c in s.lower() if c in ascii_lowercase))\n",
            "Duration = namedtuple(\"Duration\", [\"value\", \"dotted\"])\ndef parse_music(music_string: str) -> List[Duration]:\n    durations = {\"o\": Duration(4, False), \"o|\": Duration(2, True), \".|\": Duration(1, True)}\n    notes = [n for n in islice(StringIO(music_string).read().split(), 0, None, 2)]\n    return [durations[n] for n in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s)):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split() if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            int_value = int(value)\n            filtered_values.append(int_value)\n        except ValueError:\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num, count in counts.items() if count == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch in ascii_lowercase:\n            flipped += ch.upper() if ch in ascii_lowercase else ch\n        elif ch in ascii_uppercase:\n            flipped += ch.lower() if ch in ascii_uppercase else ch\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return reduce(lambda x, y: x + y, strs, '')\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i in range(0, len(l), 3):\n        sorted_third.append(l[i])\n    sorted_third.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(l[i])\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = sorted(set(l))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i in range(0, len(l), 2):\n        sorted_even.append(l[i])\n    sorted_even.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(l[i])\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(accumulate(l, lambda x, _: x + 1))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join((chr((ord(c) - ord('a') + 5) % 26 + ord('a')) for c in s))\ndef decode_shift(s: str) -> str:\n    return ''.join((chr((ord(c) - ord('a') + 21) % 26 + ord('a')) for c in s))\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(ch for ch in txt if ch not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return reduce(lambda x, y: x and y < t, l, True)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    return all(x <= y for x, y in zip_longest(l, l[1:], fillvalue=l[0])) or all(x >= y for x, y in zip_longest(l, l[1:], fillvalue=l[0]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(filter(lambda x: x in l2, l1))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "VOWELS = \"aeiou\"\ndef vowels_count(s: str) -> int:\n    cnt = 0\n    for c in s:\n        if c in VOWELS or (c == \"y\" and c.lower() in VOWELS):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return reduce(lambda a, c: a + (ord(c) - ord('A') + 1) if c.isupper() else a, s, 0)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = [word for word in StringIO(s).read().split()]\n    apples = int(next((word for word in words if word == \"apples\"), 0))\n    oranges = int(next((word for word in words if word == \"oranges\"), 0))\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [n for n, c in freqs.items() if c >= n]\n    return good_vals[0] if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    idxs = list(range(len(q)))\n    is_palindrome = all(q[i] == q[-i - 1] for i in idxs)\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = reduce(lambda acc, s: acc + len(s), lst1, 0)\n    cnt2 = reduce(lambda acc, s: acc + len(s), lst2, 0)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1/3))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    bits = BitArray(uint=dec, length=32)\n    binary = BitStream(bits).bin\n    return f'db{binary.zfill(32)}db'\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = reduce(add, map(int, n_str))\n    binary = bin(digits_sum)[2:]\n    return binary.lstrip('0') or '0'\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 2 == 1 and e % 2 == 0:\n            result += e\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = [word for word in StringIO(s).read().split()]\n    for word in words:\n        word.sort()\n    return \" \".join(accumulate(words, lambda a, b: a + (\"\" if a == \"\" else \" \") + b))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    return sorted(coords, key=itemgetter(0, 1))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = chr(ord(ch) + 4)\n        if ord(shifted) > ord('z'):\n            shifted = chr(ord(shifted) - 26)\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = split(\"[.!?]\\\\s*\", s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) == int and type(y) == int and type(z) == int:\n        int_x = x\n        int_y = y\n        int_z = z\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_lowercase + ascii_uppercase\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(accumulate(map(int, largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    lower_count = sum(c.islower() for k, v in d.items() for c in k + v)\n    upper_count = sum(c.isupper() for k, v in d.items() for c in k + v)\n    return lower_count > 0 and upper_count > 0 or lower_count == 0 and upper_count == 0\n",
            "def count_up_to(n: int) -> List[int]:\n    return list(takewhile(lambda x: x < n, count(2)))\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and vowels.find(s[i])!= -1:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    try:\n        num = float(value)\n        if num >= 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)\n    except ValueError:\n        return value\n",
            "def make_a_pile(n: int) -> List[int]:\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile\n",
            "def words_string(s: str) -> List[str]:\n    words = re.split(r\"[, ]\", s)\n    words = list(filter(None, words))\n    return words\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 1\n    result = bin(r_avg)[2:]\n    result = result.lstrip('0')\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filterfalse(lambda num: all(map(lambda digit: digit % 2 == 0, map(int, str(num)))), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    result = [digit_names[x-1] for x in sorted_arr]\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in nums:\n        if i % 2!= 0:\n            result.append(sum(nums[:i]))\n        else:\n            result.append(reduce(lambda x, y: x * y, chain(repeat(1), starmap(pow, zip(nums[:i], range(2, i + 1))))))\n    return result\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return reduce(lambda acc, d: acc + int(d), n_str, 0)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == list(chain(islice(sorted_arr, i), islice(sorted_arr, len(arr) - i))):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    if freq:\n        max_freq = max(freq.values())\n        return {k: v for k, v in freq.items() if v == max_freq}\n    return {}\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s\n    s1 = ''.join(filter(lambda x: x not in c, s1))\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        n = reduce(lambda a, b: a + (b % 2 == 1), s, 0)\n        result.append(f\"the number of odd elements in the string i of the input is {n}.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = max(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return reduce(\n        lambda a, b: a + ceil(reduce(lambda x, y: x + y, b) / capacity),\n        grid,\n        0\n    )\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=itemgetter(count_ones))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = set(ascii_lowercase) - set(\"bcdfghjklmnpqrstvwxyz\")\n    words = s.split()\n    result = [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr)\n    return sorted_arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 2 == 0 and e % 2!= 0:\n            result += e\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return reduce(lambda a, b: a + (len(str(b)) <= 2 and b or 0), arr[:k], 0)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m, d = map(int, date.split('-'))\n    if m in (1, 3, 5, 7, 8, 10, 12):\n        return 1 <= d <= 31\n    elif m in (4, 6, 9, 11):\n        return 1 <= d <= 30\n    elif m == 2:\n        return 1 <= d <= 29\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return [token for token in StringIO(txt).read().split(\",\")]\n    else:\n        return [\n            str(len([c for c in txt if c.islower() and c % 2 == 0]))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(a <= b for a, b in zip(lst, lst[1:])):\n        return False\n    freq = Counter(lst)\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    signs = Counter(n < 0 for n in arr)\n    return (-1) ** (signs[True] % 2) * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 or i == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(lambda x, y: x * 10 + y, map(int, str(n)), 0)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == \"[\":\n            open_idx.append(i)\n        elif s[i] == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + pow(ceil(n), 2), lst, 0)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return -1 if not idx else max(idx)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if type(a) == str and type(b) == str:\n        a_str, b_str = a, b\n        a_str = a_str.replace(\",\", \".\")\n        b_str = b_str.replace(\",\", \".\")\n        a_flt, b_flt = float(a_str), float(b_str)\n        if a_flt == b_flt:\n            return None\n        elif a_flt > b_flt:\n            return a_flt\n        else:\n            return b_flt\n    elif type(a) in [int, float] and type(b) in [int, float]:\n        a_flt, b_flt = float(a), float(b)\n        if a_flt == b_flt:\n            return None\n        elif a_flt > b_flt:\n            return a_flt\n        else:\n            return b_flt\n    else:\n        raise TypeError(\"Invalid types\")\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    result = txt\n    result = re.sub(r\"\\s{3,}\", \"-\", result)\n    result = result.replace(\" \", \"_\")\n    return result\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    file_name_parts = file_name.split(\".\")\n    if len(file_name_parts)!= 2 or file_name_parts[1] not in suffixes or not file_name_parts[0]:\n        return \"No\"\n    first_part = file_name_parts[0]\n    if not all(c in ascii_letters + digits for c in first_part) or first_part.isdigit() or first_part.islower():\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = [w for w in sentence.split() if all(map(str.isalpha, w))]\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return reduce(lambda acc, d: acc + int(d), n_str, 0)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=len)\n    result.sort()\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + (n >= 0 and n % 2 == 1) * int(n * n), lst, 0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for x, y in zip_longest(game, guess, fillvalue=0):\n        result.append(abs(x - y))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -1\n    max_extension = \"\"\n    for extension in extensions:\n        strength = 0\n        for char in extension:\n            if char in ascii_uppercase:\n                strength += 1\n            elif char in ascii_lowercase:\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            max_extension = extension\n    return f\"{class_name}.{max_extension}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "ROMAN_NUMERALS = [\n    ('M', 1000),\n    ('CM', 900),\n    ('D', 500),\n    ('CD', 400),\n    ('C', 100),\n    ('XC', 90),\n    ('L', 50),\n    ('XL', 40),\n    ('X', 10),\n    ('IX', 9),\n    ('V', 5),\n    ('IV', 4),\n    ('I', 1)\n]\ndef int_to_mini_roman(num: int) -> str:\n    result = \"\"\n    for roman, integer in ROMAN_NUMERALS:\n        count = num // integer\n        result += roman * count\n        num -= integer * count\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    counts = Counter(w for w in words)\n    max_count = max(counts.values())\n    return next(w for w, c in counts.items() if c == max_count)\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    nums = operands[:]\n    ops = operators[:]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch in ascii_lowercase:\n            result += ch.upper() if ch in ascii_uppercase else ch.lower()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    result = []\n    for group in paren_groups:\n        depth = 0\n        max_depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(str, map(int.__xor__, map(ord, a), map(ord, b))))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i] for i in range(1, len(s) + 1)]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "durations = defaultdict(int, {'o': 4, 'o|': 2, '.|': 1})\nnotes = music_string.split(' ').filter(bool)\nreturn [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "class Num(Enum):\n    zero = 0\n    one = 1\n    two = 2\n    three = 3\n    four = 4\n    five = 5\n    six = 6\n    seven = 7\n    eight = 8\n    nine = 9\ndef sort_numbers(numbers: str) -> str:\n    num_list = [num.name for num in Num if num.name in numbers.split()]\n    num_list.sort(key=lambda x: Num[x].value)\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for a, b in tee(zip(sorted_numbers, sorted_numbers[1:])):\n        diff = sub(*a, *b)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [*a, *b]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len([x for x in str(i) if x == '7'])\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i, x in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    return [even_values[i // 2] if i in even_indices else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    d = defaultdict(int)\n    for num in l:\n        d[num] += 1\n        if -num in d:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> Union[float, int]:\n    try:\n        return (a * h) / 2\n    except TypeError:\n        return \"Invalid input\"\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    n = len(sl)\n    if n % 2 == 1:\n        return sl[n // 2]\n    else:\n        i = n // 2\n        return (sl[i - 1] + sl[i]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip_longest(l, l[1:], fillvalue=l[0])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) >= 0 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return good_vals[0] if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(a == b for a, b in zip_longest(q, q[::-1]))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1/3)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5)):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return''.join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    return sorted(coords, key=itemgetter(1), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if (add(arr[0], arr[-1]) % 2) == 0:\n        return sorted(arr, key=gt)\n    else:\n        return sorted(arr, key=lt)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        index = ascii_lowercase.index(ch)\n        new_index = (index + 4) % len(ascii_lowercase)\n        result += ascii_lowercase[new_index]\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[\\.\\!?\\s]+\", s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = x\n        int_y = y\n        int_z = z\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_lowercase + ascii_uppercase\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    return all(n % i for i in range(2, int(n**0.5) + 1))\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = filter(is_prime, lst)\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(int(digit) for digit in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    try:\n        num = float(value)\n        if num >= 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)\n    except ValueError:\n        return value\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(digit) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(list(filter(lambda x: 1 <= x <= 9, arr)), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [reduce(lambda x, y: x + y, nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i], 1) for i in range(1, n+1)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    words = [w for w in test.split() if w]\n    freq = Counter(words)\n    max_freq = max(freq.values())\n    return {k: v for k, v in freq.items() if v == max_freq}\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(int(d) % 2 for d in num)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum += n\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return len(bin(num)[2:].replace('0', ''))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    return [w for w in words if w and w.lower().count(c for c in consonants if c in w) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if (s1 in \"()\" or s2 in \"()\") and (s1 not in \"[]\" and s2 not in \"[]\") else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * (-1 if any(n < 0 for n in arr) else 1)\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx: List[int] = []\n    close_idx: List[int] = []\n    for i in range(len(s)):\n        c = s[i]\n        if c == \"[\":\n            open_idx.append(i)\n        elif c == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n ** 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    arr.sort()\n    diff = [arr[i] - arr[i - 1] for i in range(1, len(arr))]\n    if all(d == diff[0] for d in diff):\n        return 0\n    return next((i for i, d in enumerate(diff) if d!= diff[0]), -1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    max_negative = max(negatives) if negatives else None\n    min_positive = min(positives) if positives else None\n    return [max_negative, min_positive]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r'\\s{3,}', '-', txt).replace(' ', '_')\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, map(len, words)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n // 10 in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "class SortOrder(Enum):\n    ASC = 1\n    DESC = 2\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s), reverse=False)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(d) % 2 == 0 for d in s)\n    return [even, len(s) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    result = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            result += numerals[i]\n            num -= values[i]\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = word if word < max_word else max_word\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    nums = list(operands)\n    ops = list(operators)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.lower() if ch.isupper() else ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    hash_object = md5(txt.encode())\n    hex_dig = hash_object.hexdigest()\n    return hex_dig\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \")\n    result = []\n    for group in paren_groups:\n        if group:\n            depth = 0\n            max_depth = 0\n            for ch in group:\n                if ch == \"(\":\n                    depth += 1\n                    max_depth = max(max_depth, depth)\n                elif ch == \")\":\n                    depth -= 1\n            result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float(\"inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x[0]!= x[1])) for x in zip_longest(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(c.lower() for c in s))\n",
            "durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\nnotes = music_string.split(\" \").filter(bool)\nreturn [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s)):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split() if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = reduce(min, numbers)\n    max_num = reduce(max, numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda i: i % 3 == 0, range(len(l))), key=lambda i: l[i])\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(\"7\" for _ in range(len(str(i))))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [next(filter(lambda x: x % 2!= 0, l), x) for x in sorted_even]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(bool)\n    for num in l:\n        if seen[-num]:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [((ord(c) - 97 + 5) % 26) + 97 for c in s]\n    return ''.join(chr(c) for c in result)\ndef decode_shift(s: str) -> str:\n    result = [((ord(c) - 97 - 5) % 26) + 97 for c in s]\n    return ''.join(chr(c) for c in result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip_equal(l, l[1:])]\n    return all(a <= b for a, b in diff) or all(a >= b for a, b in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return reduce(lambda a, b: a + b, range(1, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i] == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [p for p in freqs if freqs[p] >= p]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-(i + 1)] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(pow(a, 1/3))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"0b{bin(dec)[2:]}\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g >= 4.0:\n            result.append(\"A+\")\n        elif g >= 3.7:\n            result.append(\"A\")\n        elif g >= 3.3:\n            result.append(\"A-\")\n        elif g >= 3.0:\n            result.append(\"B+\")\n        elif g >= 2.7:\n            result.append(\"B\")\n        elif g >= 2.3:\n            result.append(\"B-\")\n        elif g >= 2.0:\n            result.append(\"C+\")\n        elif g >= 1.7:\n            result.append(\"C\")\n        elif g >= 1.3:\n            result.append(\"C-\")\n        elif g >= 1.0:\n            result.append(\"D+\")\n        elif g >= 0.7:\n            result.append(\"D\")\n        elif g >= 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[0], coord[1]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r\"[.!?]\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch == ch.upper() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(int(d) for d in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d) or all(k.islower() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(\", \") if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2 + 0.5\n    return bin(r_avg)[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all(int(digit) % 2 for digit in str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [reduce(lambda x, y: x + y, nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "class Move(Enum):\n    LEFT = 1\n    RIGHT = 2\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:len(arr)-i] and arr[i:] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for num in lst1 if num % 2!= 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    cur_sum, min_sum = 0, 0\n    for n in nums:\n        cur_sum = max(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = reduce(min, nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (sum(arr) // capacity) + 1, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(\"1\" for _ in range(num.bit_length()) if (num & (1 << _))!= 0)\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    return [w for w in words if len(w) > 0 and n == len([c for c in w if c.lower() in consonants])]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    arr.sort()\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            len([c for c in txt if c.isalpha() and ord(c) % 2 == 0])\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and all(i % j == 0 for i, j in zip(range(2, int(sqrt(length)) + 1), range(2, int(sqrt(length)) + 1))) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * 2 - 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append((i // 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + ((i + 3) // 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(pow(ceil(n), 2)), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return reduce(max, [-1] + idx, -1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\" ",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for x in lst[0] if x.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, map(len, words))))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = list(nums)\n    def merge_sort(nums: List[int], compare) -> List[int]:\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums) // 2\n        left = merge_sort(nums[:mid], compare)\n        right = merge_sort(nums[mid:], compare)\n        i, j = 0, 0\n        sorted_nums = []\n        while i < len(left) and j < len(right):\n            if compare(left[i], right[j]) <= 0:\n                sorted_nums.append(left[i])\n                i += 1\n            else:\n                sorted_nums.append(right[j])\n                j += 1\n        sorted_nums += left[i:]\n        sorted_nums += right[j:]\n        return sorted_nums\n    merge_sort(result, lambda a, b: digits_sum(a) - digits_sum(b))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [it for it in lst if len(it) % 2 == 0]\n    return sorted(result, key=lambda it: (len(it), it))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip_longest(game, guess, fillvalue=0)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(c.isupper() for c in ext)\n        lower = sum(c.islower() for c in ext)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(d) % 2 == 0 for d in s)\n    return [even, len(s) - even]\n",
            "ROMAN_NUMERALS = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\nVALUES = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\ndef int_to_mini_roman(num: int) -> str:\n    result = \"\"\n    for i in range(len(VALUES)):\n        while num >= VALUES[i]:\n            result += ROMAN_NUMERALS[i]\n            num -= VALUES[i]\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(nums[i], nums[i + 1]))\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                result += ch.upper()\n            else:\n                result += ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode()\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if math.fabs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    parens = re.sub(r\"\\s\", \"\", paren_string)\n    stk = []\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i > 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = re.split(r'\\s+', paren_string)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = 0\n    n_product = 1\n    for n in numbers:\n        n_sum += n\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = math.inf\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append(\"0\")\n        else:\n            result.append(\"1\")\n    return ''.join(result)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_str = strs[0]\n    for s in strs:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i] for i in range(1, len(s)+1)]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n+1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s))\n",
            "DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    notes = [note for note in music_string.split() if note]\n    durations = [DURATIONS[note] for note in notes]\n    return durations\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numbers = re.split(r\"\\s+\", numbers)\n    numbers.sort(key=lambda x: num_dict[x])\n    return \" \".join(numbers)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = math.inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = math.inf\n    max_num = -math.inf\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    if min_num == max_num:\n        return [0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    return ''.join(\n        ch.upper() if ch.islower() else ch.lower() if ch.isupper() else ch\n        for ch in s\n    )\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i, c in enumerate(xs):\n        res += c * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            sorted_third.append(x)\n    result = [None] * len(l)\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result[i] = sorted_third[i // 3]\n        else:\n            result[i] = x\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return list(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            sorted_even.append(x)\n    sorted_even.sort()\n    result = [None] * len(l)\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result[i] = sorted_even[i // 2]\n        else:\n            result[i] = x\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(math.pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits)) or '0'\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
            "def median(l: List[float]) -> float:\n    return statistics.median(l)\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += ascii_lowercase[(ascii_lowercase.index(ch) + 5) % 26]\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += ascii_lowercase[(ascii_lowercase.index(ch) + 21) % 26]\n    return result\n",
            "VOWELS = set(ascii_lowercase).intersection(\"aeiou\")\ndef remove_vowels(txt: str) -> str:\n    return \"\".join(c for c in txt if c not in VOWELS)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0: Set[str] = set(s0)\n    set1: Set[str] = set(s1)\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x >= 0 for x in diff) or all(x <= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    result = [num for num in l2 if num in s1]\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    for i in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "VOWELS = \"aeiouy\"\ndef vowels_count(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.lower() in VOWELS:\n            count += 1\n    return count\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        runes = list(x_str)\n        for i in range(len(runes)):\n            runes[i], runes[-i-1] = runes[-i-1], runes[i]\n        return ''.join(runes)\n    else:\n        return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n",
            "def digit_sum(s: str) -> int:\n    a = 0\n    for c in s:\n        if c.isupper():\n            a += int(c)\n    return a\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = re.split(r\"\\s+\", s)\n    apples = oranges = 0\n    for word in words:\n        if word == \"apples\":\n            apples += 1\n        elif word == \"oranges\":\n            oranges += 1\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    min_even = math.inf\n    min_idx = -1\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n            min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_even, min_idx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    max_val = math.inf\n    for k, v in freqs.items():\n        if v >= k and k < max_val:\n            max_val = k\n    if max_val == math.inf:\n        return -1\n    return max_val\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    random.shuffle(sl)\n    result = []\n    while sl:\n        result.append(sl.pop(0))\n        if sl:\n            result.append(sl.pop())\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = True\n    for i in range(len(q) // 2):\n        if q[i]!= q[-i - 1]:\n            is_palindrome = False\n            break\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    while a > 1:\n        if is_prime(a):\n            cnt += 1\n        a //= 10\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    while x % n == 0:\n        x //= n\n    return x == 1\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1/3))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in digits + \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return \"0b\" + binascii.b2a_hex(bin(dec).encode()).decode()\n",
            "def is_happy(s: str) -> bool:\n    return s.count(\"1\") == len(s)\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits = [int(d) for d in str(n)]\n    return ''.join(str(sum(digits)) for d in digits)\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    for i, word in enumerate(words):\n        chars = list(word)\n        chars.sort()\n        words[i] = ''.join(chars)\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    result = []\n    for i, row in enumerate(lst):\n        indices = [j for j, val in enumerate(row) if val == x]\n        for j in indices:\n            result.append([i, j])\n    result.sort(key=lambda coord: (coord[0], coord[1]))\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    result = arr.copy()\n    if sum(arr[:2]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        index = ascii_lowercase.index(ch)\n        result += ascii_lowercase[(index + 4) % 26]\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    tmp = sorted(set(lst))\n    i = bisect.bisect_left(tmp, lst[0])\n    if i == len(tmp) - 1:\n        return None\n    return tmp[i + 1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence.startswith('I '):\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = string.ascii_lowercase + string.ascii_uppercase\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    max_prime = 0\n    for n in lst:\n        if is_prime(n) and n > max_prime:\n            max_prime = n\n    if max_prime == 0:\n        return 0\n    largest = str(max_prime)\n    result = 0\n    for d in largest:\n        result += int(d)\n    return result\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    lower, upper = True, True\n    for k, _ in d.items():\n        for r in k:\n            if not r.islower():\n                lower = False\n            if not r.isupper():\n                upper = False\n    return lower or upper\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    if re.match(r\"^-?\\d+\\.?\\d*$\", value):\n        num = float(value)\n        if num.is_integer():\n            return int(num)\n        else:\n            return round(num)\n    else:\n        raise ValueError(\"Invalid input\")\n",
            "def make_a_pile(n: int) -> List[int]:\n    result = [n * (n + 1) // 2] * n\n    return result\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = math.floor((n + m) / 2)\n    result = bin(r_avg)[2:]\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(digit) % 2 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    result = [digit_names[x - 1] for x in sorted_arr]\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i, num in enumerate(nums):\n        if num % 2!= 0:\n            sum = sum(nums[:i])\n            result.append(sum)\n        else:\n            product = 1\n            for j in nums[:i]:\n                product *= j\n            result.append(product)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        s = str(i)\n        if is_palindrome(s):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for d in n_str:\n            acc += int(d)\n        return acc\n    else:\n        neg, _ = int(n_str[0:2]), 0\n        return neg * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for n in arr:\n        if digits_sum(n) > 0:\n            cnt += 1\n    return cnt\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = copy.deepcopy(arr)\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if np.array_equal(arr[i:], sorted_arr[:len(arr) - i]) and np.array_equal(arr[:i], sorted_arr[len(arr) - i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = 0\n    even_count = 0\n    for num in lst1:\n        if num % 2!= 0:\n            odd_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    words = test.split()\n    freq = Counter(words)\n    max_freq = max(freq.values())\n    result = {}\n    for word, count in freq.items():\n        if count == max_freq:\n            result[word] = count\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for ch in s:\n        if ch in string.ascii_letters:\n            runes.append(ch.lower())\n    for i in range(len(runes) // 2):\n        if runes[i]!= runes[-1 - i]:\n            return False\n    return True\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\"\n    for ch in s:\n        if ch not in c:\n            s1 += ch\n    check = \"no\"\n    if is_palindrome(s1):\n        check = \"yes\"\n    return [s1, check]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        result.append(f\"the number of odd elements in the string {num} is {n}\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum += n\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = math.inf\n        for n in nums:\n            if n < min_sum:\n                min_sum = n\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for arr in grid:\n        sum = 0\n        for n in arr:\n            sum += n\n        result += int(math.ceil(sum / capacity))\n    return result\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in bin(num)[2:] if c == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = string.ascii_lowercase\n    words = s.split()\n    result = []\n    for w in words:\n        if len(w) > 0:\n            count = 0\n            for c in w:\n                if c.lower() in consonants:\n                    count += 1\n            if count == n:\n                result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr[:]\n    heapq.heapify(result)\n    for _ in range(k - 1):\n        heapq.heappop(result)\n    return result\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2!= 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if not re.match(r\"\\d{4}-\\d{2}-\\d{2}\", date):\n        return False\n    year, month, day = map(int, date.split(\"-\"))\n    if month == 2 and day > 28:\n        return False\n    if month in (4, 6, 9, 11) and day > 30:\n        return False\n    if month == 2 and not (year % 400 == 0 or (year % 4 == 0 and year % 100!= 0)):\n        return False\n    return True\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and int(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < prev:\n            return False\n        prev = lst[i]\n    return True\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and all(i not in range(2, int(math.sqrt(length)) + 1) for i in range(2, int(math.sqrt(length)) + 1)):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    result = 0\n    for n in arr:\n        if n == 0:\n            return result\n        elif n < 0:\n            result -= 1\n        else:\n            result += 1\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    digits = [int(d) for d in str(n) if d in string.digits]\n    if not digits:\n        return 0\n    result = 1\n    for d in digits:\n        result *= d\n    return result\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    while i < l:\n        if open_idx and open_idx[0] < close_idx[i]:\n            cnt += 1\n            i += 1\n        else:\n            open_idx.pop(0)\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    result = 0\n    for n in lst:\n        result += int(n**2)\n    return result\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and txt[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1]!= 1:\n            return -1\n    return arr[-1] + 1 if arr[-1] - arr[0] < len(arr) - 1 else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    max_neg, min_pos = None, None\n    for n in lst:\n        if n < 0:\n            if max_neg is None or n > max_neg:\n                max_neg = n\n        elif n > 0:\n            if min_pos is None or n < min_pos:\n                min_pos = n\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise TypeError(\"Invalid type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r'\\s{3,}', '-', txt).replace(' ', '_')\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    parts = file_name.split(\".\")\n    if len(parts)!= 2 or len(parts[0]) == 0 or not re.match(\"[a-zA-Z]+\", parts[0]):\n        return \"No\"\n    if parts[1] not in suffixes:\n        return \"No\"\n    digit_count = sum(1 for ch in parts[0] if ch.isdigit())\n    if digit_count > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            words.append(word)\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    f1 = Fraction(x)\n    f2 = Fraction(n)\n    return f1.numerator * f2.denominator == f1.denominator * f2.numerator\n",
            "def digits_sum(n: int) -> int:\n    s = str(n)\n    acc = 0\n    for d in s:\n        acc += int(d)\n    return acc\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums[:]\n    result.sort(key=digits_sum)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and str(n)[0] in odds:\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    even_len_strings = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            even_len_strings.append(s)\n    return sorted(even_len_strings, key=len)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and n % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for i, j in zip(game, guess):\n        result.append(int(math.fabs(i - j)))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = math.inf\n    max_ext = \"\"\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for c in ext:\n            if unicodedata.category(c) in [\"Lu\", \"Lt\"]:\n                upper += 1\n            elif unicodedata.category(c) in [\"Ll\", \"Lo\"]:\n                lower += 1\n        s = upper - lower\n        if s < max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    digits = list(str(abs(num)))\n    even_count = 0\n    for digit in digits:\n        if digit in string.digits:\n            digit_int = int(digit)\n            if digit_int % 2 == 0:\n                even_count += 1\n    return [even_count, len(digits) - even_count]\n",
            "ROMAN_NUMERALS = [\n    ('M', 1000),\n    ('CM', 900),\n    ('D', 500),\n    ('CD', 400),\n    ('C', 100),\n    ('XC', 90),\n    ('L', 50),\n    ('XL', 40),\n    ('X', 10),\n    ('IX', 9),\n    ('V', 5),\n    ('IV', 4),\n    ('I', 1),\n]\ndef int_to_mini_roman(num: int) -> str:\n    result = \"\"\n    for roman, integer in ROMAN_NUMERALS:\n        count = num // integer\n        result += roman * count\n        num -= integer * count\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        char_counts = Counter(word)\n        for char in char_counts:\n            count += char_counts[char]\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    while \"**\" in ops:\n        ind = ops.index(\"**\")\n        nums[ind] = int(pow(nums[ind], nums[ind + 1]))\n        nums = nums[:ind] + nums[ind + 2 :]\n        ops = ops[:ind] + ops[ind + 1 :]\n    while ops:\n        if ops[0] == \"*\":\n            nums[0] = nums[0] * nums[1]\n            nums = nums[1:]\n            ops = ops[1:]\n        elif ops[0] == \"//\":\n            nums[0] = nums[0] // nums[1]\n            nums = nums[1:]\n            ops = ops[1:]\n        elif ops[0] == \"+\":\n            nums[0] = nums[0] + nums[1]\n            nums = nums[1:]\n            ops = ops[1:]\n        elif ops[0] == \"-\":\n            nums[0] = nums[0] - nums[1]\n            nums = nums[1:]\n            ops = ops[1:]\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    flag = False\n    for ch in s:\n        if ch in string.ascii_letters:\n            flag = True\n            break\n    if not flag:\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if ch in string.ascii_letters:\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for i in range(lower, upper + 1):\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = [s for s in paren_string.split(\" \") if len(s) > 0]\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, chain.from_iterable(range(n + 1))))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(c.lower() for c in s))\n",
            "class Note(Enum):\n    O = 4\n    O_TILDE = 2\n    DOT_TILDE = 1\ndef parse_music(music_string: str) -> List[int]:\n    durations = {note.name: note.value for note in Note}\n    notes = [note for note in music_string.split() if len(note) > 0]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "class Num(Enum):\n    zero = 0\n    one = 1\n    two = 2\n    three = 3\n    four = 4\n    five = 5\n    six = 6\n    seven = 7\n    eight = 8\n    nine = 9\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {num.name: num.value for num in Num}\n    num_list = [num for num in numbers.split() if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if not numbers:\n        return []\n    min_num, max_num = min(numbers), max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda i: i % 3 == 0, l))\n    return list(chain.from_iterable(\n        [sorted_third if i % 3 == 0 else [e] for i, e in enumerate(l)]\n    ))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return reduce(max, l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda i: i % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    return all(x <= y for x, y in zip_longest(l, l[1:], fillvalue=l[0])) or all(x >= y for x, y in zip_longest(l, l[1:], fillvalue=l[0]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs[1:], start=1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "VOWELS = \"aeiou\"\ndef vowels_count(s: str) -> int:\n    cnt = 0\n    for c in s:\n        if c.lower() in VOWELS or (c.lower() == \"y\" and len(s) == 1):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k in freqs if freqs[k] >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(a == b for a, b in zip_longest(q, q[::-1]))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    while a % 2 == 0:\n        cnt += 1\n        a //= 2\n    for i in range(3, int(sqrt(a)) + 1, 2):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1/3)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f'db{binary}db'\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(digit) for digit in str(n)))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(i for i, x in enumerate(lst) if x % 2 == 0 and i % 2 == 1)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [\"\".join(sorted(list(word))) for word in s.split()]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[0], coord[1]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for c in s:\n        shifted = ord(c) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x, int_y, int_z = x, y, z\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_lowercase + ascii_uppercase + \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch in ascii_letters:\n            ch1 = ch.upper() if ch in ascii_lowercase else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(chain.from_iterable(zip(range(n), range(n, 2 * n, 2))))\n",
            "def words_string(s: str) -> List[str]:\n    return list(filter(None, s.split(\", \")))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2!= 0 for digit in map(int, s))\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(list(filter(lambda x: 1 <= x <= 9, arr)), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [\n        sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, accumulate(nums[:i]))\n        for i in range(1, n + 1)\n    ]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(w for w in test.split() if w)\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if int(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum += n\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(sum(arr) / capacity) + 1, grid))\n",
            "def count_ones(num: int) -> int:\n    count = 0\n    while num:\n        num &= num - 1\n        count += 1\n    return count\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if sum(1 for c in w if c.lower() in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(i for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            str(len([c for c in txt if c.islower() and c.isdigit()]))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) <= len(lst) // 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * -2 + 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i, j in product(range(n), repeat=2):\n        if grid[i][j] == 1:\n            temp = []\n            if i > 0:\n                temp.append(grid[i - 1][j])\n            if j > 0:\n                temp.append(grid[i][j - 1])\n            if i < n - 1:\n                temp.append(grid[i + 1][j])\n            if j < n - 1:\n                temp.append(grid[i][j + 1])\n            min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx: List[int] = []\n    close_idx: List[int] = []\n    for i in range(len(s)):\n        if s[i] == \"[\":\n            open_idx.append(i)\n        elif s[i] == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n ** 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    arr.sort()\n    diff = [arr[i] - arr[i - 1] for i in range(1, len(arr))]\n    if all(d == diff[0] for d in diff):\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1]!= diff[0]:\n            return arr[i - 1] + diff[0]\n    return arr[-1] + diff[0]\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\" ",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and n // 10 in odds)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - g_) for g, g_ in zip_longest(game, guess, fillvalue=0)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(d) % 2 == 0 for d in s)\n    return [even, len(s) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    nums = list(operands)\n    ops = list(operators)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.swapcase()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    hash_object = md5(txt.encode())\n    return hash_object.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(chain(range(lower, upper + 1), filter(lambda n: n % 2 == 0, range(lower, upper + 1))))\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \")\n    result = []\n    for group in paren_groups:\n        depth = 0\n        max_depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n            elif ch == \")\":\n                depth -= 1\n            max_depth = max(max_depth, depth)\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(c1) ^ int(c2)) for c1, c2 in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[0:i+1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return [DURATIONS[note] for note in notes if note in DURATIONS]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    num_list = [num for num in numbers.split() if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.isalpha():\n            flipped.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            flipped.append(ch)\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * (x ** i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda _, i: i % 3 == 0, enumerate(l)), key=lambda x: x[1])\n    return [sorted_third[i // 3][1] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i + 1:i + 3])\n            result.append(s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "VOWELS = \"aeiouy\"\ndef vowels_count(s: str) -> int:\n    cnt = 0\n    for c in s:\n        if c.lower() in VOWELS or (c.lower() == \"y\" and len(s) == 1):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [n for n, freq in freqs.items() if freq >= n]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a > 0 and (a & (a - 1)) == 0 and (a ** (1.0 / 3.0)) ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f'db{bin(dec)[2:]}db'\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5)):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return''.join([''.join(sorted(word)) for word in words])\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[0], coord[1]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if sum(arr) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(set(lst)) == 1:\n        return None\n    return min(set(lst))\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\". \")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d) or all(k.islower() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [i * 2 + n for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split() if w]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg)[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(list(set(filter(lambda num: all(map(lambda digit: digit % 2, map(ord, str(num)))), x))))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n+1) if i % 2!= 0]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(map(int, str(n))) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[:i] == arr[i:][::-1] and arr[i:] == arr[-i:][::-1]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w:\n            freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(sum(arr) / capacity) + 1, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(bin(num)[2:].replace('0', ''))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and n == len([c for c in w if c.lower() in consonants])]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            str(len([c for c in txt if c.isalpha() and ord(c) % 2 == 0]))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) == len(lst)\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and all(i % j == 0 for i, j in zip(range(2, int(length ** 0.5) + 1), range(2, int(length ** 0.5) + 1))) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * 2 - 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(int(i / 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + int((i + 3) / 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda a, b: a * b, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n ** 2 for n in map(int, map(round, lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    max_negative = max(negatives) if negatives else None\n    min_positive = min(positives) if positives else None\n    return [max_negative, min_positive]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    try:\n        a1 = float(a.replace(',', '.'))\n        b1 = float(b.replace(',', '.'))\n    except ValueError:\n        return None\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(map(str.isdigit, lst[0])) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n // 10 in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=len)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if ord(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return ''.join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = word if word < max_word else max_word\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    nums = operands.copy()\n    ops = operators.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda x: x!= \"\")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n+1)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "MUSIC_DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return [MUSIC_DURATIONS[note] for note in notes if note in MUSIC_DURATIONS]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split() if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(n - min_num) / (max_num - min_num) for n in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda i: i % 3 == 0, range(len(l))), key=lambda i: l[i])\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda i: i % 2 == 0, range(len(l))), key=lambda i: l[i])\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(i < t for i in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n+1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-(i + 1)] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(x) for x in lst1)\n    cnt2 = sum(len(x) for x in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = floor(pow(a, 1/3)) if a > 0 else ceil(pow(a, 1/3))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return len([c for c in num if c in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return \" \".join(sorted(w) for w in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[1], coord[0]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if sum(arr) % 2 == 0:\n        return sorted(arr, reverse=True)\n    return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!? \")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr((ord(ch1) - ord(\"a\") + 2) % 26 + ord(\"a\"))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5 if num >= 0 else num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return [word for word in s.split(\", \") if len(word) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    r_avg = (n + m) // 2 + 1 if (n + m) % 2 == 0 else (n + m) // 2\n    return str(r_avg) if r_avg % 2 == 0 else None\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda it: all(map(lambda c: c % 2!= 0, map(ord, str(it)))), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i + 1]) if i % 2 else reduce(lambda x, y: x * y, nums[:i + 1]) for i in range(len(nums))]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for x in lst1 if x % 2!= 0)\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split() if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if int(c) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = max(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return len([1 for digit in bin(num)[2:] if digit == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [word for word in words if len(list(filter(lambda c: c in consonants, word.lower()))) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(i for i in arr[:k] if len(str(i)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m, d = map(int, date.split('-'))\n    if m in (1, 3, 5, 7, 8, 10, 12) and d >= 1 and d <= 31:\n        return True\n    if m in (4, 6, 9, 11) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.lower().count(c) for c in txt if c.islower() and int(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(lambda x: x < 0) % 2 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(i) for i in str(n) if int(i) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(ceil(x) ** 2 for x in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Unknown type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r'\\s{3,}', '-', re.sub(r'\\s', '_', txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, map(len, words)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([num for num in nums if num > 10 and num % 2 == 1 and num // 10 in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda x: len(x) % 2 == 0, lst))\n    return sorted(result, key=lambda x: (len(x), x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(int, filter(lambda x: x >= 0 and x % 2 == 1, map(lambda x: x * x, lst))))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(c) % 2 == 0 for c in s)\n    return [even, len(s) - even]\n",
            "ROMAN_NUMERALS = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\nVALUES = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\ndef int_to_mini_roman(num: int) -> str:\n    result = \"\"\n    for i in range(len(VALUES)):\n        while num >= VALUES[i]:\n            result += ROMAN_NUMERALS[i]\n            num -= VALUES[i]\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(nums[i] ** nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = [group for group in paren_string.split() if group]\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i::-1]:\n            return s + s[i::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x!= y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(list(s.lower())))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [note for note in music_string.split() if note]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split() if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda str: str.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [i for i in l if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else i for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [i for i in l if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else i for i, _ in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 2] + s[i + 1]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "VOWELS = set(ascii_lowercase + ascii_uppercase).difference(\"aeiou\")\ndef remove_vowels(txt: str) -> str:\n    return \"\".join(c for c in txt if c not in VOWELS)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return len([x for x in l if x < t]) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l[:-1], l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs[1:], range(1, len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = words.index('apples') - 1\n    oranges = words.index('oranges') - 1\n    return n - int(apples) - int(oranges)\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals.keys() + [-1])\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-(i + 1)] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1.0 / 3.0) % 1 == 0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"0b{binary}\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(v for k, v in enumerate(lst) if k % 2 == 1 and v % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    words = [\"\".join(sorted(word)) for word in words]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n        return result\n    else:\n        result.sort()\n        return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(set(lst)) == 1:\n        return None\n    return min(set(lst))\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(is_prime, lst))\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return (len(list(filter(str.islower, d.keys()))) == len(d) or\n            len(list(filter(str.isupper, d.keys()))) == len(d))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(n)))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[,]+\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg).lstrip(\"0b\")\n",
            "def all_digits_odd(s: str) -> bool:\n    return sum(map(ord, s)) % 2!= 0\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(all_digits_odd, map(str, x)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i], 1) for i in range(1, n+1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(map(int, str(abs(n)))) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[:i] == arr[-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = filter(None, test.split())\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, s1 == s[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if ord(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (sum(arr) + capacity - 1) // capacity, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(bin(num)[2:].replace('0', ''))\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: (count_ones(x), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split() if len(w) > 0]\n    return [w for w in words if sum(1 for c in w if c.lower() in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    arr.sort()\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(v for v, k in enumerate(lst) if k % 2 == 0 and v % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) <= 1\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * 2 - 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(int(i / 2) + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + int((i + 3) / 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(x) for x in filter(lambda x: int(x) % 2 == 1, str(n))]\n    return 1 if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n ** 2 for n in map(int, map(ceil, lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx + [-1])\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    max_neg = max(negatives) if negatives else None\n    min_pos = min(positives) if positives else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise Exception(\"Unknown type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s+\", \"_\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or any(not ch.isdigit() for ch in lst[0]):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return 2 * int(n_str[0:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums[:]\n    result.sort(key=digits_sum)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda x: len(x) % 2 == 0, lst))\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if 0 < n < 2)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len(re.sub(\"[^A-Z]\", \"\", ext))\n        lower = len(re.sub(\"[^a-z]\", \"\", ext))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(filter(lambda i: i % 2 == 0, range(lower, upper)))\n"
        ]
    },
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    return any_of(cbegin(numbers), cend(numbers), [&](double x) {\n        return any_of(cbegin(numbers), cend(numbers), [&](double y) {\n            return x!= y && fabs(x - y) < threshold;\n        });\n    });\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    stack<char> stk;\n    string current_group;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - std::floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0;\n    for (double x : numbers) {\n        mean += x;\n    }\n    mean /= numbers.size();\n    double deviation = 0;\n    for (double x : numbers) {\n        deviation += fabs(x - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i!= 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    stack<int> depths;\n    int max_depth = 0;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            depths.push(max_depth);\n            max_depth++;\n        } else if (ch == ')') {\n            max_depth = depths.top() + 1;\n            depths.pop();\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(substring)!= string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {sum, product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    vector<int> result(numbers.size());\n    int max_so_far = *max_element(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        max_so_far = max(max_so_far, numbers[i]);\n        result[i] = max_so_far;\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    string reversed = s;\n    reverse(reversed.begin(), reversed.end());\n    if (s == reversed) {\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        string left = s.substr(0, i);\n        string right = s.substr(i);\n        reverse(right.begin(), right.end());\n        if (left == right) {\n            return s + reversed.substr(i);\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i])? \"0\" : \"1\";\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_str = strs[0];\n    for (const string& str : strs) {\n        if (str.length() > longest_str.length()) {\n            longest_str = str;\n        }\n    }\n    return longest_str;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    while (b!= 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    string result;\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\n",
            "int countDistinctCharacters(const string& s) {\n    unordered_set<char> distinct_chars;\n    for (char c : s) {\n        distinct_chars.insert(tolower(c));\n    }\n    return distinct_chars.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<int> notes;\n    istringstream iss(music_string);\n    for (string note; iss >> note;) {\n        notes.push_back(durations[note]);\n    }\n    return notes;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length() - substring.length(); i++) {\n        if (s.substr(i, substring.length()) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    vector<string> num_list;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(num_list), [&](char c) {\n        return num_dict.find(string(1, c))!= num_dict.end();\n    });\n    sort(num_list.begin(), num_list.end(), [&](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return join(num_list, \" \");\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); i++) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> result;\n        transform(numbers.begin(), numbers.end(), back_inserter(result),\n                  [min_num, max_num](double num) {\n                      return (num - min_num) / (max_num - min_num);\n                  });\n        return result;\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const auto& value : values) {\n        if (is_same_v<remove_cv_t<remove_reference_t<decltype(value)>>, int>) {\n            result.push_back(static_cast<int>(value));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    int largest = 1;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (string s : strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third = sort(l.begin(), l.begin() + l.size() / 3);\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result[i] = sorted_third[i / 3];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    vector<int> result(l);\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    int max_value = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max_value) {\n            max_value = l[i];\n        }\n    }\n    return max_value;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += to_string(i).count(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even;\n    for (int i = 0; i < l.size(); i += 2) {\n        sorted_even.push_back(l[i]);\n    }\n    sort(sorted_even.begin(), sorted_even.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(sorted_even[i / 2]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    int f0 = 0, f1 = 1;\n    int cnt = 0;\n    while (cnt < n) {\n        int f2 = f0 + f1;\n        f0 = f1;\n        f1 = f2;\n        if (isPrime(f1)) {\n            cnt++;\n        }\n    }\n    return f1;\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    string result = \"\";\n    while (x > 0) {\n        result += to_string(x % bas);\n        x /= bas;\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return (double)a * h / 2.0;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sorted_l = l;\n    sort(sorted_l.begin(), sorted_l.end());\n    if (l.size() % 2!= 0) {\n        return sorted_l[l.size() / 2];\n    } else {\n        return (sorted_l[l.size() / 2] + sorted_l[l.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    int left = 0, right = txt.size() - 1;\n    while (left < right) {\n        if (txt[left++]!= txt[right--]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += (char)((int)(ch) - 97 + 5) % 26 + 97;\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += (char)((int)(ch) - 97 + 21) % 26 + 97;\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string result;\n    for (char c : txt) {\n        if (c >= 'a' && c <= 'z') {\n            if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' &&\n                c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O' && c!= 'U') {\n                result += c;\n            }\n        } else if (c >= 'A' && c <= 'Z') {\n            if (c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O' && c!= 'U') {\n                result += c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    unordered_set<char> chars0(s0.begin(), s0.end());\n    unordered_set<char> chars1(s1.begin(), s1.end());\n    return chars0 == chars1;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else if (b == '>') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] - l[i - 1] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n--;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    int cnt = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return string(x_str.rbegin(), x_str.rend());\n    } else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c - 'A' + 1;\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    istringstream iss(s);\n    int apples = 0, oranges = 0;\n    string word;\n    while (iss >> word) {\n        if (word == \"apples\") {\n            apples++;\n        } else if (word == \"oranges\") {\n            oranges++;\n        }\n    }\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    auto it = find_if(arr.begin(), arr.end(), [](int n) { return n % 2 == 0; });\n    if (it == arr.end()) {\n        return {};\n    }\n    int min_even = *min_element(arr.begin(), it);\n    return {min_even, distance(arr.begin(), it)};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (auto& [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    return good_vals.empty()? -1 : *max_element(good_vals.begin(), good_vals.end());\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> result;\n    result.reserve(lst.size());\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (i + 1 < lst.size()) {\n            result.push_back(min(lst[i], lst[i + 1]));\n            result.push_back(max(lst[i], lst[i + 1]));\n        } else {\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    double s = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    int total = 0;\n    for (int i = 0; i < q.size(); i++) {\n        total += q[i];\n    }\n    if (total > w) {\n        return false;\n    }\n    bool is_palindrome = true;\n    for (int i = 0; i < q.size() / 2; i++) {\n        if (q[i]!= q[q.size() - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n    return is_palindrome;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i]!= arr[arr.size() - 1 - i]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (const string& s : lst1) {\n        cnt1 += s.size();\n    }\n    int cnt2 = 0;\n    for (const string& s : lst2) {\n        cnt2 += s.size();\n    }\n    return (cnt1 <= cnt2)? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i * i <= a; i++) {\n        if (a % i == 0) {\n            cnt++;\n            while (a % i == 0) {\n                a /= i;\n            }\n        }\n    }\n    if (a > 1) {\n        cnt++;\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    double root = pow(a, 1.0 / 3.0);\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = to_string(dec, 2);\n    return \"0b\" + binary;\n}\n",
            "bool isHappy(const string& s) {\n    unordered_set<char> seen;\n    while (seen.insert(s[0]).second) {\n        int next = 0;\n        for (char c : s) {\n            next += c - '0';\n        }\n        s = to_string(next);\n    }\n    return s == \"1\";\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double grade : grades) {\n        if (grade == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            result.push_back(\"A\");\n        } else if (grade > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n        } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    int result = 2;\n    for (int i = 2; i < n; i++) {\n        result = result * 100;\n    }\n    return result;\n}\n",
            "string solve(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return bitset<32>(sum).to_string();\n}\n",
            "int add(const vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    istringstream iss(s);\n    string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    sort(words.begin(), words.end());\n    string result;\n    for (int i = 0; i < words.size(); i++) {\n        result += words[i];\n        if (i < words.size() - 1) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr[0] + arr.back()) % 2 == 0) {\n        sort(arr.begin(), arr.end(), greater<int>());\n    } else {\n        sort(arr.begin(), arr.end());\n    }\n    return arr;\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        int shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += shifted;\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n    auto it = adjacent_find(sorted_lst.begin(), sorted_lst.end());\n    if (it == sorted_lst.end()) {\n        return nullopt;\n    }\n    return *next(it);\n}\n",
            "int isBored(const string& s) {\n    string sentences = regex_replace(s, regex(\"[.!?]\\\\s*\"), \"\");\n    int count = 0;\n    for (const string& sentence : regex_split(sentences, regex(\"\\\\s+\"))) {\n        if (sentence.length() >= 2 && sentence.substr(0, 2) == \"I \") {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "template<typename T, typename U, typename V>\nconstexpr bool anyInt(const T& t, const U& u, const V& v) {\n    return (std::is_same_v<T, int> && std::is_same_v<U, int> && std::is_same_v<V, int>) ||\n           (std::is_same_v<T, int> && std::is_same_v<U, int> && std::is_same_v<V, std::string>) ||\n           (std::is_same_v<T, int> && std::is_same_v<U, std::string> && std::is_same_v<V, int>) ||\n           (std::is_same_v<T, int> && std::is_same_v<U, std::string> && std::is_same_v<V, std::string>) ||\n           (std::is_same_v<T, std::string> && std::is_same_v<U, int> && std::is_same_v<V, int>) ||\n           (std::is_same_v<T, std::string> && std::is_same_v<U, int> && std::is_same_v<V, std::string>) ||\n           (std::is_same_v<T, std::string> && std::is_same_v<U, std::string> && std::is_same_v<V, int>) ||\n           (std::is_same_v<T, std::string> && std::is_same_v<U, std::string> && std::is_same_v<V, std::string>);\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = toupper(ch);\n            if (islower(ch)) {\n                ch1 = toupper(ch1);\n            }\n            if (vowels.find(ch1)!= string::npos) {\n                ch1 = char(int(ch1) + 2);\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(const std::vector<int>& lst) {\n    std::vector<int> primes;\n    std::copy_if(lst.begin(), lst.end(), std::back_inserter(primes), isPrime);\n    if (primes.empty()) {\n        return 0;\n    }\n    std::string largest = std::to_string(std::max_element(primes.begin(), primes.end())->second);\n    int sum = 0;\n    for (char digit : largest) {\n        sum += std::stoi(digit);\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    return all_of(d.begin(), d.end(), [](const pair<string, string>& p) {\n        return islower(p.first[0]) || isupper(p.first[0]);\n    });\n}\n",
            "bool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i <= sqrt(num); i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\nvector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int i = 2; i <= n; i++) {\n        if (isPrime(i)) primes.push_back(i);\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    int result = 0;\n    while (a || b) {\n        int carry = (result >> 31) & 1;\n        result = (result << 1) % 1000000007;\n        if (a & 1) {\n            result += carry;\n        }\n        if (b & 1) {\n            result += carry;\n        }\n        a >>= 1;\n        b >>= 1;\n    }\n    return result;\n}\n",
            "int countUpper(const string& s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    if (num >= 0) {\n        return static_cast<int>(num + 0.5);\n    } else {\n        return static_cast<int>(num - 0.5);\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    regex re(\"[, ]\");\n    sregex_token_iterator it(s.begin(), s.end(), re, -1), end;\n    while (it!= end) {\n        string word = *it;\n        if (!word.empty()) {\n            result.push_back(word);\n        }\n        ++it;\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if (x!= y) else -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = int((m + n) / 2.0 + 0.5);\n    string result = bitset<32>(r_avg).to_string();\n    return result.substr(result.find('1'));\n}\n",
            "bool allDigitsOdd(const string& s) {\n    return all_of(s.begin(), s.end(), [](char c) {\n        return c - '0' % 2;\n    });\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        string s = to_string(num);\n        if (all_of(s.begin(), s.end(), [](char c) { return isdigit(c) && c - '0' % 2; })) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    for (int x : arr) {\n        if (1 <= x && x <= 9) {\n            sorted_arr.push_back(x);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    for (int x : sorted_arr) {\n        result.push_back(digit_names[x-1]);\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result;\n    for (int i : nums) {\n        result.push_back(i % 2!= 0? accumulate(nums.begin(), nums.begin() + i, 0) : accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>()));\n    }\n    return result;\n}\n",
            "bool isPalindrome(string txt) {\n    int left = 0;\n    int right = txt.length() - 1;\n    while (left < right) {\n        if (txt[left]!= txt[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; i++) {\n        string s = to_string(i);\n        if (isPalindrome(s)) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    int count = 0;\n    for (int n : arr) {\n        if (n > 0) {\n            int sum = 0;\n            while (n > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        } else if (n < 0) {\n            int sum = 0;\n            while (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum % 2 == 0) {\n                count++;\n            }\n        } else {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (equal(arr.begin() + i, arr.end(), sorted_arr.begin())) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_count = count_if(lst1.begin(), lst1.end(), [](int n) { return n % 2!= 0; });\n    int even_count = count_if(lst2.begin(), lst2.end(), [](int n) { return n % 2 == 0; });\n    return even_count >= odd_count? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words;\n    copy_if(test.begin(), test.end(), back_inserter(words),\n            [](char c) { return isspace(c) == 0; });\n    for (const string& w : words) {\n        freq[w]++;\n    }\n    unordered_map<string, int> result;\n    if (!freq.empty()) {\n        int max_freq = *max_element(freq.begin(), freq.end(),\n                                     [](const pair<string, int>& a,\n                                        const pair<string, int>& b) {\n                                         return a.second < b.second;\n                                     })\n                          .second;\n        for (const auto& [k, v] : freq) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, (s1 == s1.rbegin(), s1.end() - s1.begin())};\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int count = count_if(num.begin(), num.end(), [](char c) { return c % 2 == 1; });\n        string res = \"the number of odd elements in the string \" + to_string(count) + \" of the input.\";\n        result.push_back(res);\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = max(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int ans = 0;\n    for (auto& row : grid) {\n        int cur = 0;\n        for (int x : row) {\n            cur += x;\n            if (cur > capacity) {\n                cur = x;\n                ans++;\n            }\n        }\n        ans += ceil(cur / capacity);\n    }\n    return ans;\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num & 1) {\n            count++;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nvector<int> sortArray(const vector<int>& arr) {\n    vector<pair<int, int>> count_and_value;\n    for (int i = 0; i < arr.size(); i++) {\n        count_and_value.push_back({countOnes(arr[i]), arr[i]});\n    }\n    sort(count_and_value.begin(), count_and_value.end());\n    vector<int> result;\n    for (int i = 0; i < count_and_value.size(); i++) {\n        result.push_back(count_and_value[i].second);\n    }\n    return result;\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    vector<string> words;\n    istringstream iss(s);\n    for (string word; iss >> word;) {\n        if (count_if(word.begin(), word.end(), ::islower) == n) {\n            words.push_back(word);\n        }\n    }\n    return words;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i >= 0; i--) {\n        if (vowels.find(word[i])!= string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nstring matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return (check(s1) || check(s2))? \"Yes\" : \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    vector<int> result(arr);\n    nth_element(result.begin(), result.begin() + k - 1, result.end(), greater<int>());\n    result.resize(k);\n    return result;\n}\n",
            "int solution(const vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2!= 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        string s = to_string(arr[i]);\n        if (s.size() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz;\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.size()!= 10 || date[2]!= '-' || date[5]!= '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        if (d >= 1 && d <= 28) {\n            int y = stoi(date.substr(6, 4));\n            return y % 4 == 0 && (y % 100!= 0 || y % 400 == 0);\n        } else {\n            return d >= 1 && d <= 29;\n        }\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    vector<string> result;\n    if (txt.find(' ')!= string::npos) {\n        result = split(txt,'');\n    } else if (txt.find(',')!= string::npos) {\n        result = split(txt, ',');\n    } else {\n        result.push_back(to_string(count_if(txt.begin(), txt.end(), [](char c) {\n            return islower(c) && (int)c % 2 == 0;\n        })));\n    }\n    return result;\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i]++;\n    }\n    int max_count = 0;\n    for (auto& [_, count] : freq) {\n        max_count = max(max_count, count);\n    }\n    return max_count <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && isPrime(length))? \"YES\" : \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    if (find(arr.begin(), arr.end(), 0)!= arr.end()) {\n        return 0;\n    }\n    int negatives = count_if(arr.begin(), arr.end(), [](int n) { return n < 0; });\n    int sign = negatives % 2 == 1? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int a, int b) { return a + abs(b); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, n * n + 1));\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i + 1 < n) {\n                    temp.push_back(dp[i + 1][j]);\n                }\n                if (j + 1 < n) {\n                    temp.push_back(dp[i][j + 1]);\n                }\n                if (!temp.empty()) {\n                    dp[i][j] = *min_element(temp.begin(), temp.end());\n                }\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(1 if i % 2 == 0 else dp[0][0]);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    int count = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\n",
            "bool isNested(const string& s) {\n    stack<char> stk;\n    for (char ch : s) {\n        if (ch == '[') {\n            stk.push(ch);\n        } else if (ch == ']') {\n            if (stk.empty() || stk.top()!= '[') {\n                return false;\n            }\n            stk.pop();\n        }\n    }\n    return stk.empty();\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        sum += ceil(n) * ceil(n);\n    }\n    return sum;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    int last_space_index = txt.find_last_of(' ');\n    if (last_space_index == string::npos) {\n        return false;\n    }\n    string last_word = txt.substr(last_space_index + 1);\n    return last_word.length() == 1 && isalpha(last_word[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    sort(arr.begin(), arr.end());\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] - arr[i - 1]!= 1 && arr[i] - arr[i - 1]!= -1) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> negatives;\n    vector<int> positives;\n    for (int i : lst) {\n        if (i < 0) {\n            negatives.push_back(i);\n        } else if (i > 0) {\n            positives.push_back(i);\n        }\n    }\n    optional<int> max_neg = negatives.empty()? nullopt : *max_element(negatives.begin(), negatives.end());\n    optional<int> min_pos = positives.empty()? nullopt : *min_element(positives.begin(), positives.end());\n    return {max_neg, min_pos};\n}\n",
            "optional<double> anyToReal(const any& o) {\n    if (o.has_value()) {\n        if (holds_alternative<string>(o.value())) {\n            try {\n                return stod(any_cast<string>(o.value()));\n            } catch (const invalid_argument&) {\n                return nullopt;\n            }\n        } else if (holds_alternative<int>(o.value())) {\n            return any_cast<int>(o.value());\n        } else if (holds_alternative<double>(o.value())) {\n            return any_cast<double>(o.value());\n        }\n    }\n    return nullopt;\n}\noptional<double> compareOne(const any& a, const any& b) {\n    const optional<double> a1 = anyToReal(a);\n    const optional<double> b1 = anyToReal(b);\n    if (a1 && b1) {\n        if (*a1 == *b1) {\n            return nullopt;\n        } else if (*a1 > *b1) {\n            return *a1;\n        } else {\n            return *b1;\n        }\n    }\n    return nullopt;\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "long long specialFactorial(int n) {\n    long long fact = 1, result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    string suffix[] = {\"txt\", \"exe\", \"dll\"};\n    vector<string> tokens;\n    split(tokens, file_name, is_any_of(\".\"));\n    if (tokens.size()!= 2 || find(suffix, suffix + 3, tokens[1]) == suffix + 3 || tokens[0].empty() ||!isalpha(tokens[0][0]) || count_if(tokens[0].begin(), tokens[0].end(), ::isdigit) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    vector<string> words = split(sentence, \" \");\n    string result;\n    for (string w : words) {\n        if (isPrime(w.length())) {\n            result += w + \" \";\n        }\n    }\n    return result;\n}\n",
            "bool simplify(const string& x, const string& n) {\n    int a = stoi(x.substr(0, x.find(\"/\")));\n    int b = stoi(x.substr(x.find(\"/\") + 1));\n    int c = stoi(n.substr(0, n.find(\"/\")));\n    int d = stoi(n.substr(n.find(\"/\") + 1));\n    return a * c % b * d == 0;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    int sum = 0;\n    for (char c : n_str) {\n        sum += c - '0';\n    }\n    return sum;\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    vector<int> sorted_nums = nums;\n    sort(sorted_nums.begin(), sorted_nums.end(),\n         [](int a, int b) { return digitsSum(a) > digitsSum(b); });\n    return sorted_nums;\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    return count_if(nums.begin(), nums.end(), [&](int n) {\n        return n > 10 && n % 2 == 1 && odds.find(to_string(n)[0])!= string::npos;\n    });\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() || find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return {};\n    }\n    int l = distance(planets.begin(), find(planets.begin(), planets.end(), planet1));\n    int r = distance(planets.begin(), find(planets.begin(), planets.end(), planet2));\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    vector<string> result;\n    for (int i = l + 1; i < r; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        return a.size() < b.size() || (a.size() == b.size() && a < b);\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        if (n >= 0 && n % 2 == 1) {\n            sum += n * n;\n        }\n    }\n    return sum;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = INT_MIN;\n    string max_ext;\n    for (const string& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) {\n                upper++;\n            } else if (islower(c)) {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (int i = 0; i < b.length(); i++) {\n        string temp = b.substr(i) + b.substr(0, i);\n        if (a.find(temp)!= string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string s = to_string(abs(num));\n    int even = 0;\n    for (char c : s) {\n        if (c - '0' % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, s.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    string res = \"\";\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    int arr[] = {a, b, c};\n    sort(arr, arr + 3);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_count = 0;\n    string max_word = \"\";\n    for (const string& word : words) {\n        int count = unordered_set<char>(word.begin(), word.end()).size();\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        } else if (count == max_count) {\n            max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    string result;\n    for (char ch : s) {\n        if (isalpha(ch)) {\n            result += toupper(ch);\n        } else {\n            result += ch;\n        }\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, txt.data(), txt.size());\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_Final(digest, &ctx);\n    ostringstream oss;\n    oss << hex << setfill('0') << setw(2) << static_cast<int>(digest[0]);\n    for (int i = 1; i < MD5_DIGEST_LENGTH; i++) {\n        oss << hex << setfill('0') << setw(2) << static_cast<int>(digest[i]);\n    }\n    return oss.str();\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == '(') {\n                stk.Push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.Pop();\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = 0;\n        foreach (var number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        double deviation = 0;\n        foreach (var number in numbers) {\n            deviation += Math.Abs(number - mean);\n        }\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i!= 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split();\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            foreach (var ch in group) {\n                if (ch == \"(\") {\n                    depth++;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == \")\") {\n                    depth--;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.Contains(substring)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        int nSum = numbers.Sum();\n        int nProduct = numbers.Aggregate(1, (acc, x) => acc * x);\n        return new List<int>() { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        int maxSoFar = int.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string MakePalindrome(string s) {\n        if (s == string.Concat(s.Reverse())) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i) == string.Concat(s.Substring(i).Reverse())) {\n                return s + s.Substring(0, i).Reverse();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        return String.Join(\"\", a.Zip(b, (x, y) => (x == y? \"0\" : \"1\")));\n    }\n}\n",
            "class Global {\n    public static string Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longest = strs[0];\n        foreach (string s in strs) {\n            if (s.Length > longest.Length) {\n                longest = s;\n            }\n        }\n        return longest;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        while (b!= 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(0, n + 1));\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        return new HashSet<char>(s.ToLower()).Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int>() {\n            { \"o\", 4 },\n            { \"o|\", 2 },\n            { \".|\", 1 }\n        };\n        var notes = musicString.Split();\n        return notes.Select(note => durations[note]).ToList();\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i <= s.Length - substring.Length; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int>() {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 }\n        };\n        var numList = numbers.Split(\" \").Where(x => numDict.ContainsKey(x)).OrderBy(x => numDict[x]).ToList();\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        double minDiff = double.PositiveInfinity;\n        var closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.Clear();\n                closestPair.Add(sortedNumbers[i - 1]);\n                closestPair.Add(sortedNumbers[i]);\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        double minNum = double.PositiveInfinity;\n        double maxNum = double.NegativeInfinity;\n        foreach (var num in numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new List<double>(new double[numbers.Count]);\n        } else {\n            var result = new List<double>(numbers.Count);\n            foreach (var num in numbers) {\n                result.Add((num - minNum) / (maxNum - minNum));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        return values.OfType<int>().ToList();\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.GetValueOrDefault(num) + 1;\n        }\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                flipped.Add(ch);\n            } else if (char.IsLower(ch)) {\n                flipped.Add(char.ToUpper(ch));\n            } else if (char.IsUpper(ch)) {\n                flipped.Add(char.ToLower(ch));\n            }\n        }\n        return new string(flipped.ToArray());\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Concat(strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        return strs.Where(s => s.StartsWith(prefixStr)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        var result = new List<int>();\n        foreach (var num in l) {\n            if (num > 0) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; Math.Floor(Math.Sqrt(n)) >= i; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = new List<int>();\n        for (int i = 0; i < l.Count; i += 3) {\n            sortedThird.Add(l[i]);\n        }\n        sortedThird.Sort();\n        var result = new List<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                result.Add(sortedThird[i // 3]);\n            } else {\n                result.Add(l[i]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        return new List<int>(new HashSet<int>(l));\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        int max = l[0];\n        foreach (int i in l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += Convert.ToString(i).Count(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>();\n        for (int i = 0; i < l.Count; i += 2) {\n            sortedEven.Add(l[i]);\n        }\n        sortedEven.Sort();\n        var result = new List<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                result.Add(sortedEven[i / 2]);\n            } else {\n                result.Add(l[i]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Append(s.Substring(i));\n            } else {\n                result.Append(s.Substring(i + 1, 2));\n                result.Append(s[i]);\n            }\n        }\n        return result.ToString();\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int PrimeFib(int n) {\n        int f0 = 0, f1 = 1;\n        int cnt = 0;\n        while (cnt < n) {\n            int f2 = f0 + f1;\n            f0 = f1;\n            f1 = f2;\n            if (IsPrime(f1)) {\n                cnt++;\n            }\n        }\n        return f1;\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        var result = new List<int>();\n        foreach (var i in l) {\n            result.Add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas.ToString());\n            x /= bas;\n        }\n        return string.Join(\"\", digits.ToArray());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return (double)a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>(l);\n        sl.Sort();\n        if (sl.Count % 2!= 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        for (int i = 0; i < txt.Length / 2; i++) {\n            if (txt[i]!= txt[txt.Length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        char[] result = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int charCode = (int)s[i];\n            charCode = (charCode - 97 + 5) % 26 + 97;\n            result[i] = (char)charCode;\n        }\n        return new string(result);\n    }\n    public static string DecodeShift(string s) {\n        char[] result = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int charCode = (int)s[i];\n            charCode = (charCode - 97 + 21) % 26 + 97;\n            result[i] = (char)charCode;\n        }\n        return new string(result);\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        return new string(txt.Where(c =>!\"aeiouAEIOU\".Contains(c)).ToArray());\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        foreach (var x in l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0).SetEquals(s1);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '<') {\n                depth++;\n            } else if (b == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return diff.TrueForAll(x => x <= 0) || diff.TrueForAll(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        return l1.Intersect(l2).OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return (n + 1) * n / 2;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n--;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        int cnt = 0;\n        foreach (char c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && cnt > 0)) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return new string(xStr.Reverse().ToArray());\n        } else {\n            var left = xStr.Substring(xStr.Length - shift);\n            var right = xStr.Substring(0, xStr.Length - shift);\n            return right + left;\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.Where(c => char.IsUpper(c)).Sum(c => (int)c);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        string[] words = s.Split(' ');\n        int apples = int.Parse(words[Array.IndexOf(words, \"apples\") - 1]);\n        int oranges = int.Parse(words[Array.IndexOf(words, \"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                evens.Add(arr[i]);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        int min_even = evens[0];\n        int min_even_index = 0;\n        for (int i = 1; i < evens.Count; i++) {\n            if (evens[i] < min_even) {\n                min_even = evens[i];\n                min_even_index = i;\n            }\n        }\n        return new List<int>() { min_even, min_even_index };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            freqs[n] = freqs.GetValueOrDefault(n, 0) + 1;\n        }\n        var goodVals = new List<int>();\n        foreach (var kvp in freqs) {\n            if (kvp.Value >= kvp.Key) {\n                goodVals.Add(kvp.Key);\n            }\n        }\n        return goodVals.Count > 0? goodVals.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new List<int>(lst);\n        sl.Sort();\n        var result = new List<int>();\n        int left = 0, right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double p = (a + b + c) / 2.0;\n            return Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalindrome = true;\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]!= q[q.Count - 1 - i]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        int total = 0;\n        foreach (int num in q) {\n            total += num;\n        }\n        return isPalindrome && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i]!= arr[arr.Count - 1 - i]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        int cnt1 = 0;\n        foreach (var s in lst1) {\n            cnt1 += s.Length;\n        }\n        int cnt2 = 0;\n        foreach (var s in lst2) {\n            cnt2 += s.Length;\n        }\n        return cnt1 <= cnt2? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; Math.Floor(Math.Sqrt(n)) + 1 > i; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; a > i; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        double root = Math.Pow(a, 1.0 / 3.0);\n        return (int)Math.Pow(root, 3) == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => \"2357BD\".Contains(x));\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        string binary = Convert.ToString(dec, 2);\n        return \"0b\" + binary;\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        int digitsSum = 0;\n        foreach (char c in n.ToString()) {\n            digitsSum += int.Parse(c.ToString());\n        }\n        return Convert.ToString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        string[] words = s.Split(\" \");\n        List<string> sortedWords = new List<string>();\n        foreach (string word in words) {\n            char[] sortedChars = word.ToCharArray();\n            Array.Sort(sortedChars);\n            sortedWords.Add(new string(sortedChars));\n        }\n        return string.Join(\" \", sortedWords);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<IList<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int>() { i, j });\n                }\n            }\n        }\n        return coords.OrderBy(a => a[0] * -1 + a[1]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        } else {\n            return arr.OrderBy(x => x).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = (int)ch + 4;\n            if (shifted > (int)'z') {\n                shifted -= 26;\n            }\n            result.Add((char)shifted);\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new SortedSet<int>(lst);\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl.ElementAt(1);\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        return sentences.Where(sentence => sentence.Length >= 2).Sum(sentence => sentence.StartsWith(\"I \")? 1 : 0);\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int && y is int && z is int) {\n            if ((int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        string vowels = \"aeiouAEIOU\";\n        char[] result = new char[message.Length];\n        for (int i = 0; i < message.Length; i++) {\n            char ch = message[i];\n            if (Char.IsLetter(ch)) {\n                char ch1 = Char.ToUpper(ch);\n                if (Char.IsLower(ch)) {\n                    ch1 = Char.ToLower(ch1);\n                }\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                result[i] = ch1;\n            } else {\n                result[i] = ch;\n            }\n        }\n        return new string(result);\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = lst.Where(n => IsPrime(n)).ToList();\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max().ToString();\n        return largest.Sum(c => (int)Char.GetNumericValue(c));\n    }\n    private static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d.Count == 0) {\n            return false;\n        }\n        bool allLower = true;\n        bool allUpper = true;\n        foreach (char c in d.Keys) {\n            if (char.IsLower(c)) {\n                allUpper = false;\n            } else if (char.IsUpper(c)) {\n                allLower = false;\n            } else {\n                return false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            bool isPrime = true;\n            for (int p = 2; p < num; p++) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return Math.Abs(a % 10) * Math.Abs(b % 10);\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        return s.Where((c, i) => i % 2 == 0 && vowels.Contains(c)).Count();\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        double num = double.Parse(value);\n        if (num >= 0) {\n            return (int)Math.Round(num + 0.5);\n        } else {\n            return (int)Math.Round(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>(n);\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        return Regex.Split(s, @\"\\s*,\\s*|\\s+\");\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if x!= y else -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int rAvg = (m + n) / 2 + (m + n) % 2;\n        return Convert.ToString(rAvg, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> UniqueDigits(IList<int> x) {\n        return x.Where(num => num.ToString().All(digit => Convert.ToInt32(digit) % 2!= 0)).OrderBy(num => num).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string>() { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sortedArr = arr.Where(x => x >= 1 && x <= 9).OrderByDescending(x => x).ToList();\n        return sortedArr.Select(x => digitNames[x - 1]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = Enumerable.Range(1, n + 1).ToList();\n        return nums.Select((num, i) => i % 2!= 0? nums.Take(i).Sum() : nums.Take(i).Aggregate(1, (x, y) => x * y)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            string s = i.ToString();\n            if (s == new string(s.Reverse().ToArray())) {\n                cnt[i % 2] += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        string nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(c => int.Parse(c.ToString()));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => DigitsSum(n) > 0);\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.GetRange(i, arr.Count - i).SequenceEqual(sortedArr.GetRange(0, arr.Count - i)) && arr.GetRange(0, i).SequenceEqual(sortedArr.GetRange(arr.Count - i, arr.Count))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        int oddCount = 0;\n        int evenCount = 0;\n        foreach (int num in lst1) {\n            if (num % 2!= 0) {\n                oddCount++;\n            }\n        }\n        foreach (int num in lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        return evenCount >= oddCount? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(\" \");\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                freq[w] = freq.ContainsKey(w)? freq[w] + 1 : 1;\n            }\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = 0;\n            foreach (var kvp in freq) {\n                if (kvp.Value == maxFreq) {\n                    result[kvp.Key] = kvp.Value;\n                } else if (kvp.Value > maxFreq) {\n                    maxFreq = kvp.Value;\n                    result.Clear();\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new string(s.Where(ch =>!c.Contains(ch)).ToArray());\n        return new List<string> { s1, \"yes\" if s1.SequenceEqual(s1.Reverse()) else \"no\" };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            int n = 0;\n            foreach (var c in num) {\n                if (c % 2 == 1) {\n                    n++;\n                }\n            }\n            string rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (int n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = int.MaxValue;\n            foreach (int n in nums) {\n                minSum = Math.Min(minSum, n);\n            }\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Select(arr => (int)Math.Ceiling((double)arr.Sum() / capacity)).Sum();\n    }\n}\n",
            "class Global {\n    public static int CountOnes(int num) {\n        int count = 0;\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                count++;\n            }\n            num >>= 1;\n        }\n        return count;\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n            int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return a - b;\n            }\n            return aOnes - bOnes;\n        });\n        return sortedArr;\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = s.Split(\" \");\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (w.Length > 0 && w.Count(c => consonants.Contains(c.ToLower())) == n) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        string vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i >= 0; i--) {\n            if (vowels.Contains(word[i]) &&!vowels.Contains(word[i - 1]) &&!vowels.Contains(word[i + 1])) {\n                return word[i];\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        string s1 = lst[0] + lst[1];\n        string s2 = lst[1] + lst[0];\n        return \"Yes\" if (check(s1) || check(s2)) else \"No\";\n    }\n    private static bool check(string s) {\n        int depth = 0;\n        foreach (char ch in s) {\n            if (ch == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        return sortedArr.GetRange(sortedArr.Count - k, k);\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2!= 0).Sum();\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        return arr.Take(k).Where(n => n.ToString().Length <= 2).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int>() { 1 };\n        while (n!= 1) {\n            if (n % 2!= 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length!= 10 || date[2]!= \"-\" || date[5]!= \"-\") {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (d >= 1 && d <= 31) {\n                return true;\n            }\n        } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d >= 1 && d <= 30) {\n                return true;\n            }\n        } else if (m == 2) {\n            if (d >= 1 && d <= 29) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            return new List<string>() { txt.Length.ToString() };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i - 1] > lst[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        return length > 0 && IsPrime(length)? \"YES\" : \"NO\";\n    }\n    private static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        int sign = -1 * (arr.Count - arr.Count(n => n < 0)) % 2;\n        return sign * arr.Sum(n => Math.Abs(n));\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        int n = grid.Count;\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i > 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j > 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i < n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j < n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(minVal, temp);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(i % 2 == 0? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        var seq = new List<int>() { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var digits = n.ToString().ToCharArray();\n        int sum = 1;\n        foreach (char digit in digits) {\n            if (digit % 2 == 1) {\n                sum *= int.Parse(digit.ToString());\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new Stack<int>();\n        var closeIdx = new Stack<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Push(i);\n            } else if (s[i] == ']') {\n                closeIdx.Push(i);\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.Count;\n        foreach (int idx in openIdx) {\n            if (i < l && idx < closeIdx.Peek()) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        return lst.Select(n => (int)Math.Ceiling(n) * (int)Math.Ceiling(n)).Sum();\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (txt.Length == 0) {\n            return false;\n        }\n        int lastSpaceIndex = txt.LastIndexOf(' ');\n        if (lastSpaceIndex == -1) {\n            return false;\n        }\n        string lastWord = txt.Substring(lastSpaceIndex + 1);\n        return lastWord.Length == 1 && char.IsLetter(lastWord[0]);\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Count > 0? idx.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = new List<int>();\n        var pos = new List<int>();\n        foreach (var i in lst) {\n            if (i < 0) {\n                neg.Add(i);\n            } else if (i > 0) {\n                pos.Add(i);\n            }\n        }\n        int? maxNeg = neg.Count > 0? neg.Max() : null;\n        int? minPos = pos.Count > 0? pos.Min() : null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        if (a is string) {\n            a = double.Parse((string)a.Replace(',', '.'));\n        } else if (a is int) {\n            a = (double)(int)a;\n        } else if (a is double) {\n            // Do nothing\n        } else {\n            throw new Exception(\"Type Error\");\n        }\n        if (b is string) {\n            b = double.Parse((string)b.Replace(',', '.'));\n        } else if (b is int) {\n            b = (double)(int)b;\n        } else if (b is double) {\n            // Do nothing\n        } else {\n            throw new Exception(\"Type Error\");\n        }\n        if (a is double && b is double) {\n            if ((double)a == (double)b) {\n                return null;\n            } else if ((double)a > (double)b) {\n                return (double)a;\n            } else {\n                return (double)b;\n            }\n        } else {\n            throw new Exception(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        string[] suf = { \"txt\", \"exe\", \"dll\" };\n        string[] lst = fileName.Split(\".\");\n        if (lst.Length!= 2 ||!suf.Contains(lst[1]) || lst[0].Length == 0 ||!Char.IsLetter(lst[0][0]) || fileName.Count(x => Char.IsDigit(x)) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += (int)Math.Pow(lst[i], 2);\n            } else if (i % 4 == 0) {\n                result += (int)Math.Pow(lst[i], 3);\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        return string.Join(\" \", words.Where(w => IsPrime(w.Length)));\n    }\n    private static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split(\"/\");\n        var ns = n.Split(\"/\");\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        string nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(c => int.Parse(c.ToString()));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(n => DigitsSum(n)).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        return nums.Count(n => n > 10 && n % 2 == 1 && n.ToString()[0] == odds[0]);\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) ||!names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l - 1);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        return lst.Where(s => s.Length % 2 == 0).OrderBy(s => s.Length).ThenBy(s => s).ToList();\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; Math.Sqrt(i) <= n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        return lst.Where(n => n >= 0 && n % 2 == 1).Select(n => n * n).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        return game.Zip(guess, (x, y) => Math.Abs(x - y)).ToList();\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        int maxS = int.MinValue;\n        string maxExt = \"\";\n        foreach (string ext in extensions) {\n            int upper = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n                    upper++;\n                }\n            }\n            int lower = ext.Length - upper;\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            string temp = b.Substring(i) + b.Substring(0, i);\n            if (a.Contains(temp)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = num.ToString().ToCharArray();\n        var even = 0;\n        foreach (var d in ds) {\n            if (int.Parse(d) % 2 == 0) {\n                even++;\n            }\n        }\n        return new List<int>() { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        string[] values = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] numerals = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string res = \"\";\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= numerals[i]) {\n                res += values[i];\n                num -= numerals[i];\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var sides = new int[] { a, b, c };\n        Array.Sort(sides);\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        int maxCount = 0;\n        string maxWord = \"\";\n        foreach (string word in words) {\n            int count = 0;\n            foreach (char c in word) {\n                if (!Char.IsLetterOrDigit(c)) {\n                    continue;\n                }\n                count++;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                maxWord = word;\n            } else if (count == maxCount) {\n                maxWord = string.Compare(maxWord, word) < 0? maxWord : word;\n            }\n        }\n        return maxWord;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int>() { num + need, remaining - need };\n        } else {\n            return new List<int>() { num + remaining, 0 };\n        }\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = new List<string>(operators);\n        var nums = new List<int>(operands);\n        for (int i = ops.Count - 1; i >= 0; i--) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int)Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n        }\n        for (int i = 0; i < ops.Count; i++) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.Count; i++) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        var result = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            char ch = s[i];\n            if (!Char.IsLetter(ch)) {\n                result[i] = ch;\n            } else if (Char.IsUpper(ch)) {\n                result[i] = Char.ToLower(ch);\n            } else {\n                result[i] = Char.ToUpper(ch);\n            }\n        }\n        return new string(result);\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        using var md5 = MD5.Create();\n        var inputBytes = Encoding.UTF8.GetBytes(txt);\n        var hashBytes = md5.ComputeHash(inputBytes);\n        var hashString = BitConverter.ToString(hashBytes);\n        return hashString.Replace(\"-\", \"\").ToLowerInvariant();\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        int lower = Math.Max(2, Math.Min(a, b));\n        int upper = Math.Min(8, Math.Max(a, b));\n        var result = new List<int>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] - numbers[j].abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = <String>[];\n    var currentGroup = '';\n    var parens = parenString.replaceAll(' ', '');\n    for (var ch in parens.split('')) {\n        if (ch == '(') {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == ')') {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = '';\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i!= 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split();\n    for (var group in parenGroups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group) {\n            if (ch == \"(\") {\n                depth++;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth--;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    int nSum = numbers.reduce((a, b) => a + b);\n    int nProduct = numbers.reduce((a, b) => a * b);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    int maxSoFar = -1 << 63;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "String makePalindrome(String s) {\n    if (s == s.split('').reversed.join()) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (s.substring(i) == s.substring(i).split('').reversed.join()) {\n            return s + s.substring(0, i).split('').reversed.join();\n        }\n    }\n    return '';\n}\n",
            "String stringXor(String a, String b) {\n    return a.split('').map((e, i) => e == b[i]? '0' : '1').join('');\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestStr = strs[0];\n    for (String str in strs) {\n        if (str.length > longestStr.length) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    while (b!= 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (var i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return List.generate(n + 1, (i) => i.toString()).join(' ');\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    var notes = musicString.split();\n    return notes.map((note) => durations[note]).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n    numList.sort((a, b) => numDict[a].compareTo(numDict[b]));\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    numbers.sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < numbers.length; i++) {\n        double diff = numbers[i] - numbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i - 1], numbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce(min);\n    double maxNum = numbers.reduce(max);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.whereType<int>().toList();\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    for (int divisor = 2; divisor <= n; divisor++) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n = n ~/ divisor;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    return numbers.toSet().toList();\n}\n",
            "String flipCase(String s) {\n    return s.splitMapJoin('', onNonMatch: (nonMatch) => nonMatch.toUpperCase(), onMatch: (match) => match.toLowerCase());\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join();\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.getRange(0, l.length - 2).toList()..sort();\n    return l.map((e, i) => i % 3 == 0? sortedThird[i ~/ 3] : e).toList();\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.toSet().toList();\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce(max);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.where((element) => element.isEven).toList()..sort();\n    return l.map((e) => e.isEven? sortedEven.removeAt(0) : e).toList();\n}\n",
            "String encodeCyclic(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join();\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\nint primeFib(int n) {\n    int a = 0, b = 1, c;\n    for (int i = 0; i < n; i++) {\n        c = a + b;\n        if (isPrime(c)) a = b, b = c;\n    }\n    return b;\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    Set<int> seen = Set<int>.from(l);\n    for (int num in l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    var digits = <String>[];\n    while (x > 0) {\n        digits.add(x % bas.toString());\n        x = x ~/ bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return (a * h) / 2.0;\n}\n",
            "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    l.sort();\n    if (l.length % 2!= 0) {\n        return l[l.length ~/ 2];\n    } else {\n        return (l[l.length ~/ 2] + l[l.length ~/ 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    return s.split('').map((ch) => String.fromCharCode((ch.codeUnitAt(0) - 97 + 5) % 26 + 97)).join('');\n}\nString decodeShift(String s) {\n    return s.split('').map((ch) => String.fromCharCode((ch.codeUnitAt(0) - 97 + 21) % 26 + 97)).join('');\n}\n",
            "String removeVowels(String txt) {\n    return txt.replaceAll(RegExp(r'[aeiouAEIOU]'), '');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return Set.from(s0.split('')).difference(Set.from(s1.split(''))).isEmpty;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            depth++;\n        } else if (brackets[i] == \">\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    return l.every((x, i) => i == 0 || x <= l[i - 1]);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return l1.toSet().intersection(l2.toSet()).toList();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n = n ~/ i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) ~/ 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '(') {\n            depth++;\n        } else if (brackets[i] == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    return xs.map((e, i) => e * i).toList();\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    const vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.toUpperCase().split('').where((c) => c.isNotEmpty).map((c) => c.codeUnitAt(0)).reduce((a, b) => a + b);\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.indexOf('apples') - 1]);\n    var oranges = int.parse(words[words.indexOf('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = arr.where((n) => n % 2 == 0).toList();\n    if (evens.isEmpty) {\n        return [];\n    }\n    var minEven = evens.reduce(min);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        freqs[n] = (freqs[n]?? 0) + 1;\n    }\n    var goodVals = freqs.keys.where((k) => freqs[k] >= k).toList();\n    return goodVals.isEmpty? -1 : goodVals.reduce(max);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    lst.sort();\n    var result = <int>[];\n    for (int i = 0; i < lst.length; i += 2) {\n        result.add(lst[i]);\n        if (i + 1 < lst.length) {\n            result.add(lst[i + 1]);\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool isPalindrome = true;\n    for (int i = 0; i < q.length / 2; i++) {\n        if (q[i]!= q[q.length - 1 - i]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int e in q) {\n        total += e;\n    }\n    return isPalindrome && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i]!= arr[arr.length - 1 - i]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.fold(0, (sum, s) => sum + s.length);\n    int cnt2 = lst2.fold(0, (sum, s) => sum + s.length);\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    double root = pow(a, 1.0 / 3.0).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.split('').where((char) => char == '2' || char == '3' || char == '5' || char == '7' || char == 'B' || char == 'D').length;\n}\n",
            "String decimalToBinary(int dec) {\n    return \"0b\" + dec.toRadixString(2);\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor(); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}\n",
            "String solve(int n) {\n    int digitsSum = 0;\n    for (var d in n.toString().split('')) {\n      digitsSum += int.parse(d);\n    }\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.where((i) => i.isOdd && i.isEven).reduce((a, b) => a + b);\n}\n",
            "String antiShuffle(String s) {\n    List<String> words = s.split(\" \").map((word) => word.split('').sorted().join('')).toList();\n    return words.join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    return coords.sorted((a, b) => a[0] == b[0]? b[1] - a[1] : a[0] - b[0]);\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr.last) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.toList();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        int shifted = s.codeUnitAt(i) + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(String.fromCharCode(shifted));\n    }\n    return result.join();\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList()..sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = s.split(RegExp(r\"\\.!\\?\"));\n    int count = 0;\n    for (String sentence in sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    const vowels = \"aeiouAEIOU\";\n    var result = <String>[];\n    for (var ch in message.split(\"\")) {\n        if (ch.isAlphabetic) {\n            var ch1 = ch.toUpperCase();\n            if (ch.isLowerCase) {\n                ch1 = ch.toLowerCase();\n            }\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "int skjkasdkd(List<int> lst) {\n    var primes = lst.where((n) => n > 1 && lst.every((m) => m % n!= 0 || m == n)).toList();\n    if (primes.isEmpty) {\n        return 0;\n    }\n    var largest = primes.reduce((a, b) => a > b? a : b);\n    return largest.toString().split('').map((e) => int.parse(e)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String,String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((k) => k.toLowerCase() == k) || d.keys.every((k) => k.toUpperCase() == k);\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num = 2; num < n; num++) {\n        if (primes.every((p) => num % p!= 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    const vowels = \"AEIOU\";\n    return s.split('').where((c, i) => i % 2 == 0 && vowels.contains(c)).length;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return num.round() + 0.5;\n    } else {\n        return num.round() - 0.5;\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return List.generate(n, (i) => n + 2 * i);\n}\n",
            "List<String> wordsString(String s) {\n    return s.split(RegExp(r\"[, ]+\")).where((w) => w.isNotEmpty).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    } else if (y % 2 == 0) {\n        return y;\n    } else {\n        return y - 1 if (x!= y) else -1;\n    }\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int rAvg = ((m + n) / 2).round() + 1;\n    return rAvg.toRadixString(2);\n}\n",
            "bool allDigitsOdd(String s) {\n    return s.split('').every((digit) => int.parse(digit) % 2!= 0);\n}\nList<int> uniqueDigits(List<int> x) {\n    return x.where((num) => allDigitsOdd(num.toString())).toList();\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.where((x) => x >= 1 && x <= 9).toList()..sort((a, b) => b.compareTo(a));\n    return digitNames.getRange(0, sortedArr.length).toList();\n}\n",
            "List<int> f(int n) {\n    var nums = List.generate(n, (i) => i + 1);\n    return nums.map((i) => i % 2!= 0? nums.take(i).reduce((x, y) => x + y) : nums.take(i).reduce((x, y) => x * y)).toList();\n}\n",
            "List<int> evenOddPalindrome(int n) {\n    int even = 0;\n    int odd = 0;\n    for (int i = 1; i <= n; i++) {\n        String s = i.toString();\n        if (s == s.split('').reversed.join('')) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n",
            "int countNums(List<int> arr) {\n    return arr.where((n) => n.toString().split('').map(int.parse).reduce((a, b) => a + b) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    List<int> sortedArr = arr.toList()..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) && arr.sublist(0, i) == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCount = lst1.where((num) => num % 2!= 0).length;\n    int evenCount = lst2.where((num) => num % 2 == 0).length;\n    return evenCount >= oddCount? \"YES\" : \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    var freq = <String, int>{};\n    var words = test.split(\" \")\n       .where((w) => w.length > 0)\n       .toList();\n    for (var w in words) {\n        freq[w] = (freq[w]?? 0) + 1;\n    }\n    var result = <String, int>{};\n    if (freq.length > 0) {\n        var maxFreq = freq.values.reduce(max);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join();\n}\nList<String> reverseDelete(String s, String c) {\n    var s1 = s.split('').where((ch) =>!c.contains(ch)).join();\n    return [s1, isPalindrome(s1)? 'yes' : 'no'];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (String num in lst) {\n        int n = 0;\n        for (int i = 0; i < num.length; i++) {\n            if (num.codeUnitAt(i) % 2 == 1) {\n                n++;\n            }\n        }\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = nums.reduce(min);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => (arr.reduce((a, b) => a + b) / capacity).ceil()).reduce((a, b) => a + b);\n}\n",
            "int countOnes(int num) {\n    return num.toRadixString(2).split(\"1\").length - 1;\n}\nList<int> sortArray(List<int> arr) {\n    arr.sort((a, b) => countOnes(a).compareTo(countOnes(b)) == 0? a.compareTo(b) : countOnes(a).compareTo(countOnes(b)));\n    return arr;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \").where((w) => w.length > 0).toList();\n    return words.where((w) => w.toLowerCase().split(\"\").where((c) => consonants.contains(c)).length == n).toList();\n}\n",
            "String getClosestVowel(String word) {\n    const vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i >= 0; i--) {\n        if (vowels.contains(word[i]) &&!vowels.contains(word[i - 1]) &&!vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return \"Yes\" if (check(s1) || check(s2)) else \"No\";\n}\nbool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == \"(\") {\n            depth++;\n        } else if (s[i] == \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    arr.sort();\n    return arr.sublist(arr.length - k, arr.length);\n}\n",
            "int solution(List<int> lst) {\n    return lst.asMap().entries.where((element) => element.key % 2 == 0 && element.value % 2!= 0).fold(0, (previousValue, element) => previousValue + element.value);\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.take(k).where((n) => n.toString().length <= 2).reduce((a, b) => a + b);\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = [1];\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    collatz.sort();\n    return collatz;\n}\n",
            "bool validDate(String date) {\n    if (date.length!= 10 || date[2]!= \"-\" || date[5]!= \"-\") {\n        return false;\n    }\n    int month = int.parse(date.substring(0, 2));\n    int day = int.parse(date.substring(3, 5));\n    if (month >= 1 && month <= 12) {\n        if (day >= 1 && day <= 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return true;\n            } else if (day <= 30) {\n                return true;\n            }\n        } else if (day >= 1 && day <= 30) {\n            if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return true;\n            }\n        } else if (day >= 1 && day <= 29) {\n            if (month == 2) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && isPrime(length))? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    int sign = arr.where((n) => n < 0).length % 2 == 1? -1 : 1;\n    return sign * arr.fold(0, (p, c) => p + c.abs());\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i > 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j > 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i < n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j < n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = temp.reduce((a, b) => a < b? a : b);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; i++) {\n        result.add(i % 2 == 0? 1 : minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = n.toString().split('').where((d) => int.parse(d) % 2 == 1).map((d) => int.parse(d)).toList();\n    return odds.reduce((x, y) => x * y) if odds.isNotEmpty else 0;\n}\n",
            "bool isNested(String s) {\n    int openCount = 0;\n    int closeCount = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openCount++;\n        } else if (s[i] == ']') {\n            closeCount++;\n        }\n    }\n    return openCount >= 2 && closeCount >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((n) => n.ceil() * n.ceil()).reduce((a, b) => a + b);\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last.contains(RegExp(r'[a-zA-Z]'));\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    int idx = arr.indexWhere((element) => element < arr[element - 1]);\n    return idx == -1? -1 : idx;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var negatives = <int>[];\n    var positives = <int>[];\n    for (var i in lst) {\n        if (i < 0) {\n            negatives.add(i);\n        } else if (i > 0) {\n            positives.add(i);\n        }\n    }\n    var maxNegative = negatives.isEmpty? null : negatives.reduce(max);\n    var minPositive = positives.isEmpty? null : positives.reduce(min);\n    return [maxNegative, minPositive];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        a = double.parse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        a = a.toDouble();\n    } else if (a is double) {\n        // Nothing to do\n    } else {\n        throw ('Type Error');\n    }\n    if (b is String) {\n        b = double.parse(b.replaceAll(',', '.'));\n    } else if (b is int) {\n        b = b.toDouble();\n    } else if (b is double) {\n        // Nothing to do\n    } else {\n        throw ('Type Error');\n    }\n    if (a == b) {\n        return null;\n    } else if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact = fact * i;\n        result = result * fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r'\\s{3,}'), '-').replaceAll(' ', '_');\n}\n",
            "String fileNameCheck(String fileName) {\n    List<String> suf = [\"txt\", \"exe\", \"dll\"];\n    List<String> lst = fileName.split(\".\");\n    if (lst.length!= 2 ||!suf.contains(lst[1]) || lst[0].length == 0 ||!lst[0].startsWith(RegExp(\"[a-zA-Z]\"))) {\n        return \"No\";\n    }\n    int digitCount = 0;\n    for (int i = 0; i < lst[0].length; i++) {\n        if (lst[0][i] == \"0\" || lst[0][i] == \"1\" || lst[0][i] == \"2\" || lst[0][i] == \"3\" || lst[0][i] == \"4\" || lst[0][i] == \"5\" || lst[0][i] == \"6\" || lst[0][i] == \"7\" || lst[0][i] == \"8\" || lst[0][i] == \"9\") {\n            digitCount++;\n        }\n    }\n    if (digitCount > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String wordsInSentence(String sentence) {\n    List<String> words = sentence.split(\" \");\n    return words.where((w) => isPrime(w.length)).join(\" \");\n}\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.toList()..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    return nums.where((n) => n > 10 && n % 2 == 1 && n.toString()[0] in odds).length;\n}\n",
            "int getMaxTriples(int n) {\n    int c0 = 0, c1 = 0, c2 = 0;\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        switch (a % 3) {\n          case 0:\n            c0++;\n            break;\n          case 1:\n            c1++;\n            break;\n          case 2:\n            c2++;\n            break;\n        }\n    }\n    return c0 * c1 * c2 + (c0 * (c0 - 1) * (c0 - 2) + c1 * (c1 - 1) * (c1 - 2) + c2 * (c2 - 1) * (c2 - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    const names = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    ];\n    if (!names.contains(planet1) ||!names.contains(planet2)) {\n        return [];\n    }\n    final l = names.indexOf(planet1);\n    final r = names.indexOf(planet2);\n    if (l > r) {\n        final temp = l;\n        l = r;\n        r = temp;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = lst.where((s) => s.length % 2 == 0).toList();\n    result.sort((a, b) => a.length.compareTo(b.length) == 0? a.compareTo(b) : a.length.compareTo(b.length));\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => n * n).reduce((a, b) => a + b);\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return game.map((e, i) => e - guess[i]).toList();\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    double maxStrength = double.negativeInfinity;\n    String maxExtension = \"\";\n    for (String extension in extensions) {\n        int upperCount = 0;\n        int lowerCount = 0;\n        for (int i = 0; i < extension.length; i++) {\n            if (extension[i].isUpperCase) {\n                upperCount++;\n            } else if (extension[i].isLowerCase) {\n                lowerCount++;\n            }\n        }\n        double strength = upperCount - lowerCount;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            maxExtension = extension;\n        }\n    }\n    return \"$className.$maxExtension\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    String ds = num.abs().toString();\n    int even = ds.characters.where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = [];\n    for (var i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var sides = [a, b, c].sorted();\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}\n",
            "String findMax(List<String> words) {\n    int maxCount = 0;\n    String maxWord = \"\";\n    for (String word in words) {\n        int count = word.toSet().length;\n        if (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n        } else if (count == maxCount) {\n            maxWord = min(maxWord, word);\n        }\n    }\n    return maxWord;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var opCopy = operators.toList();\n    var numCopy = operands.toList();\n    int i = opCopy.length - 1;\n    while (i >= 0) {\n        if (opCopy[i] == \"**\") {\n            numCopy[i] = numCopy[i].pow(numCopy[i + 1]);\n            numCopy.removeAt(i + 1);\n            opCopy.removeAt(i);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < opCopy.length) {\n        if (opCopy[i] == \"*\") {\n            numCopy[i] = numCopy[i] * numCopy[i + 1];\n            numCopy.removeAt(i + 1);\n            opCopy.removeAt(i);\n            i--;\n        } else if (opCopy[i] == \"//\") {\n            numCopy[i] = numCopy[i] ~/ numCopy[i + 1];\n            numCopy.removeAt(i + 1);\n            opCopy.removeAt(i);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < opCopy.length) {\n        if (opCopy[i] == \"+\") {\n            numCopy[i] = numCopy[i] + numCopy[i + 1];\n            numCopy.removeAt(i + 1);\n            opCopy.removeAt(i);\n            i--;\n        } else if (opCopy[i] == \"-\") {\n            numCopy[i] = numCopy[i] - numCopy[i + 1];\n            numCopy.removeAt(i + 1);\n            opCopy.removeAt(i);\n            i--;\n        }\n        i++;\n    }\n    return numCopy[0];\n}\n",
            "String solve(String s) {\n    var result = '';\n    for (int i = 0; i < s.length; i++) {\n        var ch = s[i];\n        if (!ch.isAlphabetic) {\n            result += ch;\n        } else if (ch.isUpperCase) {\n            result += ch.toLowerCase();\n        } else {\n            result += ch.toUpperCase();\n        }\n    }\n    return result;\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    final md5 = md5.convert(txt.codeUnits);\n    return md5.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    return List.generate(upper - lower + 1, (i) => lower + i).where((i) => i % 2 == 0).toList();\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i, a := range numbers {\n        for _, b := range numbers[i+1:] {\n            if math.Abs(a - b) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    for _, ch := range parenString {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return math.Mod(num, 1)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, n := range numbers {\n        mean += n\n    }\n    mean /= float64(len(numbers))\n    deviation := 0.0\n    for _, n := range numbers {\n        deviation += math.Abs(n - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0, len(numbers)*2-1)\n    for i, n := range numbers {\n        result = append(result, n)\n        if i < len(numbers)-1 {\n            result = append(result, delimiter)\n        }\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                maxDepth = int(math.Max(float64(maxDepth), float64(depth)))\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    for _, n := range numbers {\n        nSum += n\n    }\n    nProduct := 1\n    for _, n := range numbers {\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        maxSoFar = int(math.Max(float64(maxSoFar), float64(num)))\n        result[i] = maxSoFar\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i]!= s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s + s[:i]\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a string, b string) string {\n    result := make([]byte, len(a))\n    for i := range a {\n        result[i] = a[i] ^ b[i]\n    }\n    return string(result)\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest) {\n            longest = s\n        }\n    }\n    return &longest\n}\n",
            "func GreatestCommonDivisor(a, b int) int {\n    for b!= 0 {\n        a, b = b, a%b\n    }\n    return a\n}\n",
            "func AllPrefixes(s string) []string {\n    result := make([]string, len(s))\n    for i := range s {\n        result[i] = s[:i+1]\n    }\n    return result\n}\n",
            "func StringSequence(n int) string {\n    result := make([]string, n+1)\n    for i := 0; i <= n; i++ {\n        result[i] = strconv.Itoa(i)\n    }\n    return strings.Join(result, \" \")\n}\n",
            "func CountDistinctCharacters(s string) int {\n    return len(make(map[rune]struct{}, len(s)))\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes := strings.Split(musicString, \" \")\n    result := make([]int, len(notes))\n    for i, note := range notes {\n        result[i] = durations[note]\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s)-len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := make([]string, 0)\n    for _, num := range strings.Split(numbers, \" \") {\n        if _, ok := numDict[num]; ok {\n            numList = append(numList, num)\n        }\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.MaxFloat64\n    closestPair := []float64{}\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{numbers[i-1], numbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.Inf(1)\n    maxNum := math.Inf(-1)\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    }\n    rescaled := make([]float64, len(numbers))\n    for i, num := range numbers {\n        rescaled[i] = (num - minNum) / (maxNum - minNum)\n    }\n    return rescaled\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    var result []int\n    for _, v := range values {\n        if x, ok := v.(int); ok {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n/i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    var res []int\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := make([]rune, 0, len(s))\n    for _, ch := range s {\n        if!unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    result := make([]string, 0)\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    var result []int\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i, v := range xs {\n        res += float64(v) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for {\n        if Poly(xs, x1)*Poly(xs, x2) > 0 {\n            x1 *= 2\n            x2 *= 2\n        } else {\n            break\n        }\n    }\n    for {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid)*Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n        if math.Abs(x1-x2) <= 1e-10 {\n            break\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := make([]int, 0)\n    for i := 0; i < len(l); i += 3 {\n        sortedThird = append(sortedThird, sort.Ints(l[i:i+3])[0])\n    }\n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i] = sortedThird[i/3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    result := make([]int, 0, len(m))\n    for k := range m {\n        result = append(result, k)\n    }\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    var sortedEven []int\n    for i := 0; i < len(l); i += 2 {\n        if i+1 < len(l) && l[i] > l[i+1] {\n            sortedEven = append(sortedEven, l[i+1])\n        } else {\n            sortedEven = append(sortedEven, l[i])\n        }\n    }\n    return sortedEven\n}\n",
            "func EncodeCyclic(s string) string {\n    result := make([]byte, 0, len(s))\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result = append(result, s[i:]...)\n        } else {\n            result = append(result, s[i+2], s[i+1], s[i])\n        }\n    }\n    return string(result)\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = []int{f[1], f[0] + f[1]}\n        if IsPrime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    result := \"\"\n    for x > 0 {\n        result = string(x%10 + '0') + result\n        x /= 10\n    }\n    return result\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a) * float64(h) / 2\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[0] + fib[1] + fib[2]\n        fib = fib[1:]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sort.Float64s(l)\n    if len(l)%2!= 0 {\n        return l[len(l)/2]\n    }\n    return (l[len(l)/2] + l[len(l)/2-1]) / 2\n}\n",
            "func IsPalindrome(txt string) bool {\n    for i := 0; i < len(txt)/2; i++ {\n        if txt[i]!= txt[len(txt)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Modp(n, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte((int(ch) - 97 + 5) % 26 + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte((int(ch) - 97 + 21) % 26 + 97)\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    var result []byte\n    for _, char := range txt {\n        if strings.IndexByte(vowels, byte(char)) == -1 {\n            result = append(result, byte(char))\n        }\n    }\n    return string(result)\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return len(strings.Split(s0, \"\")) == len(strings.Split(s1, \"\"))\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth++\n        } else if b == '>' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := range diff {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(x <= 0 for x := range diff) || all(x >= 0 for x := range diff)\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n    }\n    result := make([]int, 0)\n    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i == 0 {\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return n * (n + 1) / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth++\n        } else if b == ')' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs))\n    for i := 0; i < len(xs); i++ {\n        result[i] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for ; n > 2; n-- {\n        a, b, c = b, c, a+b+c\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for _, c := range s {\n        if strings.Contains(vowels, string(c)) || (c == 'y' && len(s) == 1) {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        return reverse(xStr)\n    }\n    return xStr[len(xStr)-shift:] + xStr[:len(xStr)-shift]\n}\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func DigitSum(s string) int {\n    var sum int\n    for _, c := range s {\n        if 'A' <= c && c <= 'Z' {\n            sum += int(c - 'A' + 1)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    applesIndex := strings.Index(s, \"apples\") - 1\n    orangesIndex := strings.Index(s, \"oranges\") - 1\n    apples, _ := strconv.Atoi(words[applesIndex])\n    oranges, _ := strconv.Atoi(words[orangesIndex])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    var minEven int\n    var minEvenIndex int\n    for i, n := range arr {\n        if n%2 == 0 && (minEven == 0 || n < minEven) {\n            minEven = n\n            minEvenIndex = i\n        }\n    }\n    if minEven == 0 {\n        return []int{}\n    }\n    return []int{minEven, minEvenIndex}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    var goodVals []int\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) == 0 {\n        return -1\n    }\n    max := goodVals[0]\n    for _, v := range goodVals {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sort.Ints(lst)\n    result := make([]int, 0, len(lst))\n    for i := 0; i < len(lst); i += 2 {\n        result = append(result, lst[i])\n        if i+1 < len(lst) {\n            result = append(result, lst[i+1])\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2.0\n        return math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalindrome := true\n    for i := 0; i < len(q)/2; i++ {\n        if q[i]!= q[len(q)-1-i] {\n            isPalindrome = false\n            break\n        }\n    }\n    total := 0\n    for _, v := range q {\n        total += v\n    }\n    return isPalindrome && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i]!= arr[len(arr)-1-i] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    if len(lst1)*len(lst2) == 0 {\n        return nil\n    }\n    if len(lst1) == 0 {\n        return lst2\n    }\n    if len(lst2) == 0 {\n        return lst1\n    }\n    if len(lst1) <= len(lst2) {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if IsPrime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    for tmp := 1; tmp < x; tmp *= n {\n        if tmp == x {\n            return true\n        }\n    }\n    return false\n}\n",
            "func IsCube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    return a == 0 || (a%2 == 1 && IsCube(a-2))\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, c := range num {\n        if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return \"0b\" + binary\n}\n",
            "func IsHappy(s string) bool {\n    seen := make(map[string]bool)\n    for s!= \"1\" &&!seen[s] {\n        seen[s] = true\n        s = strings.Replace(s, \"1\", \"\", -1)\n        s = strings.Replace(s, \"4\", \"1\", -1)\n        s = strings.Replace(s, \"9\", \"1\", -1)\n        s = strings.Replace(s, \"0\", \"\", -1)\n    }\n    return s == \"1\"\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, len(grades))\n    for i, g := range grades {\n        switch {\n        case g >= 4.0:\n            result[i] = \"A+\"\n        case g >= 3.7:\n            result[i] = \"A\"\n        case g >= 3.3:\n            result[i] = \"A-\"\n        case g >= 3.0:\n            result[i] = \"B+\"\n        case g >= 2.7:\n            result[i] = \"B\"\n        case g >= 2.3:\n            result[i] = \"B-\"\n        case g >= 2.0:\n            result[i] = \"C+\"\n        case g >= 1.7:\n            result[i] = \"C\"\n        case g >= 1.3:\n            result[i] = \"C-\"\n        case g >= 1.0:\n            result[i] = \"D+\"\n        case g >= 0.7:\n            result[i] = \"D\"\n        case g >= 0.0:\n            result[i] = \"D-\"\n        default:\n            result[i] = \"E\"\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; float64(i) <= math.Sqrt(float64(length)); i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2*9*(int)(math.Pow10(n-2))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digitsSum += int(d - '0')\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n",
            "func Add(lst []int) int {\n    var sum int\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i, word := range words {\n        words[i] = strings.Join(sort.StringSlice(word), \"\")\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    var result [][]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                result = append(result, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return result[i][0] < result[j][0] || (result[i][0] == result[j][0] && result[i][1] > result[j][1])\n    })\n    return result\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []\n    }\n    if (arr[0] + arr[len(arr)-1])%2 == 0 {\n        sort.Slice(arr, func(i, j int) bool { return arr[i] > arr[j] })\n    } else {\n        sort.Ints(arr)\n    }\n    return arr\n}\n",
            "func Encrypt(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        shifted := int(ch) + 4\n        if shifted > int('z') {\n            shifted -= 26\n        }\n        result[i] = byte(shifted)\n    }\n    return string(result)\n}\n",
            "func NextSmallest(lst []int) *int {\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]!= lst[i-1] {\n            return &lst[i]\n        }\n    }\n    return nil\n}\n",
            "func IsBored(s string) int {\n    sentences := regexp.MustCompile(`[\\.\\!?\\s]+`).Split(s, -1)\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) >= 2 && sentence[:2] == \"I \" {\n            count++\n        }\n    }\n    return count\n}\n",
            "func AnyInt(x, y, z interface{}) bool {\n    if _, ok := x.(int); ok && _, ok := y.(int); ok && _, ok := z.(int); ok {\n        if x.(int)+y.(int) == z.(int) || x.(int)+z.(int) == y.(int) || y.(int)+z.(int) == x.(int) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := make([]rune, 0, len(message))\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            ch1 := unicode.ToUpper(ch)\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = unicode.ToLower(ch1)\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; float64(i) <= math.Sqrt(float64(n)); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := make([]int, 0)\n    for _, n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(sort.IntSlice(primes).Max())\n    sum := 0\n    for _, digit := range largest {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    lower := true\n    upper := true\n    for k := range d {\n        if k == \"\" {\n            return false\n        }\n        if k!= strings.ToLower(k) {\n            lower = false\n        }\n        if k!= strings.ToUpper(k) {\n            upper = false\n        }\n    }\n    return lower || upper\n}\n",
            "func CountUpTo(n int) []int {\n    primes := make([]int, 0)\n    for num := 2; num < n; num++ {\n        isPrime := true\n        for _, prime := range primes {\n            if num%prime == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return int(math.Abs(float64(a % 10))) * int(math.Abs(float64(b % 10)))\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    var count int\n    for i, c := range s {\n        if i%2 == 0 && strings.Contains(vowels, string(c)) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\n",
            "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2*i\n    }\n    return result\n}\n",
            "func WordsString(s string) []string {\n    return regexp.MustCompile(\"[, ]\").Split(s, -1)\n}\n",
            "func ChooseNum(x, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x!= y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2.0 + 0.5)\n    return string(strconv.FormatInt(int64(rAvg), 2))\n}\n",
            "func UniqueDigits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        digits := []byte(strconv.Itoa(num))\n        isOdd := true\n        for _, digit := range digits {\n            if digit%2 == 0 {\n                isOdd = false\n                break\n            }\n        }\n        if isOdd {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var sortedArr []int\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Slice(sortedArr, func(i, j int) bool {\n        return sortedArr[i] > sortedArr[j]\n    })\n    var result []string\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := range nums {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i, v := range nums {\n        if i%2!= 0 {\n            result[i] = v * (v + 1) / 2\n        } else {\n            result[i] = v\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(txt string) bool {\n    for i, j := 0, len(txt)-1; i < j; i, j = i+1, j-1 {\n        if txt[i]!= txt[j] {\n            return false\n        }\n    }\n    return true\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := [2]int{0, 0}\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(strconv.Itoa(i)) {\n            cnt[i%2]++\n        }\n    }\n    return cnt[:]\n}\n",
            "func CountNums(arr []int) int {\n    return len(filter(func(n int) bool {\n        return digitsSum(n) > 0\n    }, arr))\n}\nfunc digitsSum(n int) int {\n    s := 0\n    for _, d := range []byte(strconv.Itoa(n)) {\n        s += int(d - '0')\n    }\n    return s\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr)-i] && arr[:i] == sortedArr[len(arr)-i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    evenCnt := 0\n    for _, num := range lst1 {\n        if num%2!= 0 {\n            oddCnt++\n        }\n    }\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        freq[w]++\n    }\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    result := make(map[string]int)\n    for k, v := range freq {\n        if v == maxFreq {\n            result[k] = v\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := \"\"\n    for _, ch := range s {\n        if string(ch)!= c {\n            s1 += string(ch)\n        }\n    }\n    isPalindrome := true\n    for i := 0; i < len(s1)/2; i++ {\n        if s1[i]!= s1[len(s1)-1-i] {\n            isPalindrome = false\n            break\n        }\n    }\n    return []string{s1, \"yes\" if isPalindrome else \"no\"}\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, len(lst))\n    for i, num := range lst {\n        n := 0\n        for _, d := range num {\n            if int(d)%2 == 1 {\n                n++\n            }\n        }\n        result[i] = \"the number of odd elements in the string \" + strconv.Itoa(i) + \" of the input.\"\n        result[i] = strings.ReplaceAll(result[i], \"i\", strconv.Itoa(n))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum += n\n        if curSum < 0 {\n            curSum = 0\n        }\n        if curSum < minSum {\n            minSum = curSum\n        }\n    }\n    if minSum == 0 {\n        minSum = math.MaxInt32\n        for _, n := range nums {\n            if n < minSum {\n                minSum = n\n            }\n        }\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    var ans int\n    for _, arr := range grid {\n        ans += int(math.Ceil(float64(sum(arr)) / float64(capacity)))\n    }\n    return ans\n}\n",
            "func CountOnes(num int) int {\n    count := 0\n    for num > 0 {\n        if num&1 == 1 {\n            count++\n        }\n        num >>= 1\n    }\n    return count\n}\nfunc SortArray(arr []int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        return CountOnes(arr[i]) < CountOnes(arr[j]) || (CountOnes(arr[i]) == CountOnes(arr[j]) && arr[i] < arr[j])\n    })\n    return arr\n}\n",
            "func SelectWords(s string, n int) []string {\n    words := strings.Split(s, \" \")\n    var result []string\n    for _, word := range words {\n        if len(strings.Split(strings.ToLower(word), \"\")) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i >= 0; i-- {\n        if strings.Contains(vowels, word[i:i+1]) &&!strings.Contains(vowels, word[i-1:i]) &&!strings.Contains(vowels, word[i+1:i+2]) {\n            return word[i : i+1]\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    var stack []string\n    for _, s := range lst {\n        if s == \"(\" {\n            stack = append(stack, s)\n        } else if s == \")\" {\n            if len(stack) == 0 {\n                return \"No\"\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2!= 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AddElements(arr []int, k int) int {\n    var sum int\n    for _, n := range arr[:k] {\n        if len(strconv.Itoa(n)) <= 2 {\n            sum += n\n        }\n    }\n    return sum\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n!= 1 {\n        if n%2!= 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n = n/2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date)!= 10 || date[2]!= \"-\" || date[5]!= \"-\" {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    } else if m == 4 || m == 6 || m == 9 || m == 11 {\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    } else if m == 2 {\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{strconv.Itoa(len([]rune(txt)[0:]))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; float64(i) <= math.Sqrt(float64(n)); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := int(math.Max(float64(interval1[0]), float64(interval2[0])))\n    r := int(math.Min(float64(interval1[1]), float64(interval2[1])))\n    length := r - l\n    if length > 0 && IsPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if contains(arr, 0) {\n        return new(int)\n    }\n    var sign int\n    if count(arr, func(n int) bool { return n < 0 })%2 == 1 {\n        sign = -1\n    } else {\n        sign = 1\n    }\n    return new(int)\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := make([][]int, n)\n    for i := range minVal {\n        minVal[i] = make([]int, n)\n    }\n    for i := range grid {\n        for j := range grid[i] {\n            if grid[i][j] == 1 {\n                var temp []int\n                if i > 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j > 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i < n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j < n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                minVal[i][j] = min(temp)\n            } else {\n                minVal[i][j] = n*n + 1\n            }\n        }\n    }\n    result := make([]int, k)\n    for i := range result {\n        if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i] = minVal[0][0]\n        }\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := make([]int, 0)\n    for _, d := range []byte(strconv.Itoa(n)) {\n        if int(d) % 2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    result := 1\n    for _, o := range odds {\n        result *= o\n    }\n    return result\n}\n",
            "func IsNested(s string) bool {\n    openIdx := make([]int, 0)\n    closeIdx := make([]int, 0)\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx = reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}\nfunc reverse(arr []int) []int {\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n    return arr\n}\n",
            "func SumSquares(lst []float64) int {\n    var sum int\n    for _, n := range lst {\n        sum += int(math.Pow(math.Ceil(n), 2))\n    }\n    return sum\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && unicode.IsLetter(rune(last[0]))\n}\n",
            "func CanArrange(arr []int) int {\n    for i := 1; i < len(arr); i++ {\n        if arr[i-1] > arr[i] {\n            for j := i; j < len(arr); j++ {\n                if arr[j] == arr[i-1] - (j-i) {\n                    return j\n                }\n            }\n            return -1\n        }\n    }\n    return len(arr) - 1\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    var maxNeg, minPos *int\n    for _, i := range lst {\n        if i < 0 && (maxNeg == nil || *maxNeg < i) {\n            maxNeg = &i\n        } else if i > 0 && (minPos == nil || *minPos > i) {\n            minPos = &i\n        }\n    }\n    return []*int{maxNeg, minPos}\n}\n",
            "func AnyToReal(o interface{}) (float64, error) {\n    switch o := o.(type) {\n    case string:\n        return strconv.ParseFloat(strings.Replace(o, \",\", \".\", 1), 64)\n    case int:\n        return float64(o), nil\n    case float64:\n        return o, nil\n    default:\n        return 0, errors.New(\"type error\")\n    }\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1, err := AnyToReal(a)\n    if err!= nil {\n        return nil\n    }\n    b1, err := AnyToReal(b)\n    if err!= nil {\n        return nil\n    }\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return &a1\n    } else {\n        return &b1\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    reg := regexp.MustCompile(`\\s{3,}`)\n    txt = reg.ReplaceAllString(txt, \"-\")\n    txt = strings.ReplaceAll(txt, \" \", \"_\")\n    return txt\n}\n",
            "func FileNameCheck(fileName string) string {\n    suffixes := []string{\"txt\", \"exe\", \"dll\"}\n    parts := strings.Split(fileName, \".\")\n    if len(parts)!= 2 ||!strings.Contains(suffixes, parts[1]) || len(parts[0]) == 0 ||!strings.ContainsAny(parts[0], \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") || strings.Count(parts[0], \"0123456789\") > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            result += v * v\n        } else if i%4 == 0 {\n            result += v * v * v\n        } else {\n            result += v\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; float64(i) <= math.Sqrt(float64(n)); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    result := make([]string, 0, len(words))\n    for _, w := range words {\n        if IsPrime(len(w)) {\n            result = append(result, w)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0]) * strconv.Atoi(ns[0])\n    den, _ := strconv.Atoi(xs[1]) * strconv.Atoi(ns[1])\n    return num%den == 0\n}\n",
            "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        sum := 0\n        for _, d := range nStr {\n            sum += int(d - '0')\n        }\n        return sum\n    } else {\n        firstTwo := nStr[:2]\n        firstTwoInt, _ := strconv.Atoi(firstTwo)\n        return firstTwoInt * 2 + DigitsSum(math.Abs(float64(n)))\n    }\n}\nfunc OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return DigitsSum(nums[i]) < DigitsSum(nums[j])\n    })\n    return nums\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    count := 0\n    for _, n := range nums {\n        if n > 10 && n%2 == 1 && string(n)[0] == odds[0] {\n            count++\n        }\n    }\n    return count\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if!contains(names, planet1) ||!contains(names, planet2) {\n        return []string{}\n    }\n    l := index(names, planet1)\n    r := index(names, planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\nfunc contains(s []string, e string) bool {\n    for _, a := range s {\n        if a == e {\n            return true\n        }\n    }\n    return false\n}\nfunc index(s []string, e string) int {\n    for i, a := range s {\n        if a == e {\n            return i\n        }\n    }\n    return -1\n}\n",
            "func SortedListSum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return len(result[i]) < len(result[j]) || (len(result[i]) == len(result[j]) && result[i] < result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; math.Floor(math.Sqrt(float64(n))) >= float64(i); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    var sum int\n    for _, n := range lst {\n        if n >= 0 && math.Mod(n, 2) == 1 {\n            sum += int(n * n)\n        }\n    }\n    return sum\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i := range game {\n        result[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := float64(-math.MaxFloat64)\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := strings.Count(ext, strings.ToUpper(ext))\n        lower := strings.Count(ext, strings.ToLower(ext))\n        s := float64(upper - lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    n := len(b)\n    for i := 0; i <= len(a)-len(b); i++ {\n        if a[i:i+n] == b || a[i:i+n] == b[n-1:]+b[:n-1] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := strconv.Itoa(int(math.Abs(float64(num))))\n    even := 0\n    for _, d := range ds {\n        if int(d)%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    var result string\n    roman := map[int]string{\n        1000: \"M\",\n        900:  \"CM\",\n        500:  \"D\",\n        400:  \"CD\",\n        100:  \"C\",\n        90:   \"XC\",\n        50:   \"L\",\n        40:   \"XL\",\n        10:   \"X\",\n        9:    \"IX\",\n        5:    \"V\",\n        4:    \"IV\",\n        1:    \"I\",\n    }\n    for value, symbol := range roman {\n        for num >= value {\n            result += symbol\n            num -= value\n        }\n    }\n    return result\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n    return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCount := 0\n    var maxWord string\n    for _, word := range words {\n        count := len(make(map[rune]struct{}, len(word)))\n        for _, r := range word {\n            count += len(make(map[rune]struct{}, len(word)))\n        }\n        if count > maxCount {\n            maxCount = count\n            maxWord = word\n        } else if count == maxCount {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    }\n    return []int{num + remaining, 0}\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    nums := make([]int, len(operands))\n    copy(nums, operands)\n    for i := len(operators) - 1; i >= 0; i-- {\n        if operators[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i+1])))\n            nums = append(nums[:i+1], nums[i+2:]...)\n            operators = append(operators[:i], operators[i+1:]...)\n        }\n    }\n    for i := 0; i < len(operators); i++ {\n        if operators[i] == \"*\" {\n            nums[i] = nums[i] * nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            operators = append(operators[:i], operators[i+1:]...)\n            i--\n        } else if operators[i] == \"//\" {\n            nums[i] = nums[i] / nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            operators = append(operators[:i], operators[i+1:]...)\n            i--\n        }\n    }\n    for i := 0; i < len(operators); i++ {\n        if operators[i] == \"+\" {\n            nums[i] = nums[i] + nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            operators = append(operators[:i], operators[i+1:]...)\n            i--\n        } else if operators[i] == \"-\" {\n            nums[i] = nums[i] - nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            operators = append(operators[:i], operators[i+1:]...)\n            i--\n        }\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    result := make([]rune, 0, len(s))\n    for _, ch := range s {\n        if!unicode.IsLetter(ch) {\n            result = append(result, ch)\n        } else if unicode.IsLower(ch) {\n            result = append(result, unicode.ToUpper(ch))\n        } else {\n            result = append(result, unicode.ToLower(ch))\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    hash := md5.New()\n    hash.Write([]byte(txt))\n    return string(hash.Sum(nil))\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := int(math.Max(2, math.Min(float64(a), float64(b))))\n    upper := int(math.Min(8, math.Max(float64(a), float64(b))))\n    result := make([]int, 0)\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new Stack<Character>();\n        var currentGroup = new StringBuilder();\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup.append(ch);\n                if (stk.empty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "public static double truncateNumber(double num) {\n    return num - Math.floor(num);\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double deviation = 0.0;\n        for (Double number : numbers) {\n            deviation += Math.abs(number - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i!= 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        int nProduct = 1;\n        for (Integer number : numbers) {\n            nSum += number;\n            nProduct *= number;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        var maxSoFar = Integer.MIN_VALUE;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "public static String makePalindrome(String s) {\n    if (s.equals(new StringBuilder(s).reverse().toString())) {\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        String left = s.substring(0, i);\n        String right = s.substring(i);\n        if (left.equals(new StringBuilder(right).reverse().toString())) {\n            return left + right + left.substring(1);\n        }\n    }\n    return \"\";\n}\n",
            "public static String stringXor(String a, String b) {\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < a.length(); i++) {\n        result.append(Integer.toBinaryString(a.charAt(i) ^ b.charAt(i)));\n    }\n    return result.toString();\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestStr = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestStr.length()) {\n                longestStr = s;\n            }\n        }\n        return Optional.of(longestStr);\n    }\n}\n",
            "public static int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        return String.join(\" \", IntStream.range(1, n + 1).mapToObj(String::valueOf).toArray(String[]::new));\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return new HashSet<Character>(s.toLowerCase().toCharArray()).size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<String, Integer>() {{\n            put(\"o\", 4);\n            put(\"o|\", 2);\n            put(\".|\", 1);\n        }};\n        String[] notes = musicString.split(\" \");\n        List<Integer> durationsList = new ArrayList<Integer>();\n        for (String note : notes) {\n            durationsList.add(durations.get(note));\n        }\n        return durationsList;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n        var numList = new ArrayList<String>();\n        for (String num : numbers.split(\" \")) {\n            if (numDict.containsKey(num)) {\n                numList.add(num);\n            }\n        }\n        numList.sort(Comparator.comparingInt(numDict::get));\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        Collections.sort(sortedNumbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(sortedNumbers.get(i - 1));\n                closestPair.add(sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.POSITIVE_INFINITY;\n        double maxNum = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            minNum = Math.min(minNum, num);\n            maxNum = Math.max(maxNum, num);\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<>(Collections.nCopies(numbers.size(), 0.0));\n        } else {\n            var result = new ArrayList<Double>();\n            for (double num : numbers) {\n                result.add((num - minNum) / (maxNum - minNum));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream()\n           .filter(x -> x instanceof Integer)\n           .map(x -> (Integer) x)\n           .collect(Collectors.toList());\n    }\n}\n",
            "public static int strLength(String s) {\n    return s.length();\n}\n",
            "public class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream().filter(num -> counts.get(num) == 1).collect(Collectors.toList());\n    }\n}\n",
            "public static String flipCase(String s) {\n    char[] chars = s.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        char c = chars[i];\n        if (Character.isLetter(c)) {\n            chars[i] = Character.isLowerCase(c)? Character.toUpperCase(c) : Character.toLowerCase(c);\n        }\n    }\n    return new String(chars);\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream().filter(s -> s.startsWith(prefixStr)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(num -> num > 0).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedThird.add(l.get(i));\n        }\n        Collections.sort(sortedThird);\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i // 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return new ArrayList<>(new LinkedHashSet<>(l));\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += Integer.toString(i).chars().filter(c -> c == '7').count();\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEven.get(i / 2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new ArrayList<Character>();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.addAll(Arrays.asList(s.substring(i).toCharArray()));\n            } else {\n                result.add(s.charAt(i));\n                result.add(s.charAt(i + 2));\n                result.add(s.charAt(i + 1));\n            }\n        }\n        return String.valueOf(result);\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        int f[] = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[] {f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "public class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (Integer num : l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(Integer.toString(x % bas));\n            x /= bas;\n        }\n        return String.join(\"\", digits);\n    }\n}\n",
            "public static double triangleArea(int a, int h) {\n    return (double) a * h / 2;\n}\n",
            "public class Global {\n    public static int fib4(int n) {\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2!= 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        int left = 0;\n        int right = txt.length() - 1;\n        while (left < right) {\n            if (txt.charAt(left)!= txt.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n",
            "public static int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        char[] result = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            result[i] = (char) ((ch - 'a' + 5) % 26 + 'a');\n        }\n        return String.valueOf(result);\n    }\n    public static String decodeShift(String s) {\n        char[] result = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            result[i] = (char) ((ch - 'a' + 21) % 26 + 'a');\n        }\n        return String.valueOf(result);\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        return txt.chars().filter(c ->!vowels.contains(String.valueOf((char) c))).mapToObj(c -> String.valueOf((char) c)).reduce(\"\", String::concat);\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}\n",
            "public class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(s0.toCharArray()).equals(new HashSet<Character>(s1.toCharArray()));\n    }\n}\n",
            "public class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth++;\n            } else if (b == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        return new ArrayList<>(new HashSet<>(l1).retainAll(l2));\n    }\n}\n",
            "public static int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static int fibfib(int n) {\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n--;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == vowels.charAt(0) || (i == s.length() - 1 && s.charAt(i) == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "public static String circularShift(int x, int shift) {\n    String xStr = String.valueOf(x);\n    if (shift > xStr.length()) {\n        return new StringBuilder(xStr).reverse().toString();\n    } else {\n        return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        return s.chars().filter(Character::isUpperCase).map(Character::getNumericValue).sum();\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[Arrays.asList(words).indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[Arrays.asList(words).indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = arr.stream().filter(n -> n % 2 == 0).collect(Collectors.toList());\n        if (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        int minEven = evens.stream().min(Integer::compareTo).get();\n        return Arrays.asList(minEven, arr.indexOf(minEven));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = freqs.keySet().stream().filter(k -> freqs.get(k) >= k).collect(Collectors.toList());\n        return goodVals.isEmpty()? -1 : Collections.max(goodVals);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int num : q) {\n            total += num;\n        }\n        return isPalindrome && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i)!= arr.get(arr.size() - 1 - i)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return cnt1 <= cnt2? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "public static boolean isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "public static boolean isCube(int a) {\n    a = Math.abs(a);\n    double root = Math.cbrt(a);\n    return (int) Math.pow(root, 3) == a;\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        return num.chars().filter(c -> c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D').count();\n    }\n}\n",
            "public static String decimalToBinary(int dec) {\n    String binary = Integer.toBinaryString(dec);\n    return \"db\" + binary + \"db\";\n}\n",
            "public class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "public static int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (int) Math.pow(10, n - 2);\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        for (char c : String.valueOf(n).toCharArray()) {\n            digitsSum += Integer.parseInt(String.valueOf(c));\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        return lst.stream().filter(i -> i % 2 == 1 && i % 2 == 0).reduce(0, Integer::sum);\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        List<String> sortedWords = new ArrayList<String>();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sortedWords.add(new String(chars));\n        }\n        return String.join(\" \", sortedWords);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        coords.sort((a, b) -> {\n            int cmp = Integer.compare(a.get(0), b.get(0));\n            if (cmp == 0) {\n                cmp = Integer.compare(b.get(1), a.get(1));\n            }\n            return cmp;\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(arr, Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = (int) ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new TreeSet<Integer>(lst);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.higher(sl.first()));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            if ((a + b == c) || (a + c == b) || (b + c == a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        var result = new ArrayList<Character>();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char ch1 = Character.toUpperCase(ch);\n                if (ch1.toString().equals(ch.toString().toLowerCase())) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                if (vowels.contains(ch1.toString())) {\n                    result.add(ch1);\n                } else {\n                    result.add(ch);\n                }\n            } else {\n                result.add(ch);\n            }\n        }\n        return String.valueOf(result);\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (Integer n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        var largest = String.valueOf(Collections.max(primes));\n        return IntStream.range(0, largest.length())\n               .mapToLong(i -> Long.parseLong(largest.substring(i, i + 1)))\n               .sum();\n    }\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        return d.keySet().stream().allMatch(c -> c.toLowerCase().equals(c)) || d.keySet().stream().allMatch(c -> c.toUpperCase().equals(c));\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "public class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        return (int) s.chars().filter(i -> i % 2 == 0 && vowels.contains(Character.toString((char) i))).count();\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        BigDecimal num = new BigDecimal(value);\n        if (num.compareTo(BigDecimal.ZERO) >= 0) {\n            return num.add(BigDecimal.ONE).intValue();\n        } else {\n            return num.subtract(BigDecimal.ONE).intValue();\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        var words = new ArrayList<String>();\n        var pattern = Pattern.compile(\"[, ]\");\n        var matcher = pattern.matcher(s);\n        while (matcher.find()) {\n            var word = s.substring(matcher.start(), matcher.end());\n            if (!word.isEmpty()) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}\n",
            "public class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if (x!= y) else -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (m + n) / 2 + (m + n) % 2;\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream()\n               .filter(num -> {\n                    String s = num.toString();\n                    for (char c : s.toCharArray()) {\n                        if (Character.getNumericValue(c) % 2!= 0) {\n                            return true;\n                        }\n                    }\n                    return false;\n                })\n               .sorted()\n               .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        List<Integer> filtered = arr.stream().filter(x -> x >= 1 && x <= 9).collect(Collectors.toList());\n        List<String> result = new ArrayList<>();\n        Map<Integer, String> digitNames = new HashMap<>();\n        digitNames.put(1, \"One\");\n        digitNames.put(2, \"Two\");\n        digitNames.put(3, \"Three\");\n        digitNames.put(4, \"Four\");\n        digitNames.put(5, \"Five\");\n        digitNames.put(6, \"Six\");\n        digitNames.put(7, \"Seven\");\n        digitNames.put(8, \"Eight\");\n        digitNames.put(9, \"Nine\");\n        for (Integer x : filtered) {\n            result.add(digitNames.get(x));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = IntStream.rangeClosed(1, n).boxed().toList();\n        return nums.stream().map(i -> i % 2!= 0? nums.subList(0, i).stream().reduce(0, Integer::sum) : nums.subList(0, i).stream().reduce(1, (x, y) -> x * y)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new int[] {0, 0};\n        for (int i = 1; i <= n; i++) {\n            String s = Integer.toString(i);\n            if (isPalindrome(s)) {\n                cnt[i % 2] += 1;\n            }\n        }\n        return cnt;\n    }\n    public static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left++)!= s.charAt(right--)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return IntStream.range(0, nStr.length())\n                   .map(i -> Integer.parseInt(nStr.substring(i, i + 1)))\n                   .sum();\n        } else {\n            int firstTwo = Integer.parseInt(nStr.substring(0, 2));\n            return firstTwo * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream()\n               .filter(n -> digitsSum(n) > 0)\n               .count();\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        var sortedArr = new ArrayList<Integer>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, sortedArr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = (int) lst1.stream().filter(num -> num % 2!= 0).count();\n        int evenCnt = (int) lst2.stream().filter(num -> num % 2 == 0).count();\n        return evenCnt >= oddCnt? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = Arrays.asList(test.split(\" \")).stream().filter(w ->!w.isEmpty()).collect(Collectors.toList());\n        for (String w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (!freq.isEmpty()) {\n            var maxFreq = Collections.max(freq.values());\n            for (var entry : freq.entrySet()) {\n                if (entry.getValue().equals(maxFreq)) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        String s1 = s.chars().filter(ch ->!c.contains((char)ch)).mapToObj(ch -> (char)ch).collect(Collectors.joining());\n        return Arrays.asList(s1, \"yes\" + (s1.equals(new StringBuilder(s1).reverse().toString())? \"\" : \"no\"));\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            int n = (int) num.chars().filter(d -> (d % 2) == 1).count();\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Integer.MAX_VALUE;\n            for (int n : nums) {\n                minSum = Math.min(minSum, n);\n            }\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream().map(arr -> (int) Math.ceil(arr.stream().mapToInt(Integer::intValue).sum() / (double) capacity)).reduce(0, Integer::sum);\n    }\n}\n",
            "class Global {\n    public static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n    public static List<Integer> sortArray(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = countOnes(a);\n            int countB = countOnes(b);\n            return countA == countB? a - b : countA - countB;\n        });\n        return arr;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        List<String> words = Arrays.asList(s.split(\" \"));\n        return words.stream().filter(w -> w.length() > 0).filter(w -> w.chars().filter(c -> Character.isLowerCase(c) && consonants.contains(String.valueOf((char) c))).count() == n).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i >= 0; i--) {\n            if (word.charAt(i) + \"\" in vowels && word.charAt(i - 1) + \"\" not in vowels && word.charAt(i + 1) + \"\" not in vowels) {\n                return word.charAt(i) + \"\";\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return \"Yes\" + (check(s1) || check(s2)? \"\" : \"No\");\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        return arr.stream().sorted().limit(k).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        return lst.stream().filter(i -> i % 2 == 0 && i % 2!= 0).reduce(0, Integer::sum);\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return arr.stream().limit(k).filter(n -> Integer.toString(n).length() <= 2).mapToInt(Integer::intValue).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        while (n!= 1) {\n            if (n % 2!= 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length()!= 10 || date.charAt(2)!= '-' || date.charAt(5)!= '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (d >= 1 && d <= 31) {\n                return true;\n            }\n        } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d >= 1 && d <= 30) {\n                return true;\n            }\n        } else if (m == 2) {\n            if (d >= 1 && d <= 29) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return List.of(String.valueOf(txt.chars().filter(c -> Character.isLowerCase(c) && c % 2 == 0).count()));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return \"YES\" + (length > 0 && isPrime(length)? \"\" : \"NO\");\n    }\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = -1 * (Collections.frequency(arr, -1) % 2) + 1;\n        return Optional.of(sign * arr.stream().mapToInt(Math::abs).sum());\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<Integer>();\n                    if (i!= 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j!= 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i!= n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j!= n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(minVal, temp.stream().min(Comparator.naturalOrder()).get());\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        var seq = new ArrayList<Integer>();\n        if (n == 0) {\n            seq.add(1);\n            return seq;\n        }\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (char c : String.valueOf(n).toCharArray()) {\n            if (Character.getNumericValue(c) % 2 == 1) {\n                odds.add(Integer.parseInt(String.valueOf(c)));\n            }\n        }\n        int result = 1;\n        for (int i : odds) {\n            result *= i;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n        closeIdx.reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream().mapToInt(n -> (int) Math.pow(Math.ceil(n), 2)).sum();\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(\" \") + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        int[] idx = new int[arr.size() - 1];\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx[i - 1] = i;\n            }\n        }\n        int max = -1;\n        for (int i : idx) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else if (i > 0) {\n                pos.add(i);\n            }\n        }\n        Optional<Integer> maxNeg = neg.size() > 0? Optional.of(Collections.max(neg)) : Optional.empty();\n        Optional<Integer> minPos = pos.size() > 0? Optional.of(Collections.min(pos)) : Optional.empty();\n        return List.of(maxNeg, minPos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        try {\n            double a1 = Double.parseDouble(a.toString().replace(\",\", \".\"));\n            double b1 = Double.parseDouble(b.toString().replace(\",\", \".\"));\n            if (a1 == b1) {\n                return Optional.empty();\n            } else if (a1 > b1) {\n                return Optional.of(a1);\n            } else {\n                return Optional.of(b1);\n            }\n        } catch (NumberFormatException e) {\n            return Optional.empty();\n        }\n    }\n}\n",
            "public class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length!= 2 ||!Arrays.asList(suf).contains(lst[1]) || lst[0].length() == 0 ||!Character.isLetter(lst[0].charAt(0)) || fileName.matches(\".*\\\\d.*\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += (int) Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += (int) Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        return String.join(\" \", Arrays.stream(words).filter(w -> isPrime(w.length())).toArray(String[]::new));\n    }\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream()\n               .sorted((n1, n2) -> {\n                    int sum1 = digitsSum(n1);\n                    int sum2 = digitsSum(n2);\n                    return Integer.compare(sum1, sum2);\n                })\n               .collect(Collectors.toList());\n    }\n    private static int digitsSum(int n) {\n        String s = String.valueOf(n);\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        return nums.stream()\n               .filter(n -> n > 10 && n % 2 == 1 && Character.toString(n.toString().charAt(0)).equals(odds))\n               .collect(Collectors.toList())\n               .size();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        int ans = 0;\n        for (int i = 0; i < 3; i++) {\n            ans += c[i] * (c[i] - 1) * (c[i] - 2) / 6;\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) ||!names.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            l = r;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; Math.sqrt(n) >= i; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream()\n               .filter(n -> n >= 0 && n % 2 == 1)\n               .mapToInt(n -> (int) Math.pow(n, 2))\n               .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        return IntStream.range(0, game.size())\n               .mapToObj(i -> Math.abs(game.get(i) - guess.get(i)))\n               .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxS = Integer.MIN_VALUE;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = (int) ext.chars().filter(Character::isUpperCase).count();\n            int lower = (int) ext.chars().filter(Character::isLowerCase).count();\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            String left = b.substring(i) + b.substring(0, i);\n            if (a.contains(left)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = String.valueOf(Math.abs(num));\n        int even = (int) ds.chars().filter(c -> c % 2 == 0).count();\n        return List.of(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        String[] values = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] numerals = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= numerals[i]) {\n                res.append(values[i]);\n                num -= numerals[i];\n            }\n        }\n        return res.toString();\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] sides = new int[] {a, b, c};\n        Arrays.sort(sides);\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<Character>(w.toCharArray()).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "public static List<Integer> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return Arrays.asList(num + need, remaining - need);\n    } else {\n        return Arrays.asList(num + remaining, 0);\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var opStack = new Stack<String>();\n        var numStack = new Stack<Integer>();\n        for (int i = 0; i < operators.size(); i++) {\n            String op = operators.get(i);\n            if (op.equals(\"+\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push(a + b);\n            } else if (op.equals(\"-\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push(a - b);\n            } else if (op.equals(\"*\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push(a * b);\n            } else if (op.equals(\"/\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push(a / b);\n            } else if (op.equals(\"%\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push(a % b);\n            } else if (op.equals(\"**\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push((int) Math.pow(a, b));\n            } else if (op.equals(\"//\")) {\n                int b = numStack.pop();\n                int a = numStack.pop();\n                numStack.push(a / b);\n            } else {\n                numStack.push(Integer.parseInt(op));\n            }\n        }\n        return numStack.pop();\n    }\n}\n",
            "public class Global {\n    public static String solve(String s) {\n        char[] result = new char[s.length()];\n        int index = 0;\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result[index++] = ch;\n            } else if (Character.isUpperCase(ch)) {\n                result[index++] = Character.toLowerCase(ch);\n            } else {\n                result[index++] = Character.toUpperCase(ch);\n            }\n        }\n        return new String(result);\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(txt.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte aMessageDigest : messageDigest) {\n                String h = Integer.toHexString(0xFF & aMessageDigest);\n                while (h.length() < 2) {\n                    h = \"0\" + h;\n                }\n                hexString.append(h);\n            }\n            return Optional.of(hexString.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return Optional.empty();\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        return IntStream.rangeClosed(lower, upper)\n               .filter(i -> i % 2 == 0)\n               .boxed()\n               .collect(Collectors.toList());\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    let stk = [];\n    let currentGroup = \"\";\n    for (const ch of parenString) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    const deviation = numbers.reduce((acc, x) => {\n        const diff = x - mean;\n        return acc + diff * diff;\n    }, 0);\n    return Math.sqrt(deviation / numbers.length);\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i!== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n};\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((a, b) => a + b, 0);\n    const nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    const result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s) => {\n    let left = 0;\n    let right = s.length - 1;\n    while (left < right) {\n        if (s[left]!== s[right]) {\n            return \"\";\n        }\n        left++;\n        right--;\n    }\n    return s + s.slice(left);\n}\n",
            "export const stringXor = (a, b) => {\n    return a.split(\"\").map((char, index) => {\n        return char ^ b.charAt(index);\n    }).join(\"\");\n}\n",
            "export const longest = (strs) => {\n    if (!strs.length) return null;\n    let longestStr = strs[0];\n    for (const str of strs) {\n        if (str.length > longestStr.length) longestStr = str;\n    }\n    return longestStr;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\nconst notes = musicString.split(\" \");\nreturn notes.map(note => durations[note]);\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = numbers.split(\" \").filter((x) => x in numDict).sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n};\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s) => s.length;\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = Math.floor(n / divisor);\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const set = new Set(numbers);\n    return [...set];\n}\n",
            "export const flipCase = (s) => {\n    return s.split('').map(ch => {\n        if (ch.toLowerCase()!== ch.toUpperCase()) {\n            return ch.toLowerCase() === ch? ch.toUpperCase() : ch.toLowerCase();\n        }\n        return ch;\n    }).join('');\n}\n",
            "export const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let x1 = 1;\n    let x2 = -1;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = l.filter((e, i) => i % 3 === 0).sort();\n    return l.map((e, i) => (i % 3 === 0? sortedThird[Math.floor(i / 3)] : e));\n};\n",
            "export const listUnique = (l) => Array.from(new Set(l)).sort((a, b) => a - b);\n",
            "export const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += i.toString().split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.filter((e, i) => i % 2 === 0).sort();\n    return l.map((e, i) => (i % 2 === 0? sortedEven[i / 2] : e));\n};\n",
            "export const encodeCyclic = (s) => {\n    let result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n ** 2;\n}\n",
            "export const incrList = (l) => l.map(i => i + 1);\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    let result = \"\";\n    let n = x;\n    while (n > 0) {\n        result = String(n % bas) + result;\n        n = Math.floor(n / bas);\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "const fib = [0, 0, 2, 0];\nfor (let i = 4; i <= n; i++) {\n    fib[i % 4] = fib[0] + fib[1] + fib[2];\n}\nreturn fib[n % 4];\n",
            "export const median = (l) => {\n    const sortedL = l.slice().sort((a, b) => a - b);\n    if (l.length % 2!== 0) {\n        return sortedL[Math.floor(l.length / 2)];\n    } else {\n        const mid = Math.floor(l.length / 2);\n        return (sortedL[mid] + sortedL[mid - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt) => {\n    const reversed = txt.split(\"\").reverse().join(\"\");\n    return txt === reversed;\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    return s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 5) % 26 + 97)).join(\"\");\n}\nexport const decodeShift = (s) => {\n    return s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 21) % 26 + 97)).join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.split(\"\").filter((char) =>!vowels.includes(char)).join(\"\");\n}\n",
            "export const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "const memo = [0, 1];\nexport const fib = (n) => {\n    if (memo[n]!== undefined) {\n        return memo[n];\n    }\n    const result = fib(n - 1) + fib(n - 2);\n    memo[n] = result;\n    return result;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth++;\n        } else if (b === \">\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    return l1.filter(x => l2.includes(x));\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "const vowels = \"aeiou\";\nlet cnt = 0;\nfor (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n        cnt++;\n    }\n}\nreturn cnt;\n",
            "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    return s.split(\"\").reduce((sum, c) => {\n        const code = c.charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n            return sum + code - 64;\n        }\n        return sum;\n    }, 0);\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const applesIndex = words.indexOf('apples');\n    const orangesIndex = words.indexOf('oranges');\n    const apples = parseInt(words[applesIndex - 1]);\n    const oranges = parseInt(words[orangesIndex - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = Object.keys(freqs).filter(k => freqs[k] >= k);\n    return goodVals.length? Math.max(...goodVals) : -1;\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = [...lst].sort((a, b) => a - b);\n    const result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    const isPalindrome = q.every((char, index) => char === q[q.length - 1 - index]);\n    const total = q.reduce((acc, cur) => acc + cur, 0);\n    return isPalindrome && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!== arr[arr.length - 1 - i]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    const cnt2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1 > i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; a > i; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    const absA = Math.abs(a);\n    const cubeRoot = Math.cbrt(absA);\n    return Math.pow(cubeRoot, 3) === absA;\n}\n",
            "export const hexKey = (num) => {\n    return num.split(\"\").filter(x => [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].includes(x)).length;\n}\n",
            "export const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `0b${binary}`;\n}\n",
            "export const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(length)) >= i; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * 10 ** (n - 2);\n}\n",
            "export const solve = (n) => {\n    const digitsSum = [...n.toString()].reduce((acc, cur) => acc + parseInt(cur), 0);\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst) => {\n    return lst.reduce((acc, cur, i) => {\n        if (i % 2 === 1 && cur % 2 === 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \");\n    const sortedWords = words.map(word => word.split(\"\").sort().join(\"\"));\n    return sortedWords.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] === b[0]? b[1] - a[1] : a[0] - b[0]);\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s.charCodeAt(i);\n        const shifted = ch + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            result.push(String.fromCharCode(shifted - 26));\n        } else {\n            result.push(String.fromCharCode(shifted));\n        }\n    }\n    return result.join('');\n}\n",
            "export const nextSmallest = (lst) => {\n    const sortedList = [...new Set(lst)].sort((a, b) => a - b);\n    return sortedList.length < 2? null : sortedList[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.reduce((acc, sentence) => {\n        if (sentence.length >= 2) {\n            return acc + (sentence.slice(0, 2) === \"I \");\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const anyInt = (x, y, z) => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "const vowels = \"aeiouAEIOU\";\nconst result = [];\nfor (const ch of message) {\n    if (ch.isAlpha()) {\n        const ch1 = ch.toUpper() if ch.isLower() else ch.toLower();\n        if (ch1 in vowels) {\n            ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n        }\n        result.push(ch1);\n    } else {\n        result.push(ch);\n    }\n}\nreturn result.join(\"\");\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = primes.reduce((a, b) => a > b? a : b, 0);\n    return largest.toString().split('').reduce((a, b) => a + parseInt(b), 0);\n}\n",
            "export const checkDictCase = (d) => {\n    if (!d) {\n        return false;\n    }\n    const lowerKeys = [...d.keys()].every((k) => k.toLowerCase() === k);\n    const upperKeys = [...d.keys()].every((k) => k.toUpperCase() === k);\n    return lowerKeys || upperKeys;\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        let isPrime = true;\n        for (const prime of primes) {\n            if (num % prime === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    const sign = (a < 0) ^ (b < 0)? -1 : 1;\n    a = Math.abs(a);\n    b = Math.abs(b);\n    let result = 0;\n    while (a > 0) {\n        if (a % 2 === 1) {\n            result += b;\n        }\n        a >>= 1;\n        b <<= 1;\n    }\n    return sign * result;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.round(num) - 1;\n    }\n}\n",
            "export const makeAPile = (n) => {\n    return Array.from({length: n}, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s) => s.split(/[, ]/).filter(Boolean);\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    const rAvg = Math.round((m + n) / 2);\n    return rAvg.toString(2);\n}\n",
            "export const allDigitsOdd = (s) => {\n    return s.split(\"\").every(digit => Number(digit) % 2!== 0);\n}\nexport const uniqueDigits = (x) => {\n    return x.filter(num => allDigitsOdd(num.toString())).sort((a, b) => a - b);\n}\n",
            "const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\nconst sortedArr = arr.filter(x => 1 <= x <= 9).sort((a, b) => b - a);\nreturn sortedArr.map(x => digitNames[x - 1]);\n",
            "export const f = (n) => {\n    const nums = Array.from({length: n}, (_, i) => i + 1);\n    return nums.map(i => (i % 2!== 0)? nums.slice(0, i).reduce((a, b) => a + b, 0) : nums.slice(0, i).reduce((a, b) => a * b, 1));\n}\n",
            "export const isPalindrome = (txt) => txt === txt.split(\"\").reverse().join(\"\");\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        const firstTwo = parseInt(nStr.slice(0, 2));\n        return firstTwo * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).every((val, index) => val === sortedArr[index]) && arr.slice(0, i).every((val, index) => val === sortedArr[arr.length - 1 - index])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const oddCount = lst1.filter(num => num % 2!== 0).length;\n    const evenCount = lst2.filter(num => num % 2 === 0).length;\n    return evenCount >= oddCount? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        freq[w] = (freq[w] || 0) + 1;\n    }\n    const result = {};\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const [k, v] of Object.entries(freq)) {\n            if (v === maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s, c) => {\n    const s1 = s.split(\"\").filter((ch) =>!c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1)? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        let n = 0;\n        for (const d of num) {\n            if (d % 2 === 1) {\n                n++;\n            }\n        }\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    return grid.reduce((total, row) => {\n        return total + Math.ceil(row.reduce((total, item) => total + item, 0) / capacity);\n    }, 0);\n}\n",
            "export const countOnes = (num) => {\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 === 1) {\n            count++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return count;\n}\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const aOnes = countOnes(a);\n        const bOnes = countOnes(b);\n        if (aOnes === bOnes) {\n            return a - b;\n        }\n        return bOnes - aOnes;\n    });\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => c.toLowerCase() === consonants).length === n);\n};\n",
            "const vowels = \"aeiouAEIOU\";\nconst getClosestVowel = (word) => {\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (vowels.includes(word[i]) &&!vowels.includes(word[i - 1]) &&!vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n};\n",
            "export const check = (s) => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" + (check(s1) || check(s2)? \"\" : \"No\");\n}\n",
            "export const maximum = (arr, k) => {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n",
            "export const solution = (lst) => {\n    return lst.reduce((acc, cur, idx) => {\n        if (idx % 2 === 0 && cur % 2!== 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const addElements = (arr, k) => {\n    return arr.slice(0, k).reduce((acc, cur) => {\n        if (cur.toString().length <= 2) {\n            return acc + cur;\n        } else {\n            return acc;\n        }\n    }, 0);\n}\n",
            "const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n!== 1) {\n        if (n % 2!== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n};\n",
            "export const validDate = (date) => {\n    const [year, month, day] = date.split(\"-\");\n    if (!year ||!month ||!day) {\n        return false;\n    }\n    const monthInt = parseInt(month);\n    const dayInt = parseInt(day);\n    if (monthInt < 1 || monthInt > 12) {\n        return false;\n    }\n    if (dayInt < 1 || dayInt > 31) {\n        return false;\n    }\n    const isLeapYear = (yearInt) => {\n        if (yearInt % 400 === 0) {\n            return true;\n        }\n        if (yearInt % 100 === 0) {\n            return false;\n        }\n        return yearInt % 4 === 0;\n    };\n    const daysInMonths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (monthInt === 2 &&!isLeapYear(year)) {\n        return dayInt <= 28;\n    }\n    return dayInt <= daysInMonths[monthInt - 1];\n};\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length - txt.replace(/[^a-z]/gi, \"\").length];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length)? \"YES\" : \"NO\";\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) return null;\n    const sign = arr.filter(n => n < 0).length % 2? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i > 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j > 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i < n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j < n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0? 1 : minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = n.toString().split(\"\").filter(d => parseInt(d) % 2 === 1);\n    return odds.length > 0? odds.reduce((x, y) => x * y, 1) : 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    return lst.reduce((total, num) => total + Math.pow(Math.ceil(num), 2), 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last.toLowerCase()!== \" \";\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.slice(1).map((v, i) => i).filter(i => arr[i] < arr[i - 1]);\n    return idx.length > 0? Math.max(...idx) : -1;\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0? Math.max(...neg) : null;\n    const minPos = pos.length > 0? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o) => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return parseFloat(o);\n    } else if (typeof o === \"number\") {\n        return o;\n    }\n    throw new Error(\"Type Error\");\n};\nexport const compareOne = (a, b) => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return replace(txt, /\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n",
            "const suf = [\"txt\", \"exe\", \"dll\"];\nconst lst = fileName.split(\".\");\nif (lst.length!== 2 ||!suf.includes(lst[1]) || lst[0].length === 0 ||!lst[0][0].match(/[a-zA-Z]/)) {\n    return \"No\";\n}\nconst num = lst[0].match(/\\d/g);\nif (num!== null && num.length > 3) {\n    return \"No\";\n}\nreturn \"Yes\";\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n};\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        const firstTwo = parseInt(nStr.slice(0, 2));\n        return firstTwo * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(b) - digitsSum(a));\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && n.toString().charAt(0) in odds).length;\n}\n",
            "export const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nexport const bf = (planet1, planet2) => {\n    if (!names.includes(planet1) ||!names.includes(planet2)) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n};\n",
            "export const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0).sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    return result;\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    return lst.reduce((acc, cur) => {\n        if (cur >= 0 && cur % 2 === 1) {\n            return acc + cur * cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((num, i) => Math.abs(num - guess[i]));\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter(c => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter(c => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        const left = b.slice(i);\n        const right = b.slice(0, i);\n        if (left + right in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = num.toString().split(\"\");\n    const even = ds.filter((d) => d % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\nconst numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\nfunction intToMiniRoman(num) {\n  let res = \"\";\n  for (let i = 0; i < values.length; i++) {\n    while (num >= values[i]) {\n      res += numerals[i];\n      num -= values[i];\n    }\n  }\n  return res;\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const sides = [a, b, c].sort((a, b) => a - b);\n    const [s1, s2, s3] = sides;\n    return s1 * s1 + s2 * s2 === s3 * s3;\n}\n",
            "export const findMax = (words) => {\n    let maxCount = 0;\n    let maxWord = \"\";\n    for (const word of words) {\n        const count = new Set(word).size;\n        if (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n        } else if (count === maxCount) {\n            maxWord = Math.min(maxWord, word);\n        }\n    }\n    return maxWord;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    const nums = operands.slice();\n    const ops = operators.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    const result = [];\n    for (const ch of s) {\n        if (ch.match(/[a-z]/i)) {\n            result.push(ch.toUpperCase() === ch? ch.toLowerCase() : ch.toUpperCase());\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    const txtBytes = Buffer.from(txt);\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest(\"hex\");\n    return md5Encoded;\n};\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [...Array(upper - lower + 1)].map((_, i) => lower + i).filter(i => i % 2 === 0);\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (numbers[i] - numbers[j] < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stack = mutableListOf<Char>()\n    var currentGroup = \"\"\n    for (ch in parenString) {\n        if (ch == '(') {\n            stack.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stack.removeAt(stack.lastIndex)\n            currentGroup += ch\n            if (stack.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - num.toInt()\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    val deviation = numbers.map { it - mean }.map { if (it < 0) -it else it }.sum()\n    return deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until numbers.size) {\n        if (i!= 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split()\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == \"(\") {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth--\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.reduce { acc, i -> acc * i }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MIN_VALUE\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = maxOf(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in s.indices) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    return a.zip(b).map { (x, y) -> if (x == y) \"0\" else \"1\" }.joinToString(\"\")\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) return null\n    var longest = strs[0]\n    for (s in strs) {\n        if (s.length > longest.length) longest = s\n    }\n    return longest\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var (x, y) = if (a > b) Pair(a, b) else Pair(b, a)\n    while (y > 0) {\n        val z = x % y\n        x = y\n        y = z\n    }\n    return x\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return (1..n).joinToString(\" \")\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    return s.lowercase().toSet().size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split()\n    return notes.map { durations[it]?: 0 }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in s.indices) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = numbers.split(\" \").filter { it in numDict }\n    return numList.sortedBy { numDict[it] }.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.POSITIVE_INFINITY\n    var closestPair = listOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.minOrNull()?: 0.0\n    val maxNum = numbers.maxOrNull()?: 1.0\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    } else {\n        return numbers.map { (it - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filterIsInstance<Int>()\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val set = numbers.toSet()\n    return numbers.filter { it in set }\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = s.map {\n        if (it.isLetter()) {\n            if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase()\n        } else {\n            it\n        }\n    }\n    return flipped.joinToString(\"\")\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * Math.pow(x, i.toDouble())\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sorted().dropLast(l.size % 3).takeLast(l.size % 3)\n    return l.mapIndexed { index, _ -> if (index % 3 == 0) sortedThird[index // 3] else l[index] }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    return l.sorted().distinct()\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    if (l.isEmpty()) {\n        return 0\n    }\n    return l.maxOrNull()?: 0\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 1..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count { it == '7' }\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    return l.mapIndexed { index, _ -> if (index % 2 == 0) sortedEven[index / 2] else l[index] }\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = StringBuilder()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i until s.length))\n        } else {\n            result.append(s.substring(i + 1, i + 3))\n            result.append(s[i])\n        }\n    }\n    return result.toString()\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    var f = intArrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = intArrayOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) {\n            cnt++\n        }\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    val digits = ArrayList<String>()\n    var n = x\n    while (n > 0) {\n        digits.add(n % bas.toString().length().toString().toInt())\n        n /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble() * h.toDouble() / 2.0\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = IntArray(4) { 0 }\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 2\n    for (i in 3 until n + 1) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sortedList = l.sorted()\n    val middleIndex = sortedList.size / 2\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[middleIndex] + sortedList[middleIndex - 1]) / 2.0\n    } else {\n        sortedList[middleIndex].toDouble()\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    repeat(n) {\n        ret = (ret shl 1) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = CharArray(s.length)\n    for (i in s.indices) {\n        val char = s[i]\n        val charCode = char.toInt()\n        val newCharCode = (charCode - 97 + 5) % 26 + 97\n        result[i] = newCharCode.toChar()\n    }\n    return String(result)\n}\nfun decodeShift(s: String): String {\n    val result = CharArray(s.length)\n    for (i in s.indices) {\n        val char = s[i]\n        val charCode = char.toInt()\n        val newCharCode = (charCode - 97 + 21) % 26 + 97\n        result[i] = newCharCode.toChar()\n    }\n    return String(result)\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return txt.filter {!vowels.contains(it) }\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) return n\n    return fib(n - 1) + fib(n - 2)\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"<\") {\n            depth++\n        } else if (b == \">\") {\n            depth--\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.windowed(2).map { it.last() - it.first() }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return l1.filter { it in l2 }\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return (1..n).sum()\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"(\") {\n            depth++\n        } else if (b == \")\") {\n            depth--\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) return 0\n    var a = 0\n    var b = 0\n    var c = 1\n    repeat(n - 2) {\n        val tmp = a\n        a = b\n        b = c\n        c = tmp + a + b\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in s.indices) {\n        if (s[i].lowercaseChar() in vowels || (i == s.lastIndex && s[i].lowercaseChar() == 'y')) {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reversed()\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumOf { it.toInt() }\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val applesIndex = words.indexOf(\"apples\") - 1\n    val orangesIndex = words.indexOf(\"oranges\") - 1\n    val apples = words[applesIndex].toInt()\n    val oranges = words[orangesIndex].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.minOrNull()?: return emptyList()\n    val index = arr.indexOf(minEven)\n    return listOf(minEven, index)\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = lst.groupingBy { it }.eachCount()\n    val goodVals = freqs.filter { it.value >= it.key }.map { it.key }\n    return goodVals.maxOrNull()?: -1\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    val sides = doubleArrayOf(a.toDouble(), b.toDouble(), c.toDouble())\n    val sortedSides = sides.sortedArray()\n    val semiPerimeter = (sortedSides[0] + sortedSides[1]) / 2\n    return sqrt(semiPerimeter * (semiPerimeter - sortedSides[0]) * (semiPerimeter - sortedSides[1]) * (semiPerimeter - sortedSides[2]))\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    val isPalindrome = q.indices.all { i -> q[i] == q.lastIndex - i }\n    val total = q.sum()\n    return isPalindrome && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in arr.indices step 2) {\n        if (arr[i]!= arr[arr.lastIndex - i]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumOf { it.length }\n    val cnt2 = lst2.sumOf { it.length }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2..a) {\n        if (isPrime(i)) {\n            while a % i == 0) {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) return x == n\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val root = a.toDouble().pow(1.0 / 3.0).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    return num.count { it in \"2357BD\" }\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = Integer.toBinaryString(dec)\n    return \"0b$binary\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) return false\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        when {\n            g == 4.0 -> result.add(\"A+\")\n            g > 3.7 -> result.add(\"A\")\n            g > 3.3 -> result.add(\"A-\")\n            g > 3.0 -> result.add(\"B+\")\n            g > 2.7 -> result.add(\"B\")\n            g > 2.3 -> result.add(\"B-\")\n            g > 2.0 -> result.add(\"C+\")\n            g > 1.7 -> result.add(\"C\")\n            g > 1.3 -> result.add(\"C-\")\n            g > 1.0 -> result.add(\"D+\")\n            g > 0.7 -> result.add(\"D\")\n            g > 0.0 -> result.add(\"D-\")\n            else -> result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) return false\n    for (i in 2 until sqrt(length.toDouble()).toInt() + 1) {\n        if (length % i == 0) return false\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    if (n == 1) {\n        return 1\n    }\n    val base = 2 * 9\n    val exponent = 10.0.pow(n - 2).toInt()\n    return base * exponent\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = n.toString().map { it.toString().toInt() }.sum()\n    return Integer.toBinaryString(digitsSum)\n}\n",
            "fun add(lst: List<Int>): Int {\n    return lst.filterIndexed { index, _ -> index % 2 == 1 && _ % 2 == 0 }.sum()\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \")\n       .map { it.toCharArray().sorted().joinToString(\"\") }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    return coords.sortedWith(compareBy({ it[0] }, { -it[1] })))\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) return emptyList()\n    val (even, odd) = arr.partition { it % 2 == 0 }\n    return if (even.sum() + odd.sum()) % 2 == 0 else odd + even\n}\n",
            "fun encrypt(s: String): String {\n    val result = CharArray(s.length)\n    for ((i, c) in s.withIndex()) {\n        val shifted = c.toInt() + 4\n        result[i] = (if (shifted > 'z'.toInt()) shifted - 26 else shifted).toChar()\n    }\n    return String(result)\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sortedList = lst.sorted().toSet()\n    if (sortedList.size < 2) {\n        return null\n    }\n    return sortedList.elementAt(1)\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.split(\"[.!?]\\\\s*\".toRegex()).dropLastWhile { it.isEmpty() }\n    return sentences.count { it.startsWith(\"I \") && it.length >= 2 }\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        val sum1 = x + y\n        val sum2 = x + z\n        val sum3 = y + z\n        return sum1 == z || sum2 == y || sum3 == x\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = ArrayList<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                result.add(ch1.code + 2.toChar())\n            } else {\n                result.add(ch1)\n            }\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) return 0\n    val largest = primes.maxOrNull()?: return 0\n    return largest.toString().sumOf { it.digitToInt() }\n}\n",
            "fun checkDictCase(d: Map<String,String>): Boolean {\n    if (d.isEmpty()) {\n        return false\n    }\n    return d.keys.all { it.all { c -> c.isLowerCase() } } || d.keys.all { it.all { c -> c.isUpperCase() } }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2 until n) {\n        if (primes.none { num % it == 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filterIndexed { index, char -> index % 2 == 0 && char in vowels }.count()\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num >= 0) num.toInt() + 0.5 else num.toInt() - 0.5\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (1..n).map { it * 2 }\n}\n",
            "fun wordsString(s: String): List<String> {\n    return s.split(\",| \".toRegex()).filter { it.isNotEmpty() }\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    return if (x > y) -1 else if (y % 2 == 0) y else if (x!= y) y - 1 else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    val rAvg = (m + n) / 2.0 + 0.5\n    return if (rAvg % 1 == 0.0) rAvg.toInt().toString(2) else null\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    return s.all { it.digitToInt() % 2!= 0 }\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    return x.filter { allDigitsOdd(it.toString()) }.sorted()\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { it in 1..9 }.sortedDescending()\n    return sortedArr.map { digitNames[it - 1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, _ ->\n        if (i % 2!= 0) {\n            nums.take(i).sum()\n        } else {\n            nums.take(i).reduce { acc, i -> acc * i }\n        }\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = IntArray(2) { 0 }\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++\n        }\n    }\n    return cnt.toList()\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toString().toInt() }.sum()\n    } else {\n        (nStr.take(2).toInt() * 2) + digitsSum(n.absoluteValue)\n    }\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.count { digitsSum(it) > 0 }\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size).equals(sortedArr.subList(0, arr.size - i)) &&\n            arr.subList(0, i).equals(sortedArr.subList(arr.size - i, arr.size))\n        ) return true\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCount = lst1.count { it % 2!= 0 }\n    val evenCount = lst2.count { it % 2 == 0 }\n    return if (evenCount >= oddCount) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = test.split(\" \").filter { it.isNotEmpty() }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.isNotEmpty()) {\n        val maxFreq = freq.values.maxOrNull()?: 0\n        for ((k, v) in freq) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it!in c }\n    return listOf(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.toCharArray().count { it.toInt() % 2 == 1 }\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = kotlin.math.min(curSum + n, 0)\n        minSum = kotlin.math.min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = kotlin.math.min(nums)\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.sumOf { it.sum() / capacity.toDouble().plus(1).floor() }\n}\n",
            "fun countOnes(num: Int): Int {\n    var count = 0\n    var n = num\n    while (n > 0) {\n        if (n and 1 == 1) {\n            count++\n        }\n        n = n shr 1\n    }\n    return count\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedBy { countOnes(it) }\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.isNotEmpty() }\n    return words.filter { it.count { c -> c.toLowerCase() in consonants } == n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1 step 2) {\n        if (word[i] in vowels && word[i - 1]!in vowels && word[i + 1]!in vowels) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == \"(\") {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\nfun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    return arr.sorted().takeLast(k).toList()\n}\n",
            "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { index, _ -> index % 2 == 0 && _ % 2!= 0 }.sum()\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf(1)\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n /= 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    val year = date.substring(0, 4).toInt()\n    val month = date.substring(5, 7).toInt()\n    val day = date.substring(8, 10).toInt()\n    return when {\n        year < 1900 -> false\n        month!in 1..12 -> false\n        day!in 1..31 -> false\n        month == 2 && day > 28 -> false\n        month == 4 || month == 6 || month == 9 || month == 11 && day > 30 -> false\n        else -> true\n    }\n}\n",
            "fun splitWords(txt: String): List<String> {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\")\n    } else {\n        return listOf(txt.count { it.isLowerCase() && it.toIntOrNull() % 2 == 0 }.toString())\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    for (i in 1 until lst.size) {\n        if (lst[i - 1] > lst[i]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) return null\n    if (0 in arr) return 0\n    val sign = if ((arr.count { it < 0 } % 2) == 1) -1 else 1\n    return sign * arr.sumBy { it.absoluteValue }\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    val minVal = Array(k) { n * n + 1 }\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i > 0) temp.add(grid[i - 1][j])\n                if (j > 0) temp.add(grid[i][j - 1])\n                if (i < n - 1) temp.add(grid[i + 1][j])\n                if (j < n - 1) temp.add(grid[i][j + 1])\n                minVal[i % k] = temp.min()?: minVal[i % k]\n            }\n        }\n    }\n    return minVal.map { if (it == n * n + 1) 1 else it }\n}\n",
            "fun tri(n: Int): List<Int> {\n    val seq = mutableListOf(1, 3)\n    for (i in 2 until n + 1) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().filter { it.digitToInt() % 2 == 1 }.map { it.digitToInt() }\n    return odds.reduce { acc, i -> acc * i }\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for (i in s.indices) {\n        when (s[i]) {\n            '[' -> openIdx.add(i)\n            ']' -> closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    while (i < l) {\n        if (openIdx[i] < closeIdx[i]) {\n            cnt++\n            i++\n        } else {\n            i++\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    return lst.map { ceil(it) }.map { it * it }.sum()\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(\" \") + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) return -1\n    val idx = arr.withIndex().filter { it.value < arr[it.index - 1] }.map { it.index }\n    return if (idx.isEmpty()) -1 else idx.max()?: -1\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val negatives = lst.filter { it < 0 }\n    val positives = lst.filter { it > 0 }\n    val maxNegative = if (negatives.isEmpty()) null else negatives.max()\n    val minPositive = if (positives.isEmpty()) null else positives.min()\n    return listOf(maxNegative, minPositive)\n}\n",
            "fun anyToReal(o: Any): Double {\n    return when (o) {\n        is String -> o.replace(',', '.').toDouble()\n        is Int -> o.toDouble()\n        is Double -> o\n        else -> throw RuntimeException(\"Type Error\")\n    }\n}\nfun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    return if (a1 == b1) {\n        null\n    } else if (a1 > b1) {\n        a1\n    } else {\n        b1\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replace(\"\\\\s{3,}\".toRegex(), \"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size!= 2 ||!suf.contains(lst[1]) || lst[0].isEmpty() ||!lst[0][0].isLetter() || lst[0].any { it.isDigit() }) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for ((index, value) in lst.withIndex()) {\n        if (index % 3 == 0) {\n            result += value * value\n        } else if (index % 4 == 0) {\n            result += value * value * value\n        } else {\n            result += value\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.filter { isPrime(it.length) }.joinToString(\" \")\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toString().toInt() }.sum()\n    } else {\n        (nStr.take(2).toInt() * 2) + digitsSum(n.absoluteValue)\n    }\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedBy { digitsSum(it) }\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.count { n -> n > 10 && n % 2 == 1 && n.toString()[0] in odds }\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    var count = 0\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        val r = a % 3\n        if (r == 0) count++\n        else if (r == 1) count += 2\n    }\n    return count\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1!in names || planet2!in names) return emptyList()\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) return bf(planet2, planet1)\n    if (l == r) return emptyList()\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { it.length % 2 == 0 }\n    return result.sortedBy { it.length }\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) return y\n    for (i in 2 until sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return y\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    return lst.filter { it >= 0.0 && it % 2.0 == 1.0 }.sumBy { it * it }\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.zip(guess).map { it.first - it.second }\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxStrength = Int.MIN_VALUE\n    var maxExtension = \"\"\n    for (extension in extensions) {\n        val strength = countUpperCaseCharacters(extension) - countLowerCaseCharacters(extension)\n        if (strength > maxStrength) {\n            maxStrength = strength\n            maxExtension = extension\n        }\n    }\n    return \"$className.$maxExtension\"\n}\nprivate fun countUpperCaseCharacters(string: String): Int {\n    var count = 0\n    for (char in string) {\n        if (char.isUpperCase()) {\n            count++\n        }\n    }\n    return count\n}\nprivate fun countLowerCaseCharacters(string: String): Int {\n    var count = 0\n    for (char in string) {\n        if (char.isLowerCase()) {\n            count++\n        }\n    }\n    return count\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) return false\n    for (i in 0 until b.length) {\n        val left = b.substring(i) + b.substring(0, i)\n        if (left in a) return true\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.toString().toCharArray().map { it.toInt() }\n    val even = ds.count { it % 2 == 0 }\n    return listOf(even, ds.size - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = intArrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = StringBuilder()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.toString()\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val sides = listOf(a, b, c).sorted()\n    val p = sides[0] * sides[0] + sides[1] * sides[1]\n    return p == sides[2] * sides[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCount = 0\n    var maxWord = \"\"\n    for (word in words) {\n        val count = word.toSet().size\n        if (count > maxCount) {\n            maxCount = count\n            maxWord = word\n        } else if (count == maxCount) {\n            maxWord = min(maxWord, word)\n        }\n    }\n    return maxWord\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    if (need <= remaining) {\n        return listOf(num + need, remaining - need)\n    } else {\n        return listOf(num + remaining, 0)\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i].toDouble().pow(nums[i + 1].toDouble()).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i--\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        }\n        i++\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        if (ch.isLetter()) {\n            result.append(if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase())\n        } else {\n            result.append(ch)\n        }\n    }\n    return result.toString()\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) {\n        return null\n    }\n    val md5 = MessageDigest.getInstance(\"MD5\")\n    val digest = md5.digest(txt.toByteArray())\n    return digest.fold(\"\", { str, it -> str + \"%02x\".format(it) })\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = maxOf(2, minOf(a, b))\n    val upper = minOf(8, maxOf(a, b))\n    return (lower..upper).filter { it % 2 == 0 }\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    foreach (str_split($parens) as $ch) {\n        if ($ch === \"(\") {\n            $stk[] = $ch;\n            $currentGroup.= $ch;\n        } elseif ($ch === \")\") {\n            array_pop($stk);\n            $currentGroup.= $ch;\n            if (empty($stk)) {\n                $groups[] = $currentGroup;\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = 0;\n    foreach ($numbers as $x) {\n        $deviation += abs($x - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "function intersperse($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i!== 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach (str_split($group) as $ch) {\n            if ($ch === \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch === \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring)!== false;\n    });\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_product($numbers);\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax($numbers) {\n    $maxSoFar = -INF;\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s === strrev($s);\n}\nfunction makePalindrome($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s) / 2; $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s. substr($s, $i). strrev(substr($s, 0, $i));\n        }\n    }\n    return '';\n}\n",
            "function stringXor ($a, $b) {\n    return implode(\"\", array_map(function ($x, $y) {\n        return $x == $y? \"0\" : \"1\";\n    }, str_split($a), str_split($b)));\n}\n",
            "function longest($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longestStr = $strs[0];\n    foreach ($strs as $str) {\n        if (strlen($str) > strlen($longestStr)) {\n            $longestStr = $str;\n        }\n    }\n    return $longestStr;\n}\n",
            "function greatestCommonDivisor($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "function allPrefixes($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence($n) {\n    return implode(\" \", range(1, $n + 1));\n}\n",
            "function countDistinctCharacters($s) {\n    return count(array_unique(str_split(strtolower($s))));\n}\n",
            "$durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n$notes = explode(\" \", $musicString);\nreturn array_map(function ($note) use ($durations) {\n    return $durations[$note];\n}, $notes);\n",
            "function howManyTimes($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) === $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = array_filter(explode(\" \", $numbers), function ($x) use ($numDict) {\n        return array_key_exists($x, $numDict);\n    });\n    usort($numList, function ($x, $y) use ($numDict) {\n        return $numDict[$x] <=> $numDict[$y];\n    });\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements($numbers) {\n    sort($numbers);\n    $minDiff = INF;\n    $closestPair = [];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function ($num) use ($minNum, $maxNum) {\n            return ($num - $minNum) / ($maxNum - $minNum);\n        }, $numbers);\n    }\n}\n",
            "function filterIntegers ($values) {\n    return array_values(array_filter($values, 'is_int'));\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    for ($divisor = 2; $divisor <= $n; $divisor++) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n = floor($n / $divisor);\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $result = [];\n    $counts = array_count_values($numbers);\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}\n",
            "function flipCase ($s) {\n    $flipped = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } else {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode('', $flipped);\n}\n",
            "function concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function ($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "function getPositive ($l) {\n    return array_filter($l, function ($num) {\n        return $num > 0;\n    });\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    foreach ($xs as $i => $xi) {\n        $res += $xi * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird($l) {\n    $sortedThird = array_values(array_sort($l, function ($value) {\n        return $value;\n    }));\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 === 0) {\n            $result[] = $sortedThird[$i // 3];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "function listUnique ($l) {\n    return array_values(array_unique($l));\n}\n",
            "function maxElement ($l) {\n    return max($l);\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count($i, \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven($l) {\n    $sortedEven = array_values(array_filter($l, function ($value, $key) {\n        return $key % 2 === 0;\n    }));\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 === 0) {\n            $result[] = $sortedEven[$i / 2];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "function encodeCyclic($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode($result);\n}\nfunction decodeCyclic($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n ** 2;\n}\n",
            "function incrList ($l) {\n    return array_map(function ($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "function pairsSumToZero($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = $x % $bas;\n        $x = floor($x / $bas);\n    }\n    return implode(array_reverse($digits));\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[0] + $fib[1] + $fib[2];\n    }\n    return $fib[$n % 4];\n}\n",
            "function median($l) {\n    sort($l);\n    $middle = count($l) / 2;\n    if (is_int($middle)) {\n        return ($l[$middle] + $l[$middle - 1]) / 2;\n    } else {\n        return $l[$middle];\n    }\n}\n",
            "function isPalindrome ($txt) {\n    return $txt === strrev($txt);\n}\n",
            "function modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ord = ord($s[$i]);\n        $newOrd = ($ord - 97 + 5) % 26 + 97;\n        $result[] = chr($newOrd);\n    }\n    return implode($result);\n}\nfunction decodeShift($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ord = ord($s[$i]);\n        $newOrd = ($ord - 97 + 21) % 26 + 97;\n        $result[] = chr($newOrd);\n    }\n    return implode($result);\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return preg_replace(\"/[\". $vowels. \"]/u\", \"\", $txt);\n}\n",
            "function belowThreshold ($l, $t) {\n    return array_reduce($l, function ($acc, $x) use ($t) {\n        return $acc && $x < $t;\n    }, true);\n}\n",
            "function add($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count(array_intersect(str_split($s0), str_split($s1))) === min(strlen($s0), strlen($s1));\n}\n",
            "function fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b === \"<\") {\n            $depth++;\n        } elseif ($b === \">\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth === 0;\n}\n",
            "function monotonic($l) {\n    $diff = array_map(function($x, $y) {\n        return $y - $x;\n    }, $l, array_slice($l, 1));\n    return count(array_filter($diff, function($x) {\n        return $x <= 0;\n    })) == count($diff) || count(array_filter($diff, function($x) {\n        return $x >= 0;\n    })) == count($diff);\n}\n",
            "function common ($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n",
            "function largestPrimeFactor($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return ($n * ($n + 1)) / 2;\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b === \"(\") {\n            $depth++;\n        } elseif ($b === \")\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth === 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n--;\n    }\n    return $c;\n}\n",
            "function vowelsCount($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i]))!== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift($x, $shift) {\n    $xStr = (string)$x;\n    $len = strlen($xStr);\n    if ($shift > $len) {\n        return strrev($xStr);\n    } else {\n        return substr($xStr, $len - $shift). substr($xStr, 0, $len - $shift);\n    }\n}\n",
            "function digitSum($s) {\n    return array_sum(array_map(function($c) {\n        return ord($c) * ($c >= 'A' && $c <= 'Z');\n    }, str_split($s)));\n}\n",
            "function fruitDistribution($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[array_search('apples', $words) - 1]);\n    $oranges = intval($words[array_search('oranges', $words) - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck($arr) {\n    $evens = array_filter($arr, function ($n) {\n        return $n % 2 === 0;\n    });\n    if (count($evens) === 0) {\n        return [];\n    }\n    $min_even = min($evens);\n    return [$min_even, array_search($min_even, $arr)];\n}\n",
            "function search($lst) {\n    $freqs = array_count_values($lst);\n    $good_vals = array_filter($freqs, function ($v) {\n        return $v >= key($freqs);\n    });\n    return max(array_keys($good_vals), default: -1);\n}\n",
            "function strangeSortList ($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    $sides = [$a, $b, $c];\n    sort($sides);\n    if ($sides[0] + $sides[1] > $sides[2]) {\n        $p = ($sides[0] + $sides[1] + $sides[2]) / 2;\n        return sqrt($p * ($p - $sides[0]) * ($p - $sides[1]) * ($p - $sides[2]));\n    } else {\n        return -1;\n    }\n}\n",
            "function willItFly($q, $w) {\n    $isPalindrome = true;\n    $total = 0;\n    for ($i = 0; $i < count($q) / 2; $i++) {\n        if ($q[$i]!= $q[count($q) - 1 - $i]) {\n            $isPalindrome = false;\n        }\n        $total += $q[$i];\n    }\n    return $isPalindrome && $total <= $w;\n}\n",
            "function smallestChange($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i]!= $arr[count($arr) - 1 - $i]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map('strlen', $lst1));\n    $cnt2 = array_sum(array_map('strlen', $lst2));\n    return $cnt1 <= $cnt2? $lst1 : $lst2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isMultiplyPrime($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    return abs($a) === round(pow($a, 1.0 / 3.0)) ** 3;\n}\n",
            "function hexKey($num) {\n    return count(array_filter(str_split($num), function($x) {\n        return in_array($x, [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]);\n    }));\n}\n",
            "function decimalToBinary($dec) {\n    $binary = decbin($dec);\n    return \"0b\". str_pad($binary, ceil(log10($dec)) + 1, \"0\", STR_PAD_LEFT);\n}\n",
            "function isHappy($s) {\n    $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function numericalLetterGrade($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($length)) >= $i; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    $result = 2;\n    for ($i = 0; $i < $n - 2; $i++) {\n        $result *= 9;\n    }\n    $result *= 10 ** ($n - 2);\n    return $result;\n}\n",
            "function solve($n) {\n    $digitsSum = array_sum(str_split((string)$n));\n    return decbin($digitsSum);\n}\n",
            "function add($lst) {\n    $sum = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 1 && $x % 2 == 0) {\n            $sum += $x;\n        }\n    }\n    return $sum;\n}\n",
            "function antiShuffle ($s) {\n    $words = explode(\" \", $s);\n    $sortedWords = [];\n    foreach ($words as $word) {\n        $sortedWords[] = str_split(trim($word));\n        sort($sortedWords);\n    }\n    return implode(\" \", $sortedWords);\n}\n",
            "function getRow($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n            if ($value == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        return $a[0] == $b[0]? $a[1] - $b[1] : $a[0] - $b[0];\n    });\n    return $coords;\n}\n",
            "function sortArray($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    $isOdd = ($arr[0] + $arr[count($arr) - 1]) % 2 == 1;\n    $sorted = $isOdd? rsort($arr) : sort($arr);\n    return $sorted;\n}\n",
            "function encrypt($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $shifted = ord($s[$i]) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return implode($result);\n}\n",
            "function nextSmallest($lst) {\n    $sl = array_values(array_unique(sort($lst)));\n    return count($sl) < 2? null : $sl[1];\n}\n",
            "function isBored($s) {\n    $sentences = preg_split('/[.!?]\\s*/', $s);\n    $count = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && substr($sentence, 0, 2) === 'I ') {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function anyInt ($x, $y, $z) {\n    return is_int($x) && is_int($y) && is_int($z) && ($x + $y == $z || $x + $z == $y || $y + $z == $x);\n}\n",
            "function encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    foreach (str_split($message) as $ch) {\n        if (ctype_alpha($ch)) {\n            $ch1 = strtoupper($ch) if ctype_lower($ch) else strtolower($ch);\n            if (strpos($vowels, $ch1)!== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd($lst) {\n    $primes = array_filter($lst, 'isPrime');\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = max($primes);\n    $largestString = (string)$largest;\n    $sum = 0;\n    foreach (str_split($largestString) as $digit) {\n        $sum += (int)$digit;\n    }\n    return $sum;\n}\n",
            "function checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $lower = true;\n    $upper = true;\n    foreach ($d as $key => $value) {\n        if (ctype_lower($key)) {\n            $upper = false;\n        } else {\n            $lower = false;\n        }\n        if (!$lower &&!$upper) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    return ($a % 10) * ($b % 10);\n}\n",
            "function countUpper($s) {\n    $vowels = \"AEIOU\";\n    return count(array_filter(str_split($s), function ($i, $c) {\n        return $i % 2 == 0 && in_array($c, str_split($vowels));\n    }));\n}\n",
            "function closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "function makeAPile ($n) {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
            "function wordsString($s) {\n    return preg_split('/[, ]+/', $s, -1, PREG_SPLIT_NO_EMPTY);\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1 if ($x!= $y) else -1;\n}\n",
            "function roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = (int) (($m + $n) / 2.0 + 0.5);\n    return decbin($rAvg);\n}\n",
            "function allDigitsOdd($s) {\n    return!preg_match('/[0468]/', $s);\n}\nfunction uniqueDigits($x) {\n    return array_values(array_unique(array_filter($x, 'allDigitsOdd')));\n}\n",
            "function byLength($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_filter($arr, function ($x) {\n        return $x >= 1 && $x <= 9;\n    });\n    usort($sortedArr, function ($a, $b) {\n        return $b - $a;\n    });\n    return array_map(function ($x) use ($digitNames) {\n        return $digitNames[$x - 1];\n    }, $sortedArr);\n}\n",
            "function f($n) {\n    $nums = range(1, $n + 1);\n    $result = [];\n    foreach ($nums as $i) {\n        if ($i % 2!= 0) {\n            $result[] = array_sum(array_slice($nums, 0, $i));\n        } else {\n            $result[] = array_reduce(array_slice($nums, 0, $i), function ($x, $y) {\n                return $x * $y;\n            }, 1);\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($txt) {\n    return $txt === strrev($txt);\n}\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome((string)$i)) {\n            $cnt[$i % 2] += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(array_map(function ($d) {\n            return (int)$d;\n        }, str_split($nStr)));\n    } else {\n        return (int)substr($nStr, 0, 2) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums($arr) {\n    return count(array_filter($arr, function ($n) {\n        return digitsSum($n) > 0;\n    }));\n}\n",
            "function moveOneBall($arr) {\n    if (count($arr) === 0) {\n        return true;\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if (array_slice($arr, $i) === array_slice($sortedArr, 0, count($arr) - $i) && array_slice($arr, 0, $i) === array_slice($sortedArr, count($arr) - $i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $oddCount = count(array_filter($lst1, function ($num) {\n        return $num % 2!= 0;\n    }));\n    $evenCount = count(array_filter($lst2, function ($num) {\n        return $num % 2 == 0;\n    }));\n    return $evenCount >= $oddCount? \"YES\" : \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function ($w) {\n        return strlen($w) > 0;\n    });\n    foreach ($words as $w) {\n        $freq[$w] = isset($freq[$w])? $freq[$w] + 1 : 1;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = max(array_values($freq));\n        foreach ($freq as $k => $v) {\n            if ($v === $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s === strrev($s);\n}\nfunction reverseDelete($s, $c) {\n    $s1 = str_replace($c, \"\", $s);\n    return [$s1, \"yes\" if isPalindrome($s1) else \"no\"];\n}\n",
            "function oddCount($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        foreach (str_split($num) as $d) {\n            if (ord($d) % 2 == 1) {\n                $n++;\n            }\n        }\n        $result[] = str_replace(\"i\", $n, \"the number of odd elements in the string i of the input.\");\n    }\n    return $result;\n}\n",
            "function minSubArraySum($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    return array_sum(array_map(function ($arr) use ($capacity) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}\n",
            "function countOnes($num) {\n    return substr_count(decbin($num), '1');\n}\nfunction sortArray($arr) {\n    usort($arr, function ($a, $b) {\n        $countA = countOnes($a);\n        $countB = countOnes($b);\n        if ($countA === $countB) {\n            return $a - $b;\n        }\n        return $countA - $countB;\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $w) {\n        if (strlen(preg_replace(\"/[^a-z]/\", \"\", $w)) == $n) {\n            $result[] = $w;\n        }\n    }\n    return $result;\n}\n",
            "function getClosestVowel($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i >= 0; $i--) {\n        if (strpos($vowels, $word[$i])!== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function check($s) {\n    $depth = 0;\n    foreach (str_split($s) as $ch) {\n        if ($ch === '(') {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth === 0;\n}\nfunction matchParens($lst) {\n    $s1 = $lst[0]. $lst[1];\n    $s2 = $lst[1]. $lst[0];\n    return $check($s1) || $check($s2)? 'Yes' : 'No';\n}\n",
            "function maximum($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    rsort($arr);\n    return array_slice($arr, -$k);\n}\n",
            "function solution($lst) {\n    $sum = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2!= 0) {\n            $sum += $x;\n        }\n    }\n    return $sum;\n}\n",
            "function addElements($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $n = $arr[$i];\n        if (strlen($n) <= 2) {\n            $sum += $n;\n        }\n    }\n    return $sum;\n}\n",
            "function getOddCollatz($n) {\n    $collatz = [1];\n    while ($n!= 1) {\n        if ($n % 2!= 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "function validDate ($date) {\n    if (!preg_match('/^\\d{4}-\\d{2}-\\d{2}$/', $date)) {\n        return false;\n    }\n    $year = (int) substr($date, 0, 4);\n    $month = (int) substr($date, 5, 2);\n    $day = (int) substr($date, 8, 2);\n    if ($month == 2) {\n        $isLeapYear = $year % 4 == 0 and ($year % 100!= 0 or $year % 400 == 0);\n        $maxDay = $isLeapYear? 29 : 28;\n    } else {\n        $maxDay = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][$month - 1];\n    }\n    return $day >= 1 and $day <= $maxDay;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \")!== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\")!== false) {\n        return explode(\",\", $txt);\n    } else {\n        return [strlen(preg_replace(\"/[^a-z]/\", \"\", $txt))];\n    }\n}\n",
            "function isSorted($lst) {\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return \"YES\" if ($length > 0 && isPrime($length)) else \"NO\";\n}\n",
            "function prodSigns($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    $hasZero = in_array(0, $arr);\n    if ($hasZero) {\n        return 0;\n    }\n    $negatives = array_filter($arr, function ($n) {\n        return $n < 0;\n    });\n    $oddNegatives = count($negatives) % 2;\n    $sign = $oddNegatives? -1 : 1;\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "function minPath($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i > 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j > 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i < $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j < $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 - $i % 2 * 2;\n    }\n    return $result;\n}\n",
            "function tri ($n) {\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits($n) {\n    $odds = array_filter(str_split($n), function($d) { return $d % 2 == 1; });\n    return array_product($odds)?: 0;\n}\n",
            "function isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] === '[') {\n            $openIdx[] = $i;\n        } elseif ($s[$i] === ']') {\n            $closeIdx[] = $i;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt++;\n            $i++;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares($lst) {\n    return array_sum(array_map(function ($n) {\n        return pow(ceil($n), 2);\n    }, $lst));\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    $last = substr($txt, strrpos($txt,'') + 1);\n    return strlen($last) === 1 && ctype_alpha($last);\n}\n",
            "function canArrange ($arr) {\n    $n = count($arr);\n    if ($n <= 1) {\n        return -1;\n    }\n    $idx = array_keys($arr, max($arr));\n    return $idx[0] - 1;\n}\n",
            "function largestSmallestIntegers($lst) {\n    $neg = array_filter($lst, function ($i) {\n        return $i < 0;\n    });\n    $pos = array_filter($lst, function ($i) {\n        return $i > 0;\n    });\n    $maxNeg = count($neg)? max($neg) : null;\n    $minPos = count($pos)? min($pos) : null;\n    return [$maxNeg, $minPos];\n}\n",
            "function anyToReal($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    }\n    throw new RuntimeException('Type Error');\n}\nfunction compareOne($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 === 0 && $n >= 8;\n}\n",
            "function specialFactorial($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact = $fact * $i;\n        $result = $result * $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces($txt) {\n    return preg_replace('/\\s{3,}/', '-', $txt);\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst)!= 2 ||!in_array($lst[1], $suf) || empty($lst[0]) ||!ctype_alpha($lst[0][0]) || preg_match(\"/[0-9]/\", $lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 === 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 === 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, function ($w) {\n        return isPrime(strlen($w));\n    }));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den === 0;\n}\n",
            "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(array_map(function ($d) {\n            return (int)$d;\n        }, str_split($nStr)));\n    } else {\n        return (int)substr($nStr, 0, 2) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints($nums) {\n    usort($nums, function ($a, $b) {\n        return digitsSum($b) - digitsSum($a);\n    });\n    return $nums;\n}\n",
            "function specialFilter($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function ($n) {\n        return $n > 10 && $n % 2 == 1 && $n[0] == $odds;\n    }));\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6;\n}\n",
            "$names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nif (!in_array($planet1, $names) ||!in_array($planet2, $names)) {\n    return [];\n}\n$l = array_search($planet1, $names);\n$r = array_search($planet2, $names);\nif ($l > $r) {\n    $l, $r = $r, $l;\n}\nif ($l === $r) {\n    return [];\n}\nreturn array_slice($names, $l + 1, $r - $l - 1);\n",
            "function sortedListSum ($lst) {\n    $result = array_filter($lst, function ($s) {\n        return strlen($s) % 2 === 0;\n    });\n    usort($result, function ($a, $b) {\n        $al = strlen($a);\n        $bl = strlen($b);\n        if ($al === $bl) {\n            return strcmp($a, $b);\n        }\n        return $al < $bl? -1 : 1;\n    });\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    return array_sum(array_filter($lst, function ($n) {\n        return $n >= 0 && $n % 2 == 1;\n    }));\n}\n",
            "function compare ($game, $guess) {\n    return array_map(function ($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = '';\n    foreach ($extensions as $ext) {\n        $upper = count(preg_split('//', $ext, -1, PREG_SPLIT_NO_EMPTY));\n        $lower = count(preg_split('//', $ext, -1, PREG_SPLIT_NO_EMPTY));\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className. '.'. $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        $left = substr($b, $i). substr($b, 0, $i);\n        if (strpos($a, $left)!== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount($num) {\n    $ds = (string) abs($num);\n    $even = count(array_filter(str_split($ds), function($d) {\n        return ord($d) % 2 === 0;\n    }));\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n}\n",
            "function findMax($words) {\n    $maxCount = 0;\n    $maxWord = \"\";\n    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n        if ($count > $maxCount) {\n            $maxCount = $count;\n            $maxWord = $word;\n        } elseif ($count == $maxCount) {\n            $maxWord = min($maxWord, $word);\n        }\n    }\n    return $maxWord;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "function solve($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (ctype_alpha($ch)) {\n            $result[] = ctype_upper($ch)? strtolower($ch) : strtoupper($ch);\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode($result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (empty($txt)) {\n        return null;\n    }\n    return md5($txt);\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return array_filter(range($lower, $upper), function ($i) {\n        return $i % 2 === 0;\n    });\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    numbers.combination(2).any? { |a, b| (a - b).abs < threshold }\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    parens.each_char do |ch|\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop()\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n        end\n    end\n    groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = numbers.reduce(:+) / numbers.length\n    deviation = numbers.map{|x| (x - mean).abs}.reduce(:+)\n    deviation / numbers.length\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |num, i|\n        result << num\n        result << delimiter unless i == numbers.length - 1\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == \"(\"\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == \")\"\n                depth -= 1\n        end\n        result.append(max_depth)\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select{|s| s.include?(substring)}\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.reduce(:+)\n    n_product = numbers.reduce(:*)\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = numbers.first\n    result = [max_so_far]\n    for num in numbers[1..-1]\n        max_so_far = [max_so_far, num].max\n        result.append(max_so_far)\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0...s.length\n        if is_palindrome(s[i..-1])\n            return s + s[0...i].reverse\n        end\n    end\n    \"\"\nend\n",
            "def string_xor(a, b)\n    a.bytes.zip(b.bytes).map { |x, y| (x ^ y).to_s(2).rjust(8, \"0\") }.join\nend\n",
            "def longest(strs)\n    return strs.max_by(&:length) if strs.any?\nend\n",
            "def greatest_common_divisor(a, b)\n    while b!= 0\n        a, b = b, a % b\n    end\n    a\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    (0...s.length).each do |i|\n        prefixes.push(s[0...i+1])\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n    (0..n).to_a.join(' ')\nend\n",
            "def count_distinct_characters(s)\n    s.downcase.chars.uniq.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split\n    notes.map { |note| durations[note] }\nend\n",
            "def how_many_times(s, substring)\n    count = 0\n    while (index = s.index(substring))\n        count += 1\n        s = s[index + 1..-1]\n    end\n    count\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    }\n    num_list = numbers.split.select{|x| num_dict.key?(x)}\n    num_list.sort_by{|x| num_dict[x]}\n    num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    (1...sorted_numbers.length).each do |i|\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        0.0.times.map { |_i| 0.0 }\n    else\n        (numbers - min_num) / (max_num - min_num)\n    end\nend\n",
            "def filter_integers(values)\n    values.select {|x| x.is_a? Integer}\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    (2...n).each do |i|\n        if n % i == 0\n            return n / i\n        end\n    end\n    1\nend\n",
            "def factorize(n)\n    factors = []\n    i = 2\n    while i <= n\n        if n % i == 0\n            factors.push(i)\n            n /= i\n        else\n            i += 1\n        end\n    end\n    factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = numbers.group_by(&:itself).transform_values(&:count)\n    numbers.select { |num| counts[num] == 1 }\nend\n",
            "def flip_case(s)\n    s.chars.map do |ch|\n        if ch =~ /[a-z]/i\n            ch.swapcase\n        else\n            ch\n        end\n    end.join\nend\n",
            "def concatenate(strs)\n    strs.join\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    strs.select{|s| s.start_with?(prefix_str)}\nend\n",
            "def get_positive(l)\n    l.select{|num| num > 0}\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2...Math.sqrt(n).to_i + 1).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    xs.each_with_index do |e, i|\n        res += e * x**i\n    end\n    return res\nend\ndef find_zero(xs)\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    return (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = l.each_slice(3).map(&:sort).flatten\n    l.map.with_index { |_, i| i % 3 == 0? sorted_third[i // 3] : _ }\nend\n",
            "def list_unique(l)\n    l.uniq.sort\nend\n",
            "def max_element(l)\n    l.max || 0\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    (0...n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    cnt\nend\n",
            "def sort_even(l)\n    sorted_even = l.select.with_index{|e, i| i.even?}\n    sorted_even.each_slice(2){|a, b| a <=> b}\n    l.each_with_index.map{|e, i| i.even?? sorted_even.shift : e}\nend\n",
            "def encode_cyclic(s)\n    result = \"\"\n    for i in 0...s.length, 3\n        if i + 3 > s.length\n            result += s[i..-1]\n        else\n            result += s[i + 1...i + 3] + s[i]\n        end\n    end\n    result\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2...Math.sqrt(n).floor + 1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n        end\n    end\n    return f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    l.combination(3).any? { |a, b, c| a + b + c == 0 }\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    l.map {|i| i + 1}\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    for num in l\n        if -num in seen\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    digits = []\n    while x > 0\n        digits.append(x % bas)\n        x /= bas\n    end\n    digits.reverse.map{|d| d.to_s(bas)}.join\nend\n",
            "def triangle_area(a, h)\n    (a * h) / 2.0\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4...n+1\n        fib[i % 4] = fib[i % 4] + fib[(i - 1) % 4]\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n    sorted_l = l.sort\n    l_size = l.size\n    l_size.odd?? sorted_l[l_size / 2] : (sorted_l[l_size / 2] + sorted_l[l_size / 2 - 1]) / 2\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\n",
            "def modp(n, p)\n    ret = 1\n    0.upto(n-1) do\n        ret = (ret * 2) % p\n    end\n    ret\nend\n",
            "def encode_shift(s)\n    s.chars.map{|ch| ((ch.ord - 97 + 5) % 26) + 97}.pack(\"c*\")\nend\ndef decode_shift(s)\n    s.chars.map{|ch| ((ch.ord - 97 + 21) % 26) + 97}.pack(\"c*\")\nend\n",
            "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    txt.chars.select{|char|!vowels.include?(char)}.join\nend\n",
            "def below_threshold(l, t)\n    l.all?{|x| x < t}\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.to_set == s1.chars.to_set\nend\n",
            "def fib(n)\n    return n if n <= 1\n    fib(n - 1) + fib(n - 2)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def monotonic(l)\n    diff = l.each_cons(2).map { |x, y| y - x }\n    diff.all? { |x| x <= 0 } || diff.all? { |x| x >= 0 }\nend\n",
            "def common(l1, l2)\n    l1.select{|e| l2.include?(e)}\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n    n\nend\n",
            "def sum_to_n(n)\n    (1..n).reduce(:+)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def derivative(xs)\n    result = []\n    for i in 1...xs.length\n        result.push(xs[i - 1] * i)\n    end\n    result\nend\n",
            "def fibfib(n)\n    return 0 if n <= 1\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "VOWELS = %w[a e i o u y].freeze\ndef vowels_count(s)\n    cnt = 0\n    s.chars.each do |c|\n        cnt += 1 if VOWELS.include?(c.downcase)\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        x_str.reverse\n    else\n        x_str.slice(-shift, shift) + x_str.slice(0, -shift)\n    end\nend\n",
            "def digit_sum(s)\n    s.chars.select{|c| c.upcase?}.map{|c| c.ord}.reduce(:+)\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words.index(\"apples\")? words[words.index(\"apples\") - 1].to_i : 0\n    oranges = words.index(\"oranges\")? words[words.index(\"oranges\") - 1].to_i : 0\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select{|n| n % 2 == 0}\n    return [] if evens.empty?\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = Hash.new(0)\n    lst.each { |n| freqs[n] += 1 }\n    good_vals = freqs.select { |k, v| v >= k }.keys\n    good_vals.empty?? -1 : good_vals.max\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left = 0\n    right = sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2.0\n        Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palindrome = q.first == q.last && q.size.odd?? q[1...-1].all? { |e| e == q.last } : q[1...-1].reverse.all? { |e| e == q.last }\n    total = q.sum\n    return is_palindrome && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    arr.each_with_index do |e, i|\n        ans += 1 if e!= arr[-i - 1]\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.reduce(0) { |sum, s| sum + s.length }\n    cnt2 = lst2.reduce(0) { |sum, s| sum + s.length }\n    return lst1 if cnt1 <= cnt2 else lst2\nend\n",
            "def is_prime(n)\n    return n > 1 if n.even? || (2..(n**0.5)).none? { |i| n % i == 0 } else false\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    while a > 1\n        if is_prime(a)\n            cnt += 1\n            a /= a while a % a == 0\n        end\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round\n    root ** 3 == a\nend\n",
            "def hex_key(num)\n    num.count{|x| \"2357BD\".include? x}\nend\n",
            "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    \"0b\" + binary\nend\n",
            "def is_happy(s)\n    s.chars.each_cons(3).any? { |a, b, c| a == b || a == c || b == c }\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        case\n        when g == 4.0\n            result.append(\"A+\")\n        when g > 3.7\n            result.append(\"A\")\n        when g > 3.3\n            result.append(\"A-\")\n        when g > 3.0\n            result.append(\"B+\")\n        when g > 2.7\n            result.append(\"B\")\n        when g > 2.3\n            result.append(\"B-\")\n        when g > 2.0\n            result.append(\"C+\")\n        when g > 1.7\n            result.append(\"C\")\n        when g > 1.3\n            result.append(\"C-\")\n        when g > 1.0\n            result.append(\"D+\")\n        when g > 0.7\n            result.append(\"D\")\n        when g > 0.0\n            result.append(\"D-\")\n        else\n            result.append(\"E\")\n        end\n    end\n    result\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..Math.sqrt(length).floor).each do |i|\n        return false if length % i == 0\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * (10 ** (n - 2))\nend\n",
            "def solve(n)\n    n.to_s(2).chars.reduce(:+)\nend\n",
            "def add(lst)\n    lst.select.with_index { |_, i| i.odd? && _.even? }.reduce(:+) || 0\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \")\n    words.map! { |word| word.split(\"\").sort.join }\n    words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |col, j|\n            if col == x\n                coords.append([i, j])\n            end\n        end\n    end\n    return coords.sort_by{|a| [a[0], -a[1]]}\nend\n",
            "def sort_array(arr)\n    arr.sort!{|a, b| a <=> b}\nend\n",
            "def encrypt(s)\n    result = []\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result.append(shifted.chr)\n    end\n    result.join\nend\n",
            "def next_smallest(lst)\n    sl = lst.sort.uniq\n    sl.size < 2? nil : sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    sentences.count{|sentence| sentence.start_with?(\"I \") && sentence.length >= 2}\nend\n",
            "def any_int(x, y, z)\n    [x, y, z].all? { |i| i.is_a?(Integer) } && [x + y, x + z, y + z].include?(z)\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    message.each_char do |ch|\n        if ch.isalpha?\n            ch1 = ch.upcase if ch.downcase == ch\n            if ch1.include?(vowels)\n                ch1 = ch1.next\n            end\n            result.push(ch1)\n        else\n            result.push(ch)\n        end\n    end\n    result.join\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2...Math.sqrt(n).floor + 1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    if primes.empty?\n        return 0\n    end\n    largest = primes.max.to_s\n    return largest.chars.map(&:to_i).sum\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    return d.keys.all?{|k| k.downcase == k} || d.keys.all?{|k| k.upcase == k}\nend\n",
            "def count_up_to(n)\n    primes = []\n    (2..n).each do |num|\n        if primes.all? {|p| num % p!= 0}\n            primes.push(num)\n        end\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    s.chars.each_with_index.select{|c, i| i.even? && vowels.include?(c)}.count\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    num.round\nend\n",
            "def make_a_pile(n)\n    (0...n).map{|i| n + 2 * i}\nend\n",
            "def words_string(s)\n    s.split(/[, ]/).select{|w|!w.empty?}\nend\n",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    return y - 1 if x!= y else -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    (m + n) / 2.0.round\nend\n",
            "def all_digits_odd(s)\n    s.chars.all? { |digit| digit.ord.even? }\nend\ndef unique_digits(x)\n    x.select { |num| all_digits_odd(num.to_s) }.sort\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select{|x| (1..9).cover?(x)}.sort_by{|x| x}.reverse\n    sorted_arr.map{|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    return nums.map.with_index do |_, i|\n        i.odd?? nums[0...i].sum : nums[0...i].reduce(:*)\n    end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    (1..n).each do |i|\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).sum\n    else\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef count_nums(arr)\n    arr.count{|n| digits_sum(n) > 0}\nend\n",
            "def move_one_ball(arr)\n    return arr.sort == arr || arr.sort.reverse == arr\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_count = lst1.count{|num| num.odd?}\n    even_count = lst2.count{|num| num.even?}\n    return \"YES\" if even_count >= odd_count\n    \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split.select{|w| w.length > 0}\n    words.each do |w|\n        freq[w] = freq.fetch(w, 0) + 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        freq.each do |k, v|\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.chars.reject{|ch| c.include?(ch)}.join\n    [s1, is_palindrome(s1)? \"yes\" : \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = num.chars.count{|d| d.ord % 2 == 1}\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.sub(\"i\", n.to_s))\n    end\n    result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    for n in nums\n        cur_sum = [cur_sum + n, 0].max\n        min_sum = [cur_sum, min_sum].min\n    end\n    min_sum = [min_sum, nums.min].min\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map { |arr| arr.sum.fdiv(capacity).ceil }.sum\nend\n",
            "def count_ones(num)\n    num.to_s(2).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort_by {|x| [count_ones(x), x]}\nend\n",
            "def select_words(s, n)\n    words = s.split(\" \")\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words.select{|w| w.length > 0 && w.count{|c| consonants.include?(c.downcase)} == n}\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (0...(word.length - 2)).each do |i|\n        if vowels.include?(word[i]) &&!vowels.include?(word[i - 1]) &&!vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "def check(s)\n    depth = 0\n    for ch in s\n        if ch == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return true if depth == 0 else false\nend\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\nend\n",
            "def maximum(arr, k)\n    arr.sort.last(k)\nend\n",
            "def solution(lst)\n    lst.each_with_index.inject(0) do |sum, (x, i)|\n        sum + (i.even? && x.odd?? x : 0)\n    end\nend\n",
            "def add_elements(arr, k)\n    arr.take(k).select{|n| n.to_s.size <= 2}.sum\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n!= 1\n        if n % 2!= 0\n            collatz.push(n)\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    collatz.sort\nend\n",
            "def valid_date(date)\n    date.match(/\\d{4}-\\d{2}-\\d{2}/) && Date.parse(date)\nend\n",
            "def split_words(txt)\n    txt.split(\" \") || txt.split(\",\") || [txt.count{|c| c.downcase.ord.even?}]\nend\n",
            "def is_sorted(lst)\n    (0...lst.length-1).all? {|i| lst[i] <= lst[i+1]}\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2...Math.sqrt(n)).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 && is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    sign = -1 if arr.count{|n| n < 0} % 2 == 1 else 1\n    return sign * arr.map{|n| n.abs}.reduce(:+)\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i > 0\n                    temp.push(grid[i - 1][j])\n                end\n                if j > 0\n                    temp.push(grid[i][j - 1])\n                end\n                if i < n - 1\n                    temp.push(grid[i + 1][j])\n                end\n                if j < n - 1\n                    temp.push(grid[i][j + 1])\n                end\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    for i in 0...k\n        result.push(1 if i.even? else min_val)\n    end\n    result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3]\n    (2...n+1).each do |i|\n        if i.even?\n            seq.append(i/2+1)\n        else\n            seq.append(seq[i-1]+seq[i-2]+(i+3)/2)\n        end\n    end\n    return seq\nend\n",
            "def digits(n)\n    n.to_s.chars.select{|c| c.to_i.odd?}.reduce(1, :*) || 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.each_char.with_index do |ch, i|\n        if ch == '['\n            open_idx << i\n        elsif ch == ']'\n            close_idx << i\n        end\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    while i < l and open_idx[i] < close_idx[i]\n        cnt += 1\n        i += 1\n    end\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    lst.map{|n| n**2}.reduce(:+)\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    txt && txt.split(' ').last&.length == 1 && txt.split(' ').last&.match?(/\\A[a-zA-Z]\\Z/)\nend\n",
            "def can_arrange(arr)\n    arr.each_with_index.find_index{|x, i| i > 0 && x < arr[i - 1]} || -1\nend\n",
            "def largest_smallest_integers(lst)\n    negatives = []\n    positives = []\n    for i in lst\n        if i < 0\n            negatives.append(i)\n        else\n            positives.append(i)\n        end\n    end\n    max_neg = negatives.max if negatives.any?\n    min_pos = positives.min if positives.any?\n    [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    if o.is_a? String\n        o.tr(',', '.').to_f\n    elsif o.is_a? Integer\n        o.to_f\n    elsif o.is_a? Float\n        o\n    else\n        raise \"Type Error\"\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        nil\n    elsif a1 > b1\n        a1\n    else\n        b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, \"-\").tr(\" \", \"_\")\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length!= 2 ||!suf.include?(lst[1]) || lst[0].empty? ||!lst[0][0].match?(/[a-zA-Z]/) || lst[0].scan(/\\d/).length > 3\n        return \"No\"\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    lst.each_with_index do |e, i|\n        if i.even?\n            result += e ** 2\n        elsif i.odd?\n            result += e ** 3\n        else\n            result += e\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2...Math.sqrt(n).floor + 1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    words.select{|w| is_prime(w.length)}.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).sum\n    else\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by{|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    nums.select{|n| n > 10 && n.odd? && n.to_s[0] == odds}.size\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    names[l + 1...r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select{|s| s.length.even?}\n    result.sort_by!{|s| [s.length, s]}\n    result\nend\n",
            "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    end\n    i = 2\n    while i <= Math.sqrt(n).floor\n        if n % i == 0\n            return y\n        end\n        i += 1\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    lst.select{|n| n >= 0 && n % 2 == 1}.map{|n| n * n}.sum\nend\n",
            "def compare(game, guess)\n    game.zip(guess).map { |x, y| (x - y).abs }\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.count(\"A\"..\"Z\")\n        lower = ext.count(\"a\"..\"z\")\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    if a.length < b.length\n        return false\n    end\n    b_rotated = b + b\n    return b_rotated.include?(a)\nend\n",
            "def even_odd_count(num)\n    ds = num.to_s.chars\n    even = ds.count{|d| d.to_i.even?}\n    [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in 0...values.length\n        while num >= values[i]\n            res += numerals[i]\n            num -= values[i]\n        end\n    end\n    res\nend\n",
            "def right_angle_triangle(a, b, c)\n    sides = [a, b, c].sort\n    sides[0]**2 + sides[1]**2 == sides[2]**2\nend\n",
            "def find_max(words)\n    max_count = 0\n    max_word = \"\"\n    words.each do |word|\n        count = word.chars.uniq.length\n        if count > max_count\n            max_count = count\n            max_word = word\n        elsif count == max_count\n            max_word = [max_word, word].min\n        end\n    end\n    max_word\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    else\n        return [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    nums = operands.dup\n    ops = operators.dup\n    while ops.include? \"**\"\n        index = ops.index \"**\"\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.delete_at index + 1\n        ops.delete_at index\n    end\n    while ops.include? \"*\"\n        index = ops.index \"*\"\n        nums[index] = nums[index] * nums[index + 1]\n        nums.delete_at index + 1\n        ops.delete_at index\n    end\n    while ops.include? \"//\"\n        index = ops.index \"//\"\n        nums[index] = nums[index] / nums[index + 1]\n        nums.delete_at index + 1\n        ops.delete_at index\n    end\n    while ops.include? \"+\"\n        index = ops.index \"+\"\n        nums[index] = nums[index] + nums[index + 1]\n        nums.delete_at index + 1\n        ops.delete_at index\n    end\n    while ops.include? \"-\"\n        index = ops.index \"-\"\n        nums[index] = nums[index] - nums[index + 1]\n        nums.delete_at index + 1\n        ops.delete_at index\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    result = \"\"\n    s.each_char do |ch|\n        if ch =~ /[a-z]/i\n            result << (ch.upcase if ch == ch.upcase else ch.downcase)\n        else\n            result << ch\n        end\n    end\n    result\nend\n",
            "def string_to_md5(txt)\n    if txt.empty?\n        return nil\n    end\n    Digest::MD5.hexdigest(txt)\nend\n",
            "def generate_integers(a, b)\n    lower = [2, a, b].min\n    upper = [8, a, b].max\n    (lower..upper).select{|i| i.even?}\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = vec![];\n    let mut stk = vec![];\n    let mut current_group = String::new();\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    operations.iter().any(|&op| op < 0 && operations.iter().sum::<i32>() < -op)\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().map(|x| (x - mean).abs()).sum::<f64>();\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    numbers.iter().copied().flat_map(|x| vec![x, delimiter]).collect()\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = vec![];\n    let mut depth = 0;\n    let mut max_depth = 0;\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            depth += 1;\n            max_depth = max(max_depth, depth);\n        } else if ch == ')' {\n            depth -= 1;\n        }\n    }\n    result.push(max_depth);\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.contains(substring)).cloned().collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().fold(1, |acc, x| acc * x);\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = vec![];\n    for num in numbers {\n        max_so_far = max_so_far.max(*num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn is_palindrome(s: &str) -> bool {\n    s.chars().zip(s.chars().rev()).all(|(a, b)| a == b)\n}\npub fn make_palindrome(s: &str) -> String {\n    if is_palindrome(s) {\n        return s.to_string();\n    }\n    for i in 0..s.len() {\n        if is_palindrome(&s[i..]) {\n            return format!(\"{}{}\", s, &s[..i]);\n        }\n    }\n    String::new()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    a.chars().zip(b.chars()).map(|(a, b)| (a!= b) as u8).collect()\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = strs[0].clone();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    (0..s.len())\n       .map(|i| s.chars().take(i + 1).collect())\n       .collect()\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.chars().fold(std::collections::HashSet::new(), |mut acc, c| {\n        acc.insert(c.to_ascii_lowercase());\n        acc\n    }).len() as i32\n}\n",
            "let durations: HashMap<&str, i32> = [\n    (\"o\", 4),\n    (\"o|\", 2),\n    (\".|\", 1),\n].iter().cloned().collect();\npub fn parse_music(music_string: &String) -> Vec<i32> {\n    music_string.split_whitespace().map(|note| durations[note.as_str()]).collect()\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..(s.len() - substring.len() + 1) {\n        if s[i..i + substring.len()] == *substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let mut num_list: Vec<_> = numbers\n       .split(\" \")\n       .filter(|x| [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n           .contains(x))\n       .collect();\n    num_list.sort_unstable();\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_unstable();\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().fold(f64::INFINITY, |acc, x| acc.min(*x));\n    let max_num = numbers.iter().fold(f64::NEG_INFINITY, |acc, x| acc.max(*x));\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|x| (*x - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.into_iter()\n       .filter_map(|x| x.downcast_ref::<i32>())\n       .map(|x| *x)\n       .collect()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in (2..=n).rev() {\n        if n % i == 0 {\n            return i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    numbers.into_iter().unique().collect()\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    s.chars().map(|c| if c.is_ascii_alphabetic() {\n        if c.is_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }\n    } else { c }).collect()\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.join(\"\")\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.starts_with(prefix_str)).cloned().collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&&x| x > 0).copied().collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for (i, &x_i) in xs.iter().enumerate() {\n        res += x_i as f64 * x.powi(i as i32);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l.clone();\n    sorted_third.sort_unstable_by(|a, b| a.cmp(b));\n    sorted_third.chunks(3).map(|c| c[0]).collect()\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().cloned().collect::<HashSet<_>>().into_iter().collect()\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    l.iter().max().copied().unwrap_or(0)\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += format!(\"{}\", i).chars().filter(|c| c == &'7').count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l.clone();\n    sorted_even.sort_unstable_by(|a, b| a.cmp(b));\n    let mut result = vec![];\n    for (i, e) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i / 2]);\n        } else {\n            result.push(*e);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i + 1..i + 3]);\n            result.push(s.chars().nth(i).unwrap());\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n            for k in j+1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&i| i + 1).collect()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    for num in l {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = vec![];\n    let mut n = x;\n    while n > 0 {\n        digits.push(n % bas);\n        n /= bas;\n    }\n    digits.into_iter().rev().collect()\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    for _ in 0..n {\n        let d = a + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    c\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_unstable();\n    if l.len() % 2!= 0 {\n        sl[l.len() / 2]\n    } else {\n        (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    txt.chars().rev().eq(txt.chars())\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    s.chars().map(|c| ((c as u8 - b'a' + 5) % 26 + b'a') as char).collect()\n}\npub fn decode_shift(s: &String) -> String {\n    s.chars().map(|c| ((c as u8 - b'a' + 21) % 26 + b'a') as char).collect()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    txt.chars().filter(|c|!vowels.contains(*c)).collect()\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|x| x < &t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &str, s1: &str) -> bool {\n    s0.chars().collect::<HashSet<_>>() == s1.chars().collect::<HashSet<_>>()\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    match n {\n        0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    l.windows(2).all(|w| w[0] <= w[1])\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    l1.iter().filter(|&&x| l2.contains(&x)).copied().collect()\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (0..=n).sum()\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    xs.iter().enumerate().map(|(i, x)| x * i as i32).collect()\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let (mut a, mut b, mut c) = (0, 0, 1);\n    while n > 2 {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\".chars().collect::<Vec<_>>();\n    let mut cnt = 0;\n    for c in s.chars() {\n        if vowels.contains(&c.to_lowercase().next().unwrap()) || (c == 'y' && s.ends_with(\"y\")) {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        x_str.chars().rev().collect()\n    } else {\n        let mut result = String::new();\n        result.push_str(&x_str[shift as usize..]);\n        result.push_str(&x_str[..shift as usize]);\n        result\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_ascii_digit()).map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words: Vec<&str> = s.split(' ').collect();\n    let apples = words.iter().position(|&w| w == \"apples\").unwrap() as i32 - 1;\n    let oranges = words.iter().position(|&w| w == \"oranges\").unwrap() as i32 - 1;\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = arr.iter().filter(|&&n| n % 2 == 0).copied().collect::<Vec<_>>();\n    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    let index = arr.iter().position(|&n| n == *min_even).unwrap();\n    vec![*min_even, index as i32]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = std::collections::HashMap::new();\n    for n in lst {\n        *freqs.entry(*n).or_insert(0) += 1;\n    }\n    freqs.into_iter().find(|(k, v)| *k == *v).map(|(k, _)| k).unwrap_or(-1)\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut result = vec![];\n    let mut left = 0;\n    let mut right = lst.len() - 1;\n    while left <= right {\n        result.push(lst[left]);\n        left += 1;\n        if left <= right {\n            result.push(lst[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        s * (s - a) * (s - b) * (s - c).sqrt() / 4.0\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        if q[i]!= q[j] {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    q.iter().sum::<i32>() <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i]!= arr[arr.len() - 1 - i] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    if lst1.len() * lst1.iter().map(|s| s.len()).sum::<usize>() <= lst2.len() * lst2.iter().map(|s| s.len()).sum::<usize>() {\n        lst1.clone()\n    } else {\n        lst2.clone()\n    }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    a.abs() == (a.powi(3)).sqrt() as i32\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    num.chars().filter(|c| [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].contains(c)).count() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{}db\", dec.to_string(2))\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    let mut n = s.clone();\n    while!seen.contains(&n) {\n        seen.insert(n.clone());\n        n = n.chars().fold(String::new(), |mut acc, c| {\n            acc.push(c.to_digit(10).unwrap() as u8);\n            acc\n        });\n        if n.is_empty() {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    grades.iter().map(|g| {\n        match *g as f64 {\n            g if g >= 4.0 => \"A+\".to_string(),\n            g if g >= 3.7 => \"A\".to_string(),\n            g if g >= 3.3 => \"A-\".to_string(),\n            g if g >= 3.0 => \"B+\".to_string(),\n            g if g >= 2.7 => \"B\".to_string(),\n            g if g >= 2.3 => \"B-\".to_string(),\n            g if g >= 2.0 => \"C+\".to_string(),\n            g if g >= 1.7 => \"C\".to_string(),\n            g if g >= 1.3 => \"C-\".to_string(),\n            g if g >= 1.0 => \"D+\".to_string(),\n            g if g >= 0.7 => \"D\".to_string(),\n            g if g >= 0.0 => \"D-\".to_string(),\n            _ => \"E\".to_string(),\n        }\n    }).collect()\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len() as f64;\n    if length < 2.0 {\n        return false;\n    }\n    for i in 2..(length.sqrt() as u64 + 1) {\n        if length % i as f64 == 0.0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        1\n    } else {\n        2 * 9 * 10.pow(n as u32 - 2)\n    }\n}\n",
            "pub fn solve(n: i32) -> String {\n    n.to_string().chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap() as i32).to_string()\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 == 1 && *i % 2 == 0).map(|(_, x)| x).sum()\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let words = s.split(\" \")\n       .map(|word| word.chars().sorted().collect::<String>())\n       .collect::<Vec<_>>();\n    words.join(\" \")\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut result = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, val) in row.iter().enumerate() {\n            if *val == x {\n                result.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n        a[0].cmp(&b[0])\n           .then_with(|| a[1].cmp(&b[1]))\n    });\n    result\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    if (sorted_arr[0] + sorted_arr[sorted_arr.len() - 1]) % 2 == 0 {\n        sorted_arr.reverse();\n    }\n    sorted_arr\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    s.chars().map(|c| {\n        let shift = 4;\n        let mut new_c = c as u8;\n        if c as u8 >= b'a' && c as u8 <= b'z' {\n            new_c += shift;\n            if new_c > b'z' {\n                new_c -= 26;\n            }\n        } else if c as u8 >= b'A' && c as u8 <= b'Z' {\n            new_c += shift;\n            if new_c > b'Z' {\n                new_c -= 26;\n            }\n        }\n        new_c as char\n    }).collect()\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = lst.clone();\n    sl.sort_unstable();\n    sl.dedup();\n    if sl.len() < 2 {\n        return None;\n    }\n    Some(sl[1])\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let re = Regex::new(r\"[.!?]\\s*\").unwrap();\n    let sentences = re.split(s);\n    sentences.iter().filter(|s| s.len() >= 2).map(|s| s.starts_with(\"I \")).count() as i32\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(x), Some(y), Some(z)) = (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        return (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() {\n                ch.to_ascii_uppercase()\n            } else {\n                ch.to_ascii_lowercase()\n            };\n            if vowels.contains(ch1) {\n                result.push(ch1.chars().nth(0).unwrap());\n                result.push_str(\"z\");\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes = lst.iter().filter(|&&n| is_prime(n)).collect::<Vec<_>>();\n    if primes.is_empty() {\n        return 0;\n    }\n    let largest = primes.iter().max().unwrap().to_string();\n    largest.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    return d.values().all(|v| v.chars().all(|c| c.is_lowercase())) || d.values().all(|v| v.chars().all(|c| c.is_uppercase()));\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    (2..n).filter(|&x| (2..(x as f64).sqrt() as i32 + 1).all(|y| x % y!= 0)).collect()\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    let mut result = 0;\n    let mut a = a.abs();\n    let mut b = b.abs();\n    while a > 0 || b > 0 {\n        if a % 10 > 0 && b % 10 > 0 {\n            result += 1;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    result\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    s.chars()\n       .enumerate()\n       .filter(|(i, c)| i % 2 == 0 && vowels.contains(c))\n       .count() as i32\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    value.parse::<f64>().unwrap().round() as i32\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect()\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let re = Regex::new(r\"[, ]\").unwrap();\n    re.split(s)\n       .filter(|w|!w.is_empty())\n       .map(|w| w.to_string())\n       .collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    if x!= y {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2 + 1;\n    Some(format!(\"{:b}\", r_avg))\n}\n",
            "pub fn all_digits_odd(s: &str) -> bool {\n    s.chars().all(|c| c.to_digit(10).unwrap() % 2!= 0)\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter().filter(|&&n| all_digits_odd(&n.to_string())).copied().collect()\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let filtered_arr = arr.iter().filter(|x| **x >= 1 && **x <= 9).collect::<Vec<_>>();\n    let mut sorted_arr = filtered_arr.clone();\n    sorted_arr.sort_unstable_by(|a, b| b.cmp(a));\n    sorted_arr.iter().map(|x| digit_names[*x as usize - 1].to_string()).collect()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    (1..=n).map(|i| if i % 2!= 0 {\n        (1..=i).sum()\n    } else {\n        (1..=i).fold(1, |acc, x| acc * x)\n    }).collect()\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt.chars().eq(txt.chars().rev())\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[i % 2] += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    n.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&&n| digits_sum(n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i..].eq(&sorted_arr[..arr.len() - i]) && arr[..i].eq(&sorted_arr[arr.len() - i..]) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_count = lst1.iter().filter(|&&x| x % 2!= 0).count();\n    let even_count = lst2.iter().filter(|&&x| x % 2 == 0).count();\n    if even_count >= odd_count {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String,i32> {\n    let mut freq = HashMap::new();\n    for w in test.split(\" \") {\n        let count = freq.entry(w.to_string()).or_insert(0);\n        *count += 1;\n    }\n    let max_count = freq.values().max().unwrap_or(&0);\n    freq.into_iter().filter(|(_, count)| count == max_count).collect()\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let mut s1 = String::new();\n    for ch in s.chars() {\n        if!c.contains(ch) {\n            s1.push(ch);\n        }\n    }\n    vec![s1, if s1.chars().eq(s1.chars().rev()) { \"yes\" } else { \"no\" }]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    lst.iter().map(|s| s.chars().filter(|c| c.is_digit(10)).count().to_string()).collect()\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = cur_sum.checked_add(*n).unwrap_or(i32::MAX);\n        min_sum = min_sum.min(cur_sum);\n        if min_sum == cur_sum {\n            break;\n        }\n    }\n    if min_sum == 0 {\n        *nums.iter().min().unwrap()\n    } else {\n        min_sum\n    }\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    let mut result = 0;\n    for row in grid {\n        let mut current_row_capacity = capacity;\n        for cell in row {\n            let cell_volume = (cell as f64 * PI * PI).sqrt() as i32;\n            current_row_capacity = min(current_row_capacity, cell_volume);\n        }\n        result += capacity - current_row_capacity;\n    }\n    result\n}\n",
            "pub fn count_ones(num: i32) -> i32 {\n    let mut count = 0;\n    let mut n = num;\n    while n > 0 {\n        if n % 2 == 1 {\n            count += 1;\n        }\n        n = n >> 1;\n    }\n    count\n}\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    arr.clone()\n       .into_iter()\n       .sorted_by(|a, b| count_ones(a).cmp(&count_ones(b)))\n       .collect()\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let words: Vec<&str> = s.split(\" \").collect();\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    words\n       .into_iter()\n       .filter(|w| w.chars().filter(|c| c.is_lowercase()).filter(|c| consonants.contains(*c)).count() == n as usize)\n       .map(|w| w.to_string())\n       .collect()\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (0..word.len() - 2).rev() {\n        if word.chars().nth(i).unwrap() in vowels.chars()\n            && word.chars().nth(i + 1).unwrap()!= 'a'\n            && word.chars().nth(i + 1).unwrap()!= 'e'\n            && word.chars().nth(i + 1).unwrap()!= 'i'\n            && word.chars().nth(i + 1).unwrap()!= 'o'\n            && word.chars().nth(i + 1).unwrap()!= 'u'\n            && word.chars().nth(i + 1).unwrap()!= 'A'\n            && word.chars().nth(i + 1).unwrap()!= 'E'\n            && word.chars().nth(i + 1).unwrap()!= 'I'\n            && word.chars().nth(i + 1).unwrap()!= 'O'\n            && word.chars().nth(i + 1).unwrap()!= 'U'\n        {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    String::new()\n}\n",
            "pub fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = format!(\"{}{}\", lst[0], lst[1]);\n    let s2 = format!(\"{}{}\", lst[1], lst[0]);\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    arr.iter().cloned().sorted().rev().take(k as usize).collect()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0 && **i % 2!= 0).map(|(_, x)| x).sum()\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    arr.iter().take(k as usize).filter(|n| n.to_string().len() <= 2).sum()\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n!= 1 {\n        if n % 2!= 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort_unstable();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if!date.len() == 10 ||!date.chars().nth(2).unwrap() == \"-\" ||!date.chars().nth(5).unwrap() == \"-\" {\n        return false;\n    }\n    let m = date[..2].parse::<i32>().unwrap();\n    let d = date[3..5].parse::<i32>().unwrap();\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true;\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(\" \") {\n        txt.split(\" \").map(|s| s.to_string()).collect()\n    } else if txt.contains(\",\") {\n        txt.split(\",\").map(|s| s.to_string()).collect()\n    } else {\n        vec![txt.chars().filter(|c| c.is_lowercase() && c.to_digit(10).is_none()).count().to_string()]\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    for i in 1..lst.len() {\n        if lst[i - 1] > lst[i] {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let negatives = arr.iter().filter(|&&x| x < 0).count();\n    let sign = if negatives % 2 == 1 { -1 } else { 1 };\n    Some(sign * arr.iter().map(|&x| x.abs()).sum::<i32>())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i > 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j > 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i < n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j < n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = temp.into_iter().min().unwrap_or(min_val);\n            }\n        }\n    }\n    (0..k).map(|i| if i % 2 == 0 { 1 } else { min_val }).collect()\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut n = n;\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 % 2 == 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = vec![];\n    let mut close_idx = vec![];\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter().map(|&n| (n.ceil() as i32).pow(2)).sum()\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if let Some(index) = txt.rfind(' ') {\n        if let Some(last) = txt.get(index + 1..) {\n            return last.chars().count() == 1 && last.chars().next().unwrap().is_ascii_alphabetic();\n        }\n    }\n    false\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx = 0;\n    while idx < arr.len() - 1 {\n        if arr[idx] > arr[idx + 1] {\n            return idx as i32;\n        }\n        idx += 1;\n    }\n    -1\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = vec![];\n    let mut pos = vec![];\n    for i in lst {\n        if i < &0 {\n            neg.push(*i);\n        } else {\n            pos.push(*i);\n        }\n    }\n    let max_neg = if neg.is_empty() {\n        None\n    } else {\n        Some(neg.iter().max().unwrap().clone())\n    };\n    let min_pos = if pos.is_empty() {\n        None\n    } else {\n        Some(pos.iter().min().unwrap().clone())\n    };\n    vec![max_neg, min_pos]\n}\n",
            "pub fn any_to_real(o: &Box<dyn Any>) -> Result<f64, &'static str> {\n    if let Some(s) = o.downcast_ref::<String>() {\n        s.replace(\",\", \".\")\n           .parse()\n           .map_err(|_| \"Failed to parse string as f64\")\n    } else if let Some(i) = o.downcast_ref::<i64>() {\n        Ok(*i as f64)\n    } else if let Some(f) = o.downcast_ref::<f64>() {\n        Ok(*f)\n    } else {\n        Err(\"Failed to convert Any to f64\")\n    }\n}\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    any_to_real(a).and_then(|a| any_to_real(b).map(|b| if a == b {\n        None\n    } else if a > b {\n        Some(a)\n    } else {\n        Some(b)\n    }))\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    (1..=n).fold(1, |acc, x| acc * x)\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    Regex::new(r\"\\s{3,}\").unwrap().replace_all(txt, \"-\").replace(\" \", \"_\").to_string()\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let mut parts = file_name.split(\".\");\n    if parts.clone().count()!= 2 {\n        return \"No\".to_string();\n    }\n    let ext = parts.next().unwrap().to_lowercase();\n    let name = parts.next().unwrap();\n    if ext!= \"txt\" && ext!= \"exe\" && ext!= \"dll\" {\n        return \"No\".to_string();\n    }\n    if name.len() == 0 ||!name.chars().next().unwrap().is_ascii_alphabetic() {\n        return \"No\".to_string();\n    }\n    if name.chars().filter(|c| c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += x * x;\n        } else if i % 4 == 0 {\n            result += x * x * x;\n        } else {\n            result += *x;\n        }\n    }\n    result\n}\n",
            "fn is_prime(n: usize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as usize + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\nfn words_in_sentence(sentence: &str) -> String {\n    let words = sentence.split(\" \").collect::<Vec<_>>();\n    words.iter().filter(|w| is_prime(w.len())).map(|w| w.to_string()).collect::<Vec<_>>().join(\" \")\n}\nfn main() -> Result<(), Box<dyn Error>> {\n    let sentence = \"This is a sentence with 3 words and 4 letters in the first word and 5 letters in the second word\";\n    let result = words_in_sentence(sentence);\n    println!(\"{}\", result);\n    Ok(())\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let x_split: Vec<&str> = x.split(\"/\").collect();\n    let n_split: Vec<&str> = n.split(\"/\").collect();\n    let numerator = x_split[0].parse::<i32>().unwrap() * n_split[0].parse::<i32>().unwrap();\n    let denominator = x_split[1].parse::<i32>().unwrap() * n_split[1].parse::<i32>().unwrap();\n    numerator % denominator == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    n.to_string()\n       .chars()\n       .map(|c| c.to_digit(10).unwrap() as i32)\n       .sum()\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    nums.clone()\n       .into_iter()\n       .sorted_by(|a, b| digits_sum(*b).cmp(&digits_sum(*a)))\n       .collect()\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    nums.iter().filter(|&&n| n > 10 && n % 2 == 1 && n.to_string().chars().next().unwrap() as u8 as char == odds.chars().next().unwrap()).count() as i32\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if!names.contains(planet1) ||!names.contains(planet2) {\n        return vec![];\n    }\n    let l = names.iter().position(|x| x == planet1).unwrap();\n    let r = names.iter().position(|x| x == planet2).unwrap();\n    if l > r {\n        return bf(planet2, planet1);\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l + 1..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result = vec![];\n    for s in lst {\n        if s.len() % 2 == 0 {\n            result.push(s.clone());\n        }\n    }\n    result.sort_unstable_by(|a, b| a.len().cmp(&b.len()).then(a.cmp(b)));\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter().filter(|&&n| n >= 0.0 && n % 2.0 == 1.0).map(|&n| n * n).sum()\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess).map(|(x, y)| (x - y).abs()).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = 0;\n    let mut max_ext = String::new();\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        let mut reversed = b.chars().rev().collect::<String>();\n        reversed.truncate(i);\n        if reversed.chars().chain(b.chars()).chain(reversed.chars().rev()).collect::<String>().contains(a) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let mut ds = num.to_string().chars().collect::<Vec<_>>();\n    ds.sort_unstable();\n    let mut even = 0;\n    let mut odd = 0;\n    for d in ds {\n        if d.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    vec![even, odd]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    for (i, &value) in values.iter().enumerate() {\n        while num >= value {\n            res.push_str(numerals[i]);\n            num -= value;\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let sides = vec![a, b, c];\n    sides.sort_unstable();\n    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_count = 0;\n    let mut max_word = String::new();\n    let mut word_counts = HashMap::new();\n    for word in words {\n        let count = word_counts.entry(word).or_insert(0);\n        *count += 1;\n        if *count > max_count {\n            max_count = *count;\n            max_word = word.clone();\n        }\n    }\n    max_word\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\".to_string() {\n            nums[i] = nums[i].pow(nums[i + 1] as u32);\n            nums.remove(i + 1);\n            ops.remove(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\".to_string() {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"//\".to_string() {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\".to_string() {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"-\".to_string() {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_alphabetic() {\n            result.push(if ch.is_lowercase() { ch.to_ascii_uppercase() } else { ch.to_ascii_lowercase() });\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input_str(txt);\n    Some(hasher.result_str())\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = std::cmp::max(2, std::cmp::min(a, b));\n    let upper = std::cmp::min(8, std::cmp::max(a, b));\n    (lower..upper+1).filter(|x| x % 2 == 0).collect()\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    numbers.combinations(2).exists { case Seq(a, b) => math.abs(a - b) < threshold }\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = new ArrayBuffer[String]()\n    val stk = new ArrayBuffer[Char]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == '(') {\n            stk.append(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.remove(stk.length - 1)\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - math.floor(num)\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    operations.foldLeft(0) { (balance, op) => balance + op } < 0\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => math.abs(x - mean)).sum\n    deviation / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    numbers.flatMap(n => Seq(delimiter, n)).drop(1)\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    val parenGroups = parenString.split(\" \")\n    for (group <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = Math.max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n        }\n        result.append(maxDepth)\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(s => s.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.product\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    numbers.scanLeft(Int.MinValue)(_ max _).tail\n}\n",
            "def makePalindrome(s: String): String = {\n    if (s.reverse == s) s else {\n        val i = s.indexWhere(c => s.drop(i).reverse == s.drop(i))\n        if (i!= -1) s + s.drop(i).reverse else \"\"\n    }\n}\n",
            "def stringXor(a: String, b: String): String = {\n    a.zip(b).map { case (x, y) => (x ^ y).toString }.mkString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) {\n        None\n    } else {\n        Some(strs.maxBy(_.length))\n    }\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    @tailrec\n    def loop(n: Int, m: Int): Int = {\n        if (m == 0) n else loop(m, n % m)\n    }\n    loop(a, b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    (0 to s.length).map(i => s.take(i))\n}\n",
            "def stringSequence(n: Int): String = {\n    (1 to n).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    musicString.split(\" \").map(durations)\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\n        \"zero\" -> \"0\",\n        \"one\" -> \"1\",\n        \"two\" -> \"2\",\n        \"three\" -> \"3\",\n        \"four\" -> \"4\",\n        \"five\" -> \"5\",\n        \"six\" -> \"6\",\n        \"seven\" -> \"7\",\n        \"eight\" -> \"8\",\n        \"nine\" -> \"9\"\n    )\n    val numList = numbers.split(\" \").filter(numDict.contains)\n    numList.sorted.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    numbers.sorted.sliding(2).map { case Seq(a, b) => (a, b) }.reduceOption { case ((a1, b1), (a2, b2)) =>\n        val diff = b1 - a1\n        if (diff < 0) (a2, b2) else (a1, b1)\n    }.map { case (a, b) => Seq(a, b) }.getOrElse(Seq.empty)\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        Seq.fill(numbers.length)(0.0)\n    } else {\n        numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter(x => x.isInstanceOf[Int]).map(_.asInstanceOf[Int])\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) return n / i\n        i += 1\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    val factors = mutable.ListBuffer[Int]()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.toSeq\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    numbers.distinct\n}\n",
            "def flipCase(s: String): String = {\n    s.map {\n        case c if c.isLetter => if (c.isLower) c.toUpper else c.toLower\n        case c => c\n    }\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else (2 to math.sqrt(n).toInt).forall(i => n % i!= 0)\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    xs.zipWithIndex.map { case (coeff, power) => coeff * Math.pow(x, power) }.sum\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.sorted.grouped(3).map(_.head).toSeq\n    l.zipWithIndex.map { case (elem, index) => if (index % 3 == 0) sortedThird(index // 3) else elem }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) 0 else l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 1 to n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(_ == '7')\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(i => i % 2 == 0).sorted\n    l.indices.map(i => if (i % 2 == 0) sortedEven(i / 2) else l(i)).toSeq\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = new StringBuilder\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i))\n        } else {\n            result.append(s.substring(i + 1, i + 3))\n            result.append(s.charAt(i))\n        }\n    }\n    result.toString\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        var i = 2\n        while (i <= math.sqrt(n).toInt) {\n            if (n % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\ndef primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) cnt += 1\n    }\n    f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    l.combinations(3).exists { case Seq(a, b, c) => a + b + c == 0 }\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n * n\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(_ + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = scala.collection.mutable.Set.empty[Int]\n    for (num <- l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    val digits = new StringBuilder\n    while (x > 0) {\n        digits.append(x % bas)\n        x /= bas\n    }\n    digits.reverse.toString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    a.toDouble * h.toDouble / 2\n}\n",
            "def fib4(n: Int): Int = {\n    var fib = Array(0, 0, 2, 0)\n    for (i <- 4 to n) {\n        fib(i % 4) = fib(i % 4) + fib((i - 1) % 4)\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sortedL = l.sorted\n    if (l.length % 2!= 0) {\n        sortedL(l.length / 2)\n    } else {\n        (sortedL(l.length / 2) + sortedL(l.length / 2 - 1)) / 2\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (_ <- 1 to n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    s.map(c => (c.toInt - 97 + 5) % 26 + 97).map(_.toChar).mkString\n}\ndef decodeShift(s: String): String = {\n    s.map(c => (c.toInt - 97 + 21) % 26 + 97).map(_.toChar).mkString\n}\n",
            "def removeVowels(txt: String): String = {\n    txt.filterNot(c => \"aeiouAEIOU\".contains(c))\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(_ < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"<\") {\n            depth += 1\n        } else if (b == \">\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    l.sliding(2).forall { case Seq(x, y) => x <= y }\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    l1.toSet.intersect(l2.toSet).toSeq.sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    (n + 1) * n / 2\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"(\") {\n            depth += 1\n        } else if (b == \")\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.map { case (x, i) => x * i }\n}\n",
            "def fibfib(n: Int): Int = {\n    @tailrec\n    def loop(a: Int, b: Int, c: Int, i: Int): Int = {\n        if (i >= n) c\n        else loop(b, c, a + b + c, i + 1)\n    }\n    loop(0, 0, 1, 0)\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (s.charAt(i).isLower && vowels.contains(s.charAt(i))) {\n            cnt += 1\n        } else if (i == s.length - 1 && s.charAt(i).isLower && s.charAt(i) == 'y') {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) {\n        xStr.reverse\n    } else {\n        xStr.takeRight(shift) + xStr.dropRight(shift)\n    }\n}\n",
            "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.toInt).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \")\n    val apples = words.indexOf(\"apples\") match {\n        case -1 => 0\n        case i => words(i - 1).toInt\n    }\n    val oranges = words.indexOf(\"oranges\") match {\n        case -1 => 0\n        case i => words(i - 1).toInt\n    }\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(_ % 2 == 0)\n    if (evens.isEmpty) {\n        Seq.empty\n    } else {\n        val minEven = evens.min\n        Seq(minEven, arr.indexOf(minEven))\n    }\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = lst.groupBy(identity).mapValues(_.length)\n    val goodVals = freqs.filter { case (k, v) => v >= k }.keys\n    goodVals.max\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = Seq.newBuilder[Int]\n    var left = 0\n    var right = sl.length - 1\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.result()\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    val isPalindrome = q.indices.forall(i => q(i) == q.lastIndex - i)\n    val total = q.sum\n    isPalindrome && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    arr.zip(arr.reverse).count { case (a, b) => a!= b }\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    if (lst1.map(_.length).sum <= lst2.map(_.length).sum) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    var cnt = 0\n    for (i <- 2 to math.sqrt(a).toInt) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    cnt == 3\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else (2 to math.sqrt(n).toInt).forall(i => n % i!= 0)\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) return x == n\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    tmp == x\n}\n",
            "def isCube(a: Int): Boolean = {\n    val root = Math.cbrt(Math.abs(a))\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(_ == '2') + num.count(_ == '3') + num.count(_ == '5') + num.count(_ == '7') + num.count(_ == 'B') + num.count(_ == 'D')\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = java.lang.Integer.toBinaryString(dec)\n    s\"db$binary$binary\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    if (s.length < 3) return false\n    for (i <- 0 until s.length - 2) {\n        if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) return false\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    grades.map { grade =>\n        if (grade == 4.0) \"A+\"\n        else if (grade > 3.7) \"A\"\n        else if (grade > 3.3) \"A-\"\n        else if (grade > 3.0) \"B+\"\n        else if (grade > 2.7) \"B\"\n        else if (grade > 2.3) \"B-\"\n        else if (grade > 2.0) \"C+\"\n        else if (grade > 1.7) \"C\"\n        else if (grade > 1.3) \"C-\"\n        else if (grade > 1.0) \"D+\"\n        else if (grade > 0.7) \"D\"\n        else if (grade > 0.0) \"D-\"\n        else \"E\"\n    }\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) false\n    else {\n        val sqrtLength = math.sqrt(length).toInt + 1\n        var i = 2\n        while (i < sqrtLength) {\n            if (length % i == 0) return false\n            i += 1\n        }\n        true\n    }\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10.pow(n - 2).toInt)\n}\n",
            "def solve(n: Int): String = {\n    n.toString.map(_.asDigit).sum.toString\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    lst.filter(i => i % 2 == 1 && i % 2 == 0).map(i => i).sum\n}\n",
            "def antiShuffle(s: String): String = {\n    s.split(\" \").map(_.sorted).mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = for {\n        (row, rowIndex) <- lst.zipWithIndex\n        (value, colIndex) <- row.zipWithIndex\n        if value == x\n    } yield (rowIndex, colIndex)\n    coords.sortBy { case (row, col) => (row, -col) }\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) Seq.empty\n    else if (arr.head + arr.last) % 2 == 0 then arr.sorted.reverse\n    else arr.sorted\n}\n",
            "def encrypt(s: String): String = {\n    s.map { ch =>\n        val shifted = ch.toInt + 4\n        if (shifted > 'z'.toInt) shifted - 26 else shifted\n    }.mkString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    lst.sorted.drop(1).headOption\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = s.split(\"[.!?]\\\\s*\").filter(_.length >= 2)\n    sentences.count(sentence => sentence.take(2) == \"I \")\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] &&\n    (x.asInstanceOf[Int] + y.asInstanceOf[Int] == z.asInstanceOf[Int] ||\n    x.asInstanceOf[Int] + z.asInstanceOf[Int] == y.asInstanceOf[Int] ||\n    y.asInstanceOf[Int] + z.asInstanceOf[Int] == x.asInstanceOf[Int])\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    message.map { ch =>\n        if (ch.isLetter) {\n            val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (vowels.contains(ch1)) {\n                (ch1 + 2).toChar\n            } else {\n                ch1\n            }\n        } else {\n            ch\n        }\n    }.mkString\n}\n",
            "def skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(n => isPrime(n))\n    if (primes.isEmpty) 0 else primes.map(n => n.toString.toInt).max.sum\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else (2 to math.sqrt(n).toInt).forall(i => n % i!= 0)\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) {\n        return false\n    }\n    val lowerCase = d.forall { case (k, _) => k.forall(_.isLower) }\n    val upperCase = d.forall { case (k, _) => k.forall(_.isUpper) }\n    lowerCase || upperCase\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    val primes = collection.mutable.ListBuffer[Int]()\n    for (num <- 2 to n) {\n        if (primes.forall(num % _!= 0)) {\n            primes += num\n        }\n    }\n    primes\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    val absA = math.abs(a)\n    val absB = math.abs(b)\n    val result = (absA % 10) * (absB % 10)\n    if (a < 0 && b < 0 || a > 0 && b > 0) result else -result\n}\n",
            "def countUpper(s: String): Int = {\n    s.filter(c => c.isUpper && (s.indexOf(c) % 2 == 0)).length\n}\n",
            "def closestInteger(value: String): Int = {\n    value.toDouble.round.toInt\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (0 until n).map(i => n + 2 * i)\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    s.split(\"[, ]\").filter(_.nonEmpty)\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1\n    else if (y % 2 == 0) y\n    else if (x!= y) y - 1\n    else -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        None\n    } else {\n        Some((m + n) / 2 + 0.5).map(avg => Integer.toBinaryString(avg.toInt))\n    }\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(num => num.toString.forall(digit => Character.digit(digit, 10) % 2!= 0)).sorted\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted.reverse\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    nums.map { i =>\n        if (i % 2!= 0) nums.take(i).sum\n        else nums.take(i).product\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\ndef evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array.fill(2)(0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt.toSeq\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    arr.count(n => n.toString.map(_.asDigit).sum > 0)\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    arr.sorted.sliding(arr.length).exists {\n        case Seq(first, second, _*) if first == second => true\n        case _ => false\n    }\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCount = lst1.count(_ % 2!= 0)\n    val evenCount = lst2.count(_ % 2 == 0)\n    if (evenCount >= oddCount) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = test.split(\" \").foldLeft(Map.empty[String,Int]) { (acc, word) =>\n        acc.updated(word, acc.getOrElse(word, 0) + 1)\n    }\n    val maxFreq = freq.values.max\n    freq.filter { case (_, count) => count == maxFreq }\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    Seq(s1, if (s1.reverse == s1) \"yes\" else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    lst.map { num =>\n        val n = num.map(_.toInt).count(_ % 2 == 1)\n        s\"the number of odd elements in the string $n of the input.\"\n    }\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = math.min(curSum + n, 0)\n        minSum = math.min(curSum, minSum)\n    }\n    if (minSum == 0) minSum = nums.min\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(row => ceil(row.sum.toDouble / capacity)).sum\n}\n",
            "def countOnes(num: Int): Int = {\n    Integer.bitCount(num)\n}\ndef sortArray(arr: Seq[Int]): Seq[Int] = {\n    arr.sortBy(num => (countOnes(num), num))\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(_.nonEmpty)\n    words.filter(w => w.count(c => c.isLower && consonants.contains(c)) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- word.length - 2 to 1 by -1) {\n        if (word(i) == vowels(0) && word(i - 1)!= vowels(0) && word(i + 1)!= vowels(0)) {\n            return word(i)\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst.head + lst.tail.head\n    val s2 = lst.tail.head + lst.head\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == \"(\") depth += 1\n        else depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    arr.sorted.reverse.take(k)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter { case (_, i) => i % 2 == 0 && _ % 2!= 0 }.map { case (_, x) => x }.sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    arr.take(k).filter(n => n.toString.length <= 2).sum\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    val collatz = collection.mutable.ListBuffer[Int]()\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    val pattern = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n    date match {\n        case pattern(month, day, year) =>\n            val m = month.toInt\n            val d = day.toInt\n            val y = year.toInt\n            if (m == 2 && d > 29) return false\n            if (m == 2 && d == 29 &&!isLeapYear(y)) return false\n            if (m > 2 && d > 30) return false\n            if (m in List(4, 6, 9, 11) && d > 30) return false\n            true\n        case _ => false\n    }\n}\ndef isLeapYear(year: Int): Boolean = {\n    if (year % 400 == 0) return true\n    if (year % 100 == 0) return false\n    if (year % 4 == 0) return true\n    false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        Seq(txt.count(_ => _.isLower && _.toInt % 2 == 0).toString)\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    lst.sliding(2).forall { case Seq(a, b) => a <= b }\n}\n",
            "def intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0) {\n        \"YES\"\n    } else {\n        \"NO\"\n    }\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) {\n        None\n    } else if (arr.contains(0)) {\n        Some(0)\n    } else {\n        val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n        Some(sign * arr.map(math.abs).sum)\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    val minVal = n * n + 1\n    for {\n        i <- 0 until n\n        j <- 0 until n\n        if grid(i)(j) == 1\n    } {\n        val temp = Seq.newBuilder[Int]\n        if (i > 0) temp += grid(i - 1)(j)\n        if (j > 0) temp += grid(i)(j - 1)\n        if (i < n - 1) temp += grid(i + 1)(j)\n        if (j < n - 1) temp += grid(i)(j + 1)\n        minVal = temp.result().min\n    }\n    (0 until k).map { i => if (i % 2 == 0) 1 else minVal }\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) Seq(1)\n    else {\n        val seq = Seq.newBuilder[Int]\n        seq += 1\n        seq += 3\n        for (i <- 2 until n) {\n            if (i % 2 == 0) seq += i / 2 + 1\n            else seq += seq(i - 1) + seq(i - 2) + (i + 3) / 2\n        }\n        seq.result()\n    }\n}\n",
            "def digits(n: Int): Int = {\n    val odds = n.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 == 1)\n    if (odds.nonEmpty) odds.product else 0\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIndices = s.indices.filter(i => s(i) == '[').toList\n    val closeIndices = s.indices.filter(i => s(i) == ']').toList\n    if (openIndices.isEmpty || closeIndices.isEmpty) {\n        false\n    } else {\n        val stack = new scala.collection.mutable.Stack[Int]\n        for (open <- openIndices) {\n            if (closeIndices.contains(open)) {\n                stack.push(open)\n            } else {\n                while (!stack.isEmpty && s(stack.top)!= '[') {\n                    stack.pop()\n                }\n                if (stack.isEmpty) {\n                    return false\n                }\n            }\n        }\n        while (!stack.isEmpty) {\n            if (s(stack.top) == '[') {\n                return false\n            }\n            stack.pop()\n        }\n        true\n    }\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => math.pow(math.ceil(n), 2)).sum.toInt\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(\" \") + 1)\n    return last.length() == 1 && last.head.isLetter\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    arr.zipWithIndex.find { case (value, index) => value < arr(index - 1) } match {\n        case Some((value, index)) => index\n        case None => -1\n    }\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val negatives = lst.filter(_ < 0)\n    val positives = lst.filter(_ > 0)\n    val maxNegative = if (negatives.nonEmpty) Some(negatives.max) else None\n    val minPositive = if (positives.nonEmpty) Some(positives.min) else None\n    Seq(maxNegative, minPositive)\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    try {\n        val a1 = a.toString.replace(\",\", \".\").toDouble\n        val b1 = b.toString.replace(\",\", \".\").toDouble\n        if (a1 == b1) None\n        else if (a1 > b1) Some(a1)\n        else Some(b1)\n    } catch {\n        case _: Exception => None\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact = fact * i\n        result = result * fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = List(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split('.')\n    if (lst.length!= 2 ||!suf.contains(lst(1)) || lst(0).length == 0 ||!lst(0).head.isLetter || lst(0).exists(_.isDigit)) {\n        \"No\"\n    } else {\n        \"Yes\"\n    }\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.map { case (x, i) => if (i % 3 == 0) x * x else if (i % 4 == 0) x * x * x else x }.sum\n}\n",
            "def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    words.filter(w => isPrime(w.length)).mkString(\" \")\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else (2 to math.sqrt(n).toInt).forall(i => n % i!= 0)\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(n => n.toString.map(_.asDigit).sum)\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    nums.count { n =>\n        n > 10 && n % 2 == 1 && n.toString.head.toString.toInt % 2 == 1\n    }\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array.fill(3)(0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c((a % 3).toInt) += 1\n    }\n    c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) / 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) ||!names.contains(planet2)) {\n        Seq.empty\n    } else {\n        val l = names.indexOf(planet1)\n        val r = names.indexOf(planet2)\n        if (l > r) {\n            bf(planet2, planet1)\n        } else if (l == r) {\n            Seq.empty\n        } else {\n            names.slice(l + 1, r)\n        }\n    }\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    lst.filter(s => s.length % 2 == 0).sorted(Ordering.by(_.length).thenBy(_.toString))\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) return y\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) return y\n        i += 1\n    }\n    x\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).sum\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map { case (x, y) => math.abs(x - y) }\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    val maxS = extensions.map(ext => {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        upper - lower\n    }).max\n    val maxExt = extensions.filter(ext => {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        upper - lower == maxS\n    }).head\n    s\"$className.$maxExt\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i <- 0 until b.length) {\n        if (b.drop(i) + b.take(i) exists (x => a.contains(x))) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.abs.toString\n    val even = ds.count(_ % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = new StringBuilder\n    for (i <- 0 until values.length) {\n        while (num >= values(i)) {\n            res.append(numerals(i))\n            num -= values(i)\n        }\n    }\n    res.toString\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val sides = Array(a, b, c).sorted\n    sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    words.reduceLeft { (max, word) =>\n        val count = word.toSet.size\n        if (count > max.toSet.size) word\n        else if (count == max.toSet.size) min(max, word)\n        else max\n    }\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        Seq(num + need, remaining - need)\n    } else {\n        Seq(num + remaining, 0)\n    }\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val stack = new mutable.Stack[Int]\n    val opStack = new mutable.Stack[String]\n    for ((op, num) <- operators.zip(operands)) {\n        if (op == \"+\" || op == \"-\") {\n            val b = stack.pop()\n            val a = stack.pop()\n            stack.push(if (op == \"+\") a + b else a - b)\n            opStack.push(op)\n        } else if (op == \"*\" || op == \"/\") {\n            val b = stack.pop()\n            val a = stack.pop()\n            stack.push(if (op == \"*\") a * b else a / b)\n            opStack.push(op)\n        } else if (op == \"^\") {\n            val b = stack.pop()\n            val a = stack.pop()\n            stack.push(math.pow(a, b).toInt)\n            opStack.push(op)\n        } else {\n            stack.push(num)\n        }\n    }\n    stack.pop()\n}\n",
            "def solve(s: String): String = {\n    val result = new StringBuilder\n    for (ch <- s) {\n        if (ch.isLetter) {\n            result.append(if (ch.isUpper) ch.toLower else ch.toUpper)\n        } else {\n            result.append(ch)\n        }\n    }\n    result.toString\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) {\n        None\n    } else {\n        val md5 = MessageDigest.getInstance(\"MD5\")\n        val digest = md5.digest(txt.getBytes)\n        Some(new String(digest))\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (lower to upper).filter(_ % 2 == 0)\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    for ch in parenString.characters {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += ch\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup += ch\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.map { abs($0 - mean) }.reduce(0, +)\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i > 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var sum = 0\n    var product = 1\n    for number in numbers {\n        sum += number\n        product *= number\n    }\n    return [sum, product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == s.reversed()\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(s.suffix(from: i)) {\n            return s + s.prefix(i).reversed()\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    return a.zip(b).map{ $0!= $1? \"1\" : \"0\" }.joined()\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    guard!strs.isEmpty else {\n        return nil\n    }\n    var longestStr = strs[0]\n    for str in strs {\n        if str.count > longestStr.count {\n            longestStr = str\n        }\n    }\n    return longestStr\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    var smaller = a < b? a : b\n    var larger = a > b? a : b\n    while smaller > 0 {\n        let remainder = larger % smaller\n        larger = smaller\n        smaller = remainder\n    }\n    return larger\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(s.prefix(i + 1))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return (0..<n+1).map { String($0) }.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.components(separatedBy: \" \")\n    return notes.map { durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<s.count-substring.count+1 {\n        if s[i..<i+substring.count] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numberDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    let filteredNumbers = numbers.components(separatedBy: \" \").filter { numberDict.keys.contains($0) }\n    let sortedNumbers = filteredNumbers.sorted { numberDict[$0]! < numberDict[$1]! }\n    return sortedNumbers.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers\n    sortedNumbers.sort()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard!numbers.isEmpty else {\n        return []\n    }\n    let minNum = numbers.min()!\n    let maxNum = numbers.max()!\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { $0 - minNum } / (maxNum - minNum)\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.filter { $0 is Int } as! [Int]\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2...n {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var result = [Int]()\n    var counts = [Int: Int]()\n    for num in numbers {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    for (num, count) in counts {\n        if count == 1 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func flipCase(_ s: String) -> String {\n    var result = \"\"\n    for character in s {\n        if character.isLetter {\n            result.append(character.isLower? Character(UnicodeScalar(character.unicodeScalarValue).uppercase) : Character(UnicodeScalar(character.unicodeScalarValue).lowercase))\n        } else {\n            result.append(character)\n        }\n    }\n    return result\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n)) + 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.filter { $0 % 3 == 0 }.sorted()\n    var result = Array(repeating: 0, count: l.count)\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n            result[i] = sortedThird[i // 3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    return Array(Set(l)).sorted()\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    guard!l.isEmpty else {\n        return 0\n    }\n    return l.max()!\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l.filter { $0 % 2 == 0 }.sorted()\n    return l.enumerated().map { (index, value) in\n        if index % 2 == 0 {\n            return sortedEven[index / 2]\n        } else {\n            return value\n        }\n    }\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    for i in 0..<s.count-2 {\n        result += s.suffix(3).dropFirst(i) + s[i]\n    }\n    result += s.suffix(s.count-2)\n    return result\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n)) + 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var digits = [Character]()\n    var n = x\n    while n > 0 {\n        digits.append(String(n % bas).characters.first!)\n        n /= bas\n    }\n    return String(characters: digits.reversed())\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4..<n+1 {\n        fib[i % 4] = fib[0] + fib[1] + fib[2]\n        fib.removeFirst()\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sortedL = l.sorted()\n    let midIndex = l.count / 2\n    if l.count % 2 == 0 {\n        return (sortedL[midIndex] + sortedL[midIndex - 1]) / 2\n    } else {\n        return sortedL[midIndex]\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    let result = s.map { (ch) -> Character in\n        Character(UnicodeScalar(ch.lowercased()) + 5)\n    }\n    return String(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    let result = s.map { (ch) -> Character in\n        Character(UnicodeScalar(ch.lowercased()) + 21)\n    }\n    return String(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if!vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.filter { $0 < t }.count == l.count\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var diff = [l[1] - l[0]]\n    for i in 1..<l.count - 1 {\n        diff.append(l[i + 1] - l[i])\n    }\n    return diff.allSatisfy({ $0 <= 0 }) || diff.allSatisfy({ $0 >= 0 })\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return l1.filter { l2.contains($0) }\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (0..<n+1).reduce(0, +)\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    return xs.enumerated().map { $0.offset * $1 }\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0, b = 0, c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for i in s.indices {\n        if vowels.contains(s[i].lowercased()) || (i == s.endIndex - 1 && s[i].lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xString = String(x)\n    let xLength = xString.count\n    let adjustedShift = shift % xLength\n    return xString.suffix(adjustedShift) + xString.prefix(xLength - adjustedShift)\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.filter{ CharacterSet.uppercaseLetters.contains($0) }.map{ Int($0.value) }.reduce(0, +)\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.components(separatedBy: \" \")\n    let applesIndex = words.firstIndex(of: \"apples\")! - 1\n    let orangesIndex = words.firstIndex(of: \"oranges\")! - 1\n    return n - Int(words[applesIndex])! - Int(words[orangesIndex])!\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.isEmpty {\n        return []\n    }\n    let minEven = evens.min()!\n    let index = arr.firstIndex(of: minEven)\n    return [minEven, index!]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        if let count = freqs[n] {\n            freqs[n] = count + 1\n        } else {\n            freqs[n] = 1\n        }\n    }\n    let goodVals = freqs.filter { $0.value >= $0.key }\n    return goodVals.isEmpty? -1 : goodVals.map { $0.key }.max()!\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in stride(from: 0, to: lst.count, by: 2) {\n        result.append(lst[i])\n    }\n    for i in stride(from: lst.count - 1, to: -1, by: -2) {\n        result.append(lst[i])\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    guard q.count > 0 else { return false }\n    let isPalindrome = q.enumerated().all { $0.element == q.last - $0.offset }\n    let total = q.reduce(0, +)\n    return isPalindrome && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count/2 {\n        if arr[i]!= arr[arr.count-1-i] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return (cnt1 <= cnt2)? lst1 : lst2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n)) + 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2...a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let root = Int(pow(Double(a), 1.0 / 3.0))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.filter { \"2357BD\".contains($0) }.count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\" + binary + \"db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        switch g {\n        case 4.0:\n            result.append(\"A+\")\n        case let x where x > 3.7:\n            result.append(\"A\")\n        case let x where x > 3.3:\n            result.append(\"A-\")\n        case let x where x > 3.0:\n            result.append(\"B+\")\n        case let x where x > 2.7:\n            result.append(\"B\")\n        case let x where x > 2.3:\n            result.append(\"B-\")\n        case let x where x > 2.0:\n            result.append(\"C+\")\n        case let x where x > 1.7:\n            result.append(\"C\")\n        case let x where x > 1.3:\n            result.append(\"C-\")\n        case let x where x > 1.0:\n            result.append(\"D+\")\n        case let x where x > 0.7:\n            result.append(\"D\")\n        case let x where x > 0.0:\n            result.append(\"D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    guard length >= 2 else { return false }\n    for i in 2..<Int(sqrt(Double(length))) + 1 {\n        if length % i == 0 { return false }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * pow(10, Double(n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    for digit in String(n).characters {\n        digitsSum += Int(String(digit))!\n    }\n    return String(format: \"%b\", digitsSum)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    return lst.filter { $0 % 2 == 1 && $1 % 2 == 0 }.reduce(0, +)\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \")\n    let sortedWords = words.map { word in\n        String(word.characters.sorted())\n    }\n    return sortedWords.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var result = [[Int]]()\n    for (i, row) in lst.enumerated() {\n        for (j, element) in row.enumerated() {\n            if element == x {\n                result.append([i, j])\n            }\n        }\n    }\n    return result.sorted { (a, b) -> Bool in\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1])\n    }\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = Int(ch) + 4\n        if shifted > 122 {\n            shifted -= 26\n        }\n        result += String(UnicodeScalar(shifted))\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    guard let sortedList = lst.sorted().reduce(into: []) { $0.append(Set($1)) } else {\n        return nil\n    }\n    guard let secondElement = sortedList.first?.first else {\n        return nil\n    }\n    return secondElement\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.components(separatedBy: \".!?\")\n    return sentences.filter { $0.hasPrefix(\"I \") }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        return (x + y == z) || (x + z == y) || (y + z == x)\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.isLower? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                ch1 = String(ch1.characters.map { String($0).advanced(by: 2) })\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n)) + 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    let primes = lst.filter { isPrime($0) }\n    guard!primes.isEmpty else {\n        return 0\n    }\n    let largest = String(describing: primes.max()!)\n    return largest.reduce(0) { $0 + Int($1)! }\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    return d.keys.allSatisfy { $0.lowercased() == $0 } || d.keys.allSatisfy { $0.uppercased() == $0 }\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2...n {\n        if primes.isEmpty || primes.last! < num {\n            primes.append(num)\n        } else {\n            for (index, prime) in primes.enumerated() {\n                if prime >= num {\n                    primes.insert(num, at: index)\n                    break\n                }\n            }\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return abs(a % 10) * abs(b % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    return s.filter { $0 in vowels }.filter { $0.isUppercase }.count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)\n    if num! >= 0 {\n        return Int(num! + 0.5)\n    } else {\n        return Int(num! - 0.5)\n    }\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return Array(repeating: n, count: n).map { $0 + 2 * $1 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.components(separatedBy: \", \").filter { $0.count > 0 }\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    } else if y % 2 == 0 {\n        return y\n    } else {\n        return y - 1\n    }\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    guard n <= m else {\n        return nil\n    }\n    let rAvg = (m + n) / 2.0\n    let rAvgRounded = Int(round(rAvg))\n    return String(rAvgRounded, radix: 2)\n}\n",
            "func allDigitsOdd(_ s: String) -> Bool {\n    return s.characters.allSatisfy { $0.asciiValue % 2!= 0 }\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    return x.filter { allDigitsOdd(String($0)) }.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = (1...n).map { $0 }\n    return nums.enumerated().map { (i, _) in\n        if i % 2 == 0 {\n            return nums[..<i].reduce(1, *)\n        } else {\n            return nums[..<i].reduce(1, +)\n        }\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int($0)?? 0 }.reduce(0, +)\n    } else {\n        let firstTwo = nStr.prefix(2).map { Int($0)?? 0 }.reduce(0, +)\n        return firstTwo * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<] == sortedArr[..<arr.count - i] && arr[..<i] == sortedArr[arr.count - i..<] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCount = lst1.filter { $0 % 2!= 0 }.count\n    let evenCount = lst2.filter { $0 % 2 == 0 }.count\n    return evenCount >= oddCount? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    let words = test.components(separatedBy: \" \").filter { $0.count > 0 }\n    for word in words {\n        freq[word, default: 0] += 1\n    }\n    var result = [String:Int]()\n    if!freq.isEmpty {\n        let maxFreq = freq.values.max()!\n        for (key, value) in freq {\n            if value == maxFreq {\n                result[key] = value\n            }\n        }\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == s.reversed()\n}\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = String(s.filter {!c.contains($0) })\n    return [s1, \"yes\" if isPalindrome(s1) else \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        var n = 0\n        for d in num {\n            if Int(String(d))! % 2 == 1 {\n                n += 1\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.reduce(0) { total, row in\n        total + row.reduce(0) { total, item in\n            ceil(Double(total + item) / Double(capacity))\n        }\n    }\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).count { $0 == \"1\" }\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { countOnes($0) == countOnes($1)? $0 < $1 : countOnes($0) < countOnes($1) }\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.components(separatedBy: \" \")\n    return words.filter { word in\n        word.filter { $0.isLower }.filter { consonants.contains($0) }.count == n\n    }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 0, by: -1) {\n        if word[i] == vowels && word[i - 1]!= vowels && word[i + 1]!= vowels {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return \"Yes\" + (check(s1) || check(s2)? \"\" : \"No\")\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    return arr.sorted().suffix(k).map { $0 }\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2!= 0 }.map { $0.element }.reduce(0, +)\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var sum = 0\n    for n in arr.prefix(k) {\n        if String(n).count <= 2 {\n            sum += n\n        }\n    }\n    return sum\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [n]\n    while n!= 1 {\n        if n % 2!= 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    guard let components = date.split(separator: \"-\") else {\n        return false\n    }\n    guard components.count == 3 else {\n        return false\n    }\n    guard let month = Int(components[0]), let day = Int(components[1]), let year = Int(components[2]) else {\n        return false\n    }\n    guard month >= 1, month <= 12, day >= 1, day <= 31 else {\n        return false\n    }\n    let isLeapYear = (year % 4 == 0) && ((year % 100!= 0) || (year % 400 == 0))\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        return day <= 31\n    case 4, 6, 9, 11:\n        return day <= 30\n    case 2:\n        return day <= (isLeapYear? 29 : 28)\n    default:\n        return false\n    }\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.components(separatedBy: \" \")\n    } else if txt.contains(\",\") {\n        return txt.components(separatedBy: \",\")\n    } else {\n        return [String(txt.filter { $0.isLower && $0.unicodeScalars.first!.value % 2 == 0 }.count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return true }\n    var sorted = true\n    for i in 0..<lst.count-1 {\n        if lst[i] > lst[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n)) + 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return isPrime(length)? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    let negatives = arr.filter { $0 < 0 }\n    let positiveCount = arr.filter { $0 > 0 }.count\n    let sign = (negatives.count % 2 == 1)? -1 : 1\n    return sign * (arr.map { abs($0) }.reduce(0, +) + positiveCount)\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i > 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j > 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i < n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j < n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(i % 2 == 0? 1 : minVal)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    var seq = [1, 3]\n    for i in 2..<n+1 {\n        if i % 2 == 0 {\n            seq.append(i/2+1)\n        } else {\n            seq.append(seq[i-1] + seq[i-2] + (i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = Array(String(n)).filter { $0.toInt()! % 2 == 1 }\n    return odds.reduce(1, { $0 * $1 })?? 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIndexes = [Int]()\n    var closeIndexes = [Int]()\n    for i in 0..<s.count {\n        if s[i] == \"[\" {\n            openIndexes.append(i)\n        } else if s[i] == \"]\" {\n            closeIndexes.append(i)\n        }\n    }\n    closeIndexes.reverse()\n    var count = 0\n    var i = 0\n    while i < openIndexes.count && count < 2 {\n        if openIndexes[i] < closeIndexes[i] {\n            count += 1\n            i += 1\n        } else {\n            i += 1\n        }\n    }\n    return count >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.reduce(0) { $0 + pow(ceil($1), 2) }\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    guard let lastWord = txt.components(separatedBy: \" \").last else {\n        return false\n    }\n    return lastWord.count == 1 && lastWord.first!.isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    guard arr.count > 1 else {\n        return -1\n    }\n    let idx = (1..<arr.count).filter { arr[$0] < arr[$0 - 1] }\n    return idx.isEmpty? -1 : idx.max()!\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    var negatives = [Int]()\n    var positives = [Int]()\n    for element in lst {\n        if element < 0 {\n            negatives.append(element)\n        } else if element > 0 {\n            positives.append(element)\n        }\n    }\n    var maxNegative: Int? = nil\n    if!negatives.isEmpty {\n        maxNegative = negatives.max()\n    }\n    var minPositive: Int? = nil\n    if!positives.isEmpty {\n        minPositive = positives.min()\n    }\n    return [maxNegative, minPositive]\n}\n",
            "func anyToReal(_ o: Any) -> Double {\n    if let o = o as? String {\n        return Double(o.replacingOccurrences(of: \",\", with: \".\"))!\n    } else if let o = o as? Int {\n        return Double(o)\n    } else if let o = o as? Double {\n        return o\n    } else {\n        fatalError(\"Type Error\")\n    }\n}\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    let pattern = \"\\\\s{3,}\"\n    let replacement = \"-\"\n    let result = txt.replacingOccurrences(of: pattern, with: replacement, options:.regularExpression)\n    let result2 = result.replacingOccurrences(of: \" \", with: \"_\")\n    return result2\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suffixes = [\"txt\", \"exe\", \"dll\"]\n    let components = fileName.components(separatedBy: \".\")\n    guard components.count == 2,\n        let suffix = components.last,\n        suffixes.contains(suffix),\n        let first = components.first,\n        first.first == first.first.lowercased(),\n        first.count(where: Character.isDigit) <= 3 else {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<Int(sqrt(Double(n)) + 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.components(separatedBy: \" \")\n    return words.filter { isPrime($0.count) }.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int($0)?? 0 }.reduce(0, +)\n    } else {\n        let firstTwo = nStr.prefix(2).map { Int($0)?? 0 }.reduce(0, +)\n        return firstTwo * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted { a, b in\n        digitsSum(a) < digitsSum(b)\n    }\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { $0 > 10 && $0 % 2 == 1 && String($0).hasPrefix(odds) }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else { return [] }\n    if l > r {\n        let temp = l\n        l = r\n        r = temp\n    }\n    return names[l+1..<r]\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    result.sort(by: { (s1, s2) -> Bool in\n        return s1.count < s2.count || (s1.count == s2.count && s1 < s2)\n    })\n    return result\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return Int(lst.filter { $0 >= 0 && $0 % 2 == 1 }.map { $0 * $0 }.reduce(0, +))\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return Array(zip(game, guess)).map { abs($0 - $1) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = -Float.infinity\n    var maxExt = \"\"\n    for ext in extensions {\n        let upper = ext.filter { $0.isUppercase }.count\n        let lower = ext.filter { $0.isLowercase }.count\n        let s = Double(upper) - Double(lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        if b.suffix(b.count - i) + b.prefix(i) == a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    let even = ds.filter { $0.unicodeScalars.first!.value % 2 == 0 }.count\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCount = 0\n    var maxWord = \"\"\n    for word in words {\n        let count = Set(word).count\n        if count > maxCount {\n            maxCount = count\n            maxWord = word\n        } else if count == maxCount {\n            maxWord = min(maxWord, word)\n        }\n    }\n    return maxWord\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))!\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    var result = \"\"\n    for character in s {\n        if!character.isLetter {\n            result.append(character)\n        } else if character.isUppercase {\n            result.append(String(character.lowercased()))\n        } else {\n            result.append(String(character.uppercased()))\n        }\n    }\n    return result\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    guard let data = txt.data(using:.utf8) else {\n        return nil\n    }\n    let md5 = MD5(data: data)\n    return md5.hexString\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return Array(lower...upper).filter { $0 % 2 == 0 }\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    let currentGroup: string = \"\";\n    let stack: Array<string> = [];\n    for (const ch of parenString) {\n        if (ch === \"(\") {\n            stack.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stack.pop();\n            currentGroup += ch;\n            if (!stack.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    const deviation = numbers.reduce((acc, x) => {\n        const diff = x - mean;\n        return acc + Math.abs(diff);\n    }, 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i!== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    const nSum = numbers.reduce((acc, cur) => acc + cur, 0);\n    const nProduct = numbers.reduce((acc, cur) => acc * cur, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s: string): string => {\n    let left = 0;\n    let right = s.length - 1;\n    while (left < right) {\n        if (s[left]!== s[right]) {\n            return \"\";\n        }\n        left++;\n        right--;\n    }\n    return s + s.slice(left);\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    return a.split(\"\").map((char, index) => (char === b.charAt(index)? \"0\" : \"1\")).join(\"\");\n};\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestStr = strs[0];\n    for (const str of strs) {\n        if (str.length > longestStr.length) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict: Record<string, number> = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = numbers\n       .split(\" \")\n       .filter((x) => x in numDict)\n       .sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n};\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair: Array<number> = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s: string): number => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            return n / i;\n        }\n        i++;\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const set = new Set(numbers);\n    return Array.from(set);\n}\n",
            "export const flipCase = (s: string): string => {\n    return s.split('').map(ch => {\n        if (ch.match(/[a-z]/i)) {\n            return ch.toUpperCase() === ch? ch.toLowerCase() : ch.toUpperCase();\n        }\n        return ch;\n    }).join('');\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1;\n    let x2 = -1;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort();\n    return l.map((e, i) => (i % 3 === 0? sortedThird[i // 3] : e));\n};\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (\"\" + i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort();\n    return l.map((e, i) => (i % 2 === 0? sortedEven[i / 2] : e));\n};\n",
            "export const encodeCyclic = (s: string): string => {\n    let result = \"\";\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.slice(i);\n        } else {\n            result += s.slice(i + 1, i + 3) + s[i];\n        }\n    }\n    return result;\n};\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n};\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n: number): number => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    return n ** 2;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set<number>();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    let result = \"\";\n    let n = x;\n    while (n > 0) {\n        result = (n % bas) + result;\n        n = Math.floor(n / bas);\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "const memo: { [key: number]: number } = { 0: 0, 1: 0, 2: 2, 3: 0 };\nexport const fib4 = (n: number): number => {\n    if (memo[n]!== undefined) {\n        return memo[n];\n    }\n    const result = fib4(n - 1) + fib4(n - 2);\n    memo[n] = result;\n    return result;\n};\n",
            "export const median = (l: Array<number>): number => {\n    const sortedL = l.sort((a, b) => a - b);\n    if (l.length % 2!== 0) {\n        return sortedL[Math.floor(l.length / 2)];\n    } else {\n        return (sortedL[Math.floor(l.length / 2)] + sortedL[Math.floor(l.length / 2) - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    const result = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 5) % 26 + 97));\n    return result.join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    const result = s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 21) % 26 + 97));\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.split(\"\").filter(char =>!vowels.includes(char)).join(\"\");\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "const memo: Record<number, number> = { 0: 0, 1: 1 };\nexport const fib = (n: number): number => {\n    if (memo[n]!== undefined) {\n        return memo[n];\n    }\n    const result = fib(n - 1) + fib(n - 2);\n    memo[n] = result;\n    return result;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return l1.filter(x => l2.includes(x));\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return (n * (n + 1)) / 2;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n: number): number => {\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return s.split(\"\").reduce((acc, cur) => {\n        const charCode = cur.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            return acc + charCode - 64;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const applesIndex = words.indexOf('apples');\n    const orangesIndex = words.indexOf('oranges');\n    const apples = parseInt(words[applesIndex - 1]);\n    const oranges = parseInt(words[orangesIndex - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    const minEvenIndex = arr.indexOf(minEven);\n    return [minEven, minEvenIndex];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs: Record<number, number> = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = Object.keys(freqs).filter(k => freqs[k] >= parseInt(k));\n    return goodVals.length > 0? Math.max(...goodVals.map(k => parseInt(k))) : -1;\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = [...lst].sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    const isPalindrome = q.every((value, index) => value === q[q.length - 1 - index]);\n    const total = q.reduce((acc, value) => acc + value, 0);\n    return isPalindrome && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!== arr[arr.length - 1 - i]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    const cnt2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    const absA = Math.abs(a);\n    const cbrtA = Math.cbrt(absA);\n    return cbrtA * cbrtA * cbrtA === absA;\n};\n",
            "export const hexKey = (num: string): number => {\n    return num.split(\"\").filter(x => [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].includes(x)).length;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    const binary = dec.toString(2);\n    return `0b${binary}`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(length)) >= i; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * 10 ** (n - 2);\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = [...n.toString()].reduce((acc, cur) => acc + parseInt(cur), 0);\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur, i) => (i % 2 === 1 && cur % 2 === 0)? acc + cur : acc, 0);\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words = s.split(\" \").map(word => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        const shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            result.push(String.fromCharCode(shifted - 26));\n        } else {\n            result.push(String.fromCharCode(shifted));\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sortedList = [...new Set(lst)].sort((a, b) => a - b);\n    if (sortedList.length < 2) {\n        return null;\n    }\n    return sortedList[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.reduce((acc, sentence) => {\n        if (sentence.length >= 2) {\n            return acc + (sentence.slice(0, 2) === \"I \");\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    return (\n        (typeof x === \"number\" &&\n            typeof y === \"number\" &&\n            typeof z === \"number\") &&\n        ((x + y === z) || (x + z === y) || (y + z === x))\n    );\n};\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    let result = [];\n    for (const ch of message) {\n        if (ch.match(/[a-z]/i)) {\n            const ch1 = ch.toUpperCase() === ch? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.includes(ch1)) {\n                result.push(String.fromCharCode(ch1.charCodeAt(0) + 2));\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n};\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = primes.reduce((a, b) => Math.max(a, b));\n    return largest.toString().split(\"\").reduce((a, b) => a + parseInt(b), 0);\n};\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (!d) {\n        return false;\n    }\n    const lowerKeys = [...d.keys()].every((k) => k.toLowerCase() === k);\n    const upperKeys = [...d.keys()].every((k) => k.toUpperCase() === k);\n    return lowerKeys || upperKeys;\n};\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num < n; num++) {\n        let isPrime = true;\n        for (const prime of primes) {\n            if (num % prime === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    const aAbs = Math.abs(a);\n    const bAbs = Math.abs(b);\n    let result = 0;\n    while (aAbs > 0 || bAbs > 0) {\n        const aDigit = aAbs % 10;\n        const bDigit = bAbs % 10;\n        result += aDigit * bDigit;\n        aAbs = Math.floor(aAbs / 10);\n        bAbs = Math.floor(bAbs / 10);\n    }\n    return result;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n};\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    return s.split(/[, ]/).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 if x!== y else -1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2);\n    return rAvg.toString(2);\n}\n",
            "export const uniqueDigits = (x: Array<number>): Array<number> => {\n    return x.filter(num => {\n        const digits = num.toString().split('');\n        return digits.every(digit => parseInt(digit) % 2!== 0);\n    }).sort((a, b) => a - b);\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from({ length: n + 1 }, (_, i) => i);\n    return nums.map(i => (i % 2!== 0? nums.slice(0, i).reduce((a, b) => a + b, 0) : nums.slice(0, i).reduce((a, b) => a * b)));\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n};\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n};\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        const firstTwo = parseInt(nStr.slice(0, 2));\n        return firstTwo * 2 + digitsSum(Math.abs(n));\n    }\n};\nexport const countNums = (arr: Array<number>): number => {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n};\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).every((v, j) => v === sortedArr[j]) && arr.slice(0, i).every((v, j) => v === sortedArr[arr.length - 1 - j])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCount = lst1.filter(num => num % 2!== 0).length;\n    const evenCount = lst2.filter(num => num % 2 === 0).length;\n    return evenCount >= oddCount? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq: Map<string, number> = new Map();\n    const words: Array<string> = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        const count = freq.get(w) || 0;\n        freq.set(w, count + 1);\n    }\n    const result: Map<string, number> = new Map();\n    if (freq.size > 0) {\n        const maxCount = [...freq.values()].reduce((a, b) => Math.max(a, b));\n        for (const [key, value] of freq.entries()) {\n            if (value === maxCount) {\n                result.set(key, value);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.split(\"\").filter(ch =>!c.includes(ch)).join(\"\");\n    const isPalindrome = s1 === s1.split(\"\").reverse().join(\"\");\n    return [s1, isPalindrome? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = num.split(\"\").reduce((acc, cur) => {\n            const charCode = cur.charCodeAt(0);\n            return acc + (charCode % 2 === 1? 1 : 0);\n        }, 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    return grid.reduce((total, row) => {\n        return total + Math.ceil(row.reduce((total, col) => total + col, 0) / capacity);\n    }, 0);\n}\n",
            "export const countOnes = (num: number): number => {\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 === 1) {\n            count++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return count;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => countOnes(a) - countOnes(b) || a - b);\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => c.toLowerCase() in consonants).length === n);\n};\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (vowels.includes(word[i]) &&!vowels.includes(word[i - 1]) &&!vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    const check = (s: string): boolean => {\n        let depth = 0;\n        for (const ch of s) {\n            if (ch === \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth === 0;\n    };\n    return \"Yes\" + (check(s1) || check(s2)? \"\" : \"No\");\n};\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur, idx) => {\n        if (idx % 2 === 0 && cur % 2!== 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).reduce((acc, cur) => {\n        const s = cur.toString();\n        return acc + (s.length <= 2? parseInt(s) : 0);\n    }, 0);\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n!== 1) {\n        if (n % 2!== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    const [year, month, day] = date.split(\"-\").map(Number);\n    if (\n       !date.includes(\"-\") ||\n       !year ||\n       !month ||\n       !day ||\n        year < 1000 ||\n        year > 3000 ||\n        month < 1 ||\n        month > 12 ||\n        day < 1 ||\n        (month === 2 && day > 29) ||\n        (month!== 2 && day > 30)\n    ) {\n        return false;\n    }\n    return true;\n};\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length)? \"YES\" : \"NO\";\n};\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (!arr.length) {\n        return null;\n    }\n    const hasZero = arr.includes(0);\n    if (hasZero) {\n        return 0;\n    }\n    const negatives = arr.filter(n => n < 0);\n    const oddNegatives = negatives.filter(n => n % 2 === 1);\n    const sign = oddNegatives.length % 2 === 1? -1 : 1;\n    const positiveNumbers = arr.filter(n => n > 0);\n    const sum = positiveNumbers.reduce((acc, n) => acc + Math.abs(n), 0);\n    return sign * sum;\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i!== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j!== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i!== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j!== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0? 1 : minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    const seq: Array<number> = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = n.toString().split(\"\").filter(d => parseInt(d) % 2 === 1).map(d => parseInt(d));\n    return odds.reduce((x, y) => x * y, 1) || 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: number[] = [];\n    const closeIdx: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n};\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur) => acc + Math.pow(Math.ceil(cur), 2), 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last.toLowerCase()!== \" \";\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.slice(1).map((v, i) => i).filter(i => arr[i] < arr[i - 1]);\n    return idx.length > 0? Math.max(...idx) : -1;\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const negatives = lst.filter(x => x < 0);\n    const positives = lst.filter(x => x > 0);\n    const maxNegative = negatives.length > 0? Math.max(...negatives) : null;\n    const minPositive = positives.length > 0? Math.min(...positives) : null;\n    return [maxNegative, minPositive];\n}\n",
            "export const anyToReal = (o: any): number => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return o;\n    } else if (typeof o === \"float\") {\n        return o;\n    } else {\n        throw new Error(\"Type Error\");\n    }\n};\nexport const compareOne = (a: any, b: any): number | null => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return _.kebabCase(txt);\n}\n",
            "const suf = [\"txt\", \"exe\", \"dll\"];\nconst lst = fileName.split(\".\");\nif (lst.length!== 2 ||!suf.includes(lst[1]) || lst[0].length === 0 ||!lst[0].match(/^[a-zA-Z]+$/) || lst[0].match(/\\d/g).length > 3) {\n    return \"No\";\n}\nreturn \"Yes\";\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words\n       .filter((w) => isPrime(w.length))\n       .join(\" \");\n};\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n};\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => digitsSum(b) - digitsSum(a));\n};\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && n.toString()[0] in odds).length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    ];\n    if (!names.includes(planet1) ||!names.includes(planet2)) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n};\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result = lst.filter(s => s.length % 2 === 0).sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    return result;\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    return lst.filter(n => n >= 0 && n % 2 === 1).reduce((a, b) => a + b * b, 0);\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((num, i) => Math.abs(num - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter(c => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter(c => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = num.toString().split(\"\");\n    const even = ds.filter(d => parseInt(d) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res: string[] = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n};\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCount = 0;\n    let maxWord = \"\";\n    for (const word of words) {\n        const count = new Set(word).size;\n        if (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n        } else if (count === maxCount) {\n            maxWord = min(maxWord, word);\n        }\n    }\n    return maxWord;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n};\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const opStack: Array<string> = [];\n    const numStack: Array<number> = [];\n    for (let i = 0; i < operators.length; i++) {\n        const op = operators[i];\n        const num = operands[i];\n        if (op === \"+\" || op === \"-\") {\n            const topNum = numStack[numStack.length - 1];\n            const topOp = opStack[opStack.length - 1];\n            if (topOp === \"+\" || topOp === \"-\") {\n                if (op === topOp) {\n                    numStack.pop();\n                    opStack.pop();\n                    numStack.push(evaluate(topOp, topNum, num));\n                } else {\n                    opStack.push(op);\n                    numStack.push(num);\n                }\n            } else {\n                opStack.push(op);\n                numStack.push(num);\n            }\n        } else if (op === \"*\" || op === \"/\") {\n            opStack.push(op);\n            numStack.push(num);\n        } else if (op === \"**\") {\n            const topNum = numStack[numStack.length - 1];\n            numStack.pop();\n            numStack.push(Math.pow(topNum, num));\n        }\n    }\n    return numStack[0];\n};\nconst evaluate = (op: string, num1: number, num2: number): number => {\n    if (op === \"+\") {\n        return num1 + num2;\n    } else if (op === \"-\") {\n        return num1 - num2;\n    } else if (op === \"*\") {\n        return num1 * num2;\n    } else if (op === \"/\") {\n        return num1 / num2;\n    } else {\n        throw new Error(\"Invalid operator: \" + op);\n    }\n};\n",
            "export const solve = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        if (ch.match(/[a-z]/i)) {\n            result.push(ch.toUpperCase() === ch? ch.toLowerCase() : ch.toUpperCase());\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n  if (!txt) {\n    return null;\n  }\n  const hash = createHash(\"md5\");\n  const data = hash.update(txt).digest(\"hex\");\n  return data;\n};\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return Array.from({length: upper - lower + 1}, (_, i) => lower + i).filter(i => i % 2 === 0);\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n        else:\n            current_group += ch\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, n in enumerate(numbers):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(n)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [sum(numbers), reduce(lambda x, y: x * y, numbers, 1)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x!= y) for x, y in zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[0:i] for i in range(1, len(s) + 1)]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    return [DURATIONS[note] for note in music_string.split()]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * (x**i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda x: x[0] % 3 == 0, enumerate(l)), key=lambda x: x[1])\n    return [sorted_third[i // 3][1] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len([c for c in str(i) if c == \"7\"])\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x[0] % 2 == 0, enumerate(l)), key=lambda x: x[1])\n    return [x[1] if i % 2 == 0 else l[i] for i, x in sorted_even]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1 : i + 2]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    c = Counter(l)\n    for num in l:\n        if -num in c and c[-num] > 1:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    return median(l)\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "VOWELS = \"aeiouy\"\ndef vowels_count(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.lower() in VOWELS:\n            count += 1\n    return count\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    while a % 2 == 0:\n        cnt += 1\n        a //= 2\n    for i in range(3, int(sqrt(a)) + 1, 2):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    return x % math.pow(n, math.floor(math.log(x, n))) == 0\n",
            "def is_cube(a: int) -> bool:\n    return a > 0 and (a ** (1.0 / 3.0)).is_integer()\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"0b{bin(dec)[2:]}\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5)):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return \" \".join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append([i, j])\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if sum(arr[0], arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(set(lst)) == 1:\n        return None\n    return min(set(lst))\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\". \")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr((ord(ch1) + 2) % 26 + ord('a'))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    return sum(map(int, str(max(primes))))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r'[,]', s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return str(int(r_avg))\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(n for n in x if all(int(d) % 2 for d in str(n)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if sum(int(c) for c in str(abs(n))) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if len(w) > 0:\n            freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if ord(d) % 2 == 1:\n                n += 1\n        result.append(f\"the number of odd elements in the string {n} of the input.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = max(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    return min_sum if min_sum > 0 else min(nums)\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(sum(arr) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda n: (count_ones(n), n))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    return [w for w in words if len(w) > 0 and w.lower().count(c for c in consonants if c.isalpha()) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    stack = []\n    for char in lst:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return \"No\"\n            stack.pop()\n    if stack:\n        return \"No\"\n    return \"Yes\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [\n            str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))\n        ]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for a, b in zip(lst, lst[1:]):\n        if a > b:\n            return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * 2 - 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(mul, map(int, filter(lambda d: int(d) % 2 == 1, str(n))), 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n * n + 0.5) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i - 1] == arr[i]:\n            return i - 1\n    return -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    max_neg = max(negatives) if negatives else None\n    min_pos = min(positives) if positives else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise TypeError(\"Invalid type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"___\", \"_\").replace(\"____\", \"_\").replace(\"_____\",\"_\").replace(\"______\",\"_\").replace(\"_______\",\"_\").replace(\"________\",\"_\").replace(\"_________\",\"_\").replace(\"__________\",\"_\").replace(\"___________\",\"_\").replace(\"____________\",\"_\").replace(\"_____________\",\"_\").replace(\"______________\",\"_\").replace(\"_______________\",\"_\").replace(\"________________\",\"_\").replace(\"_________________\",\"_\").replace(\"__________________\",\"_\").replace(\"___________________\",\"_\").replace(\"____________________\",\"_\").replace(\"_____________________\",\"_\").replace(\"______________________\",\"_\").replace(\"_______________________\",\"_\").replace(\"________________________\",\"_\").replace(\"_________________________\",\"_\").replace(\"__________________________\",\"_\").replace(\"___________________________\",\"_\").replace(\"____________________________\",\"_\").replace(\"_____________________________\",\"_\").replace(\"______________________________\",\"_\").replace(\"_______________________________\",\"_\").replace(\"________________________________\",\"_\").replace(\"_________________________________\",\"_\").replace(\"__________________________________\",\"_\").replace(\"___________________________________\",\"_\").replace(\"____________________________________\",\"_\").replace(\"_____________________________________\",\"_\").replace(\"______________________________________\",\"_\").replace(\"_______________________________________\",\"_\").replace(\"________________________________________\",\"_\").replace(\"_________________________________________\",\"_\").replace(\"__________________________________________\",\"_\").replace(\"___________________________________________\",\"_\").replace(\"____________________________________________\",\"_\").replace(\"_____________________________________________\",\"_\").replace(\"______________________________________________\",\"_\").replace(\"_______________________________________________\",\"_\").replace(\"________________________________________________\",\"_\").replace(\"_________________________________________________\",\"_\").replace(\"__________________________________________________\",\"_\").replace(\"___________________________________________________\",\"_\").replace(\"____________________________________________________\",\"_\").replace(\"_____________________________________________________\",\"_\").replace(\"______________________________________________________\",\"_\").replace(\"_______________________________________________________\",\"_\").replace(\"________________________________________________________\",\"_\").replace(\"_________________________________________________________\",\"_\").replace(\"__________________________________________________________\",\"_\").replace(\"___________________________________________________________\",\"_\").replace(\"____________________________________________________________\",\"_\").replace(\"_____________________________________________________________\",\"_\").replace(\"______________________________________________________________\",\"_\").replace(\"_______________________________________________________________\",\"_\").replace(\"________________________________________________________________\",\"_\").replace(\"_________________________________________________________________\",\"_\").replace(\"__________________________________________________________________\",\"_\").replace(\"___________________________________________________________________\",\"_\").replace(\"____________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________\",\"_\").replace(\"______________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________\",\"_\").replace(\"________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________________\",\"_\").replace(\"__________________________________________________________________________________________________________\",\"_\").replace(\"___________________________________________________________________________________________________\",\"_\").replace(\"____________________________________________________________________________________________________\",\"_\").replace(\"_____________________________________________________________________________________________________\",\"_\").replace(\"______________________________________________________________________________________________________\",\"_\").replace(\"_______________________________________________________________________________________________________\",\"_\").replace(\"________________________________________________________________________________________________________\",\"_\").replace(\"_________________________________________________________________________________________________________\",\"_\").replace(\"________________",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    parts = file_name.split(\".\")\n    if len(parts)!= 2 or parts[1] not in suffixes or len(parts[0]) == 0 or not parts[0][0].isalpha() or sum(1 for c in parts[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0:\n            result += x ** 3\n        else:\n            result += x\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, map(len, words))))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and n.to_s[0] in odds)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5)):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(c.isupper() for c in ext)\n        lower = sum(c.islower() for c in ext)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(d) % 2 == 0 for d in s)\n    return [even, len(s) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, a)\n    upper = min(8, b)\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.is_integer()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [sum(numbers), reduce(lambda x, y: x * y, numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x!= y) for x, y in zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_str = strs[0]\n    for s in strs:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[:i + 1] for i in range(len(s))]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n+1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "durations = defaultdict(int, {'o': 4, 'o|': 2, '.|': 1})\nnotes = music_string.split()\nreturn [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int, {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    })\n    num_list = [x for x in numbers.split() if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            flipped += ch.upper() if ch.islower() else ch.lower()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i, c in enumerate(xs):\n        res += c * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    lo = 0\n    hi = 1\n    while hi - lo > 1e-10:\n        mid = (lo + hi) / 2\n        if poly(xs, mid) < 0:\n            hi = mid\n        else:\n            lo = mid\n    return lo\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return list(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    d = defaultdict(int)\n    for num in l:\n        d[num] += 1\n        if num!= 0 and d[-num] > 0:\n            d[num] -= 1\n            d[-num] -= 1\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2.0\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - ord('a') + 5) % 26 + ord('a')) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - ord('a') + 21) % 26 + ord('a')) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i <= sqrt(n):\n        if n % i == 0 and is_prime(i):\n            return i\n        i += 1\n    return n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "VOWELS = \"aeiou\"\ndef vowels_count(s: str) -> int:\n    cnt = 0\n    for c in s:\n        if c.lower() in VOWELS or c.lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-(i + 1)] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    while a > 1:\n        if is_prime(a):\n            cnt += 1\n        if cnt == 3:\n            return True\n        a -= 1\n    return False\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    while x % n == 0:\n        x //= n\n    return x == 1\n",
            "def is_cube(a: int) -> bool:\n    return a > 0 and (a & (a - 1)) == 0 and (a ** (1.0 / 3.0)).is_integer()\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5)):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(sum(int(d) for d in str(n)))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words: List[str] = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0], coord[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            result += chr(shifted - 26)\n        else:\n            result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"\\s*[\\.\\!\\?]\\s*\", s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    return sum(int(c) for c in str(max(primes)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d) or all(k.isupper() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0.0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 1\n    return format(r_avg, \"b\")\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(digit) % 2 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort()\n    sorted_arr.reverse()\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n+1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(int(d) for d in str(n).lstrip('-')) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == arr[:len(arr) - i] and arr[:i] == arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    words = test.split()\n    freq = Counter(words)\n    max_freq = max(freq.values())\n    result = {}\n    for word, count in freq.items():\n        if count == max_freq:\n            result[word] = count\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if ord(d) % 2 == 1)\n        result.append(f\"the number of odd elements in the string {n} of the input.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    cur_sum = 0\n    min_sum = maxsize\n    for n in nums:\n        cur_sum += n\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum if min_sum!= maxsize else 0\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int((sum(arr) / capacity) + 1), grid))\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in bin(num)[2:] if c == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return [w for w in words if len(w) > 0 and consonants.count(w[0].lower()) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word) - 1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    arr.sort()\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m, d = map(int, date.split('-'))\n    if m in [1, 3, 5, 7, 8, 10, 12] and 1 <= d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and 1 <= d <= 30:\n        return True\n    if m == 2 and 1 <= d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [len(list(filter(str.islower, filter(str.isascii, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) == len(lst)\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and all(i % 2!= 0 for i in range(2, length + 1)):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if len([n for n in arr if n < 0]) % 2 else 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(mul, map(int, str(n)), 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n.ceil()) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.rsplit(maxsplit=1)[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    return next((i for i in range(1, len(arr)) if arr[i] < arr[i - 1]), -1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives: List[int] = [i for i in lst if i < 0]\n    positives: List[int] = [i for i in lst if i > 0]\n    return [max(negatives) if negatives else None, min(positives) if positives else None]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Invalid type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    return factorial(n)\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    file_parts = file_name.split(\".\")\n    if len(file_parts)!= 2 or file_parts[1] not in suffixes or len(file_parts[0]) == 0 or not file_parts[0][0].isalpha() or any(char.isdigit() for char in file_parts[0]):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0:\n            result += x ** 3\n        else:\n            result += x\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words: List[str] = sentence.split()\n    return \" \".join([w for w in words if is_prime(len(w))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    return sum(int(d) for d in str(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) >= 0])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3) as usize] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=len)\n    result.sort()\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**.5)):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(d) % 2 == 0 for d in s)\n    return [even, len(s) - even]\n",
            "ROMAN_NUMERALS: List[str] = [\n    \"M\",\n    \"CM\",\n    \"D\",\n    \"CD\",\n    \"C\",\n    \"XC\",\n    \"L\",\n    \"XL\",\n    \"X\",\n    \"IX\",\n    \"V\",\n    \"IV\",\n    \"I\",\n]\nVALUES: List[int] = [\n    1000,\n    900,\n    500,\n    400,\n    100,\n    90,\n    50,\n    40,\n    10,\n    9,\n    5,\n    4,\n    1,\n]\ndef int_to_mini_roman(num: int) -> str:\n    result = \"\"\n    for i in range(len(VALUES)):\n        count = num // VALUES[i]\n        result += ROMAN_NUMERALS[i] * count\n        num %= VALUES[i]\n    return result\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    word_counts = Counter(words)\n    max_count = max(word_counts.values())\n    return [w for w, c in word_counts.items() if c == max_count][0]\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    nums = operands.copy()\n    for i, op in enumerate(reversed(operators)):\n        if op == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n        elif op == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n        elif op == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            del nums[i + 1]\n        elif op == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n        elif op == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.lower() if ch.isupper() else ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for paren_group in paren_groups:\n        if len(paren_group) > 0:\n            depth = 0\n            max_depth = 0\n            for ch in paren_group:\n                if ch == \"(\":\n                    depth += 1\n                    max_depth = max(max_depth, depth)\n                elif ch == \")\":\n                    depth -= 1\n            result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \" * n\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(c.lower() for c in s))\n",
            "DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return [DURATIONS[note] for note in notes if note in DURATIONS]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split() if num in num_dict]\n    return \" \".join(sorted(num_list, key=lambda x: num_dict[x]))\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda i: i % 3 == 0, map(lambda i: i[0], enumerate(l))))\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda i: i % 2 == 0, range(len(l))), key=lambda i: l[i])\n    return [l[i] if i % 2 == 0 else sorted_even[i // 2] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(i < t for i in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs[1:], range(1, len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "VOWELS = \"aeiou\"\ndef vowels_count(s: str) -> int:\n    cnt = 0\n    for c in s:\n        if c.lower() in VOWELS or (c.lower() == \"y\" and len(s) == 1):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-(i + 1)] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            a = a // i\n            while a % i == 0:\n                cnt += 1\n                a //= i\n            a = a * i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    return x % n == 0 and is_simple_power(x // n, n)\n",
            "def is_cube(a: int) -> bool:\n    a0 = abs(a)\n    root = round(pow(a0, 1.0 / 3.0))\n    return root * root * root == a0\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\".__contains__)\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"0b{binary}\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return \" \".join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[0], -coord[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (sum(arr) % 2) == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    return min(lst[1:], default=None)\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        if (a + b == c) or (a + c == b) or (b + c == a):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr((ord(ch1) - ord(\"a\") + 2) % 26 + ord(\"a\"))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    return sum(int(x) for x in str(max(primes)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return [word for word in s.split(\", \") if word]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 1\n    return bin(r_avg)[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda x: all(map(lambda y: y % 2!= 0, map(int, str(x)))), x))\n",
            "digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nsorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\nreturn list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i]) for i in range(len(nums))]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(digits_sum(n) > 0 for n in arr)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for x in lst1 if x % 2!= 0)\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n    if even_count >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    words = test.split()\n    freq = Counter(words)\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if int(c) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in bin(num)[2:] if c == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w and w.lower().count(c for c in consonants if c in w) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num!= 1:\n        if num % 2!= 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m, d = map(int, date.split('-'))\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [len([c for c in txt if c.islower() and c.isdigit() and int(c) % 2 == 0])]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(x <= y for x, y in zip(lst, lst[1:])) and len(set(lst)) <= 1\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if sum(1 for x in arr if x < 0) % 2 else 1\n    return sign * sum(abs(x) for x in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i-1] + seq[i-2] + (i+3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(mul, map(int, filter(lambda x: int(x) % 2 == 1, str(n))), 1)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(pow(ceil(n), 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    return len(txt.split()[-1]) == 1 and txt.split()[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    if isinstance(o, int):\n        return float(o)\n    if isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    if a1 > b1:\n        return a1\n    return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r'\\s{3,}', '-', re.sub(r' ', '_', txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or not lst[0] or not lst[0][0].isalpha() or lst[0].isdigit():\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n // 10 in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    return [sum(int(d) % 2 == 0 for d in s), len(s) - sum(int(d) % 2 == 0 for d in s)]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n    return max_word\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators[:]\n    nums = operands[:]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(nums[i], nums[i + 1]))\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    stack = []\n    for ch in paren_string:\n        if ch == \"(\":\n            stack.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stack.pop()\n            current_group += ch\n            if not stack:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return [DURATIONS[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    if len(substring) > len(s):\n        return 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [int(num) for num in numbers.split() if num in num_dict]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(str(num) for num in num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            flipped += ch.swapcase()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += float(xs[i]) * math.pow(x, float(i))\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda i: i % 3 == 0, enumerate(l)), key=lambda x: x[1])\n    return [sorted_third[i // 3][1] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda x: x + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = Counter(l)\n    for num in l:\n        if -num in seen:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return ''.join(reversed(digits)) or '0'\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(a <= b for a, b in zip(diff, diff[1:])) or all(a >= b for a, b in zip(diff, diff[1:]))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return reduce(lambda x, y: x + y, range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(range(1, len(xs)))\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "VOWELS = \"aeiou\"\ndef vowels_count(s: str) -> int:\n    cnt = 0\n    for c in s:\n        if c.lower() in VOWELS or (c.lower() == \"y\" and len(s) == 1):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-(i + 1)] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if i * i > a:\n            break\n        if a % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    while x % n == 0:\n        x //= n\n    return x == 1\n",
            "def is_cube(a: int) -> bool:\n    return a > 0 and (a & (a - 1)) == 0 and a % 27 == 0\n",
            "def hex_key(num: str) -> int:\n    return sum(c in \"2357BD\" for c in num)\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= int(length ** 0.5):\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return \" \".join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0] == coord[1], coord[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if sum(arr) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    sorted_lst = SortedList(lst)\n    return sorted_lst[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split()\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(pow(n, 0.5)):\n        for i in range(2, int(pow(n, 0.5)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    return sum(map(int, str(max(primes))))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d) or all(k.islower() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if 2 <= n:\n        for num in range(2, n):\n            if all(num % p!= 0 for p in primes):\n                primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(\", \") if w]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    r_avg = (n + m) // 2\n    return f'{r_avg:0.0f}' if r_avg % 2 == 0 else None\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda n: all(map(lambda c: c % 2, map(int, str(n)))), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[i - 1] for i in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n+1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[:i] == arr[i+1:][::-1] and arr[i+1:] == arr[:i][::-1]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for x in lst1 if x % 2!= 0)\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split()\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, s1 == s[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if ord(c) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = max(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda row: ceil(sum(row) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in bin(num)[2:] if c == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    return [word for word in words if len(list(filter(lambda x: x in consonants, word.lower()))) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        index = word.index(i)\n        if vowels.find(word[index])!= -1 and vowels.find(word[index - 1]) == -1 and vowels.find(word[index + 1]) == -1:\n            return word[index]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    arr.sort()\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 0 and e % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) <= 1\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if sum(1 for x in arr if x < 0) % 2 else 1\n    return sign * sum(abs(x) for x in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 or i == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    if 2 <= n:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i // 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return len([i for i in str(n) if int(i) % 2 == 1])\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(round(x)) ** 2 for x in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i, x in enumerate(arr) if x < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    max_neg = max(negatives) if negatives else None\n    min_pos = min(positives) if positives else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Invalid type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\", maxsplit=1)\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or any(i.isdigit() for i in lst[0]):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5)):\n            if n % i == 0:\n                return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(is_prime, map(len, words)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda x: x > 10 and x % 2 == 1, filter(lambda x: x[0] in odds, nums))))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(int(x * x) for x in lst if x >= 0 and x % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - e) for g, e in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    s = str(abs(num))\n    even = sum(int(c) % 2 == 0 for c in s)\n    return [even, len(s) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    while num > 0:\n        for i in range(len(values)):\n            while num >= values[i]:\n                res += numerals[i]\n                num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    counts = Counter(words)\n    max_count = max(counts.values())\n    return [w for w, c in counts.items() if c == max_count][0]\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    nums = operands[:]\n    ops = operators[:]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(nums[i] ** nums[i + 1])\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens: str = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split(\" \")\n    result = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[:i] == s[:i][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(c1) ^ int(c2)) for c1, c2 in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(1, n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "DURATIONS = {\"o\": 4, \"o|\": 2, \".|\": 1}\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return [DURATIONS[note] for note in notes if note in DURATIONS]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    num_list = [num for num in numbers.split() if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.isalpha():\n            flipped.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            flipped.append(ch)\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[float], x: float) -> float:\n    res = 0\n    for i, c in enumerate(xs):\n        res += c * x ** i\n    return res\ndef find_zero(xs: List[float]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(filter(lambda _, i=0: i % 3 == 0, l))\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(filter(lambda x: x % 2 == 0, l))\n    return [sorted_even[i] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return ''.join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - ascii_lowercase.index(c) + 5) % 26 + ascii_lowercase.index(c)) for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(c) - ascii_lowercase.index(c) + 21) % 26 + ascii_lowercase.index(c)) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isdigit())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        if n not in freqs:\n            freqs[n] = 1\n        else:\n            freqs[n] += 1\n    good_vals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if not q:\n        return False\n    is_palindrome = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palindrome and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a+1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if x in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f'db{bin(dec)[2:]}db'\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5)):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [\"\".join(sorted(word)) for word in s.split()]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[0] == coord[1], coord[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = sorted(arr)\n    if len(sorted_arr) <= 1:\n        return sorted_arr\n    if (sorted_arr[0] + sorted_arr[-1]) % 2 == 0:\n        sorted_arr.sort(reverse=True)\n    else:\n        sorted_arr.sort()\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\". \")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d) or all(k.islower() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split() if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return str(int(r_avg))\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda num: all(map(lambda digit: digit % 2, map(str, num))), x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n+1))\n    return [sum(nums[:i]) if i % 2 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n+1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(int(d) for d in str(n)) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:len(arr)-i] and arr[i:] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for n in lst1 if n % 2!= 0)\n    even_count = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    words = [w for w in test.split() if w]\n    freq = Counter(words)\n    max_freq = max(freq.values())\n    return {k: v for k, v in freq.items() if v == max_freq}\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(sum(arr) / capacity) + 1, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(bin(num)[2:].replace('0', ''))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and n == len([c for c in w if c.lower() in consonants])]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and 1 <= d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and 1 <= d <= 30:\n        return True\n    if m == 2 and 1 <= d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.isalpha() and c.islower()]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(a <= b for a, b in zip(lst, lst[1:])) and len(set(lst)) == len(lst)\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and all(map(lambda x: x == 0 or x == 1, map(int, bin(length)[2:]))) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 * 2 - 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i > 0:\n                    temp.append(grid[i - 1][j])\n                if j > 0:\n                    temp.append(grid[i][j - 1])\n                if i < n - 1:\n                    temp.append(grid[i + 1][j])\n                if j < n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(int(i / 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + int((i + 3) / 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda a, b: a * b, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx: List[int] = []\n    close_idx: List[int] = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n ** 2 for n in map(int, map(math.ceil, lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split()[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    max_neg = max(negatives) if negatives else None\n    min_pos = min(positives) if positives else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, (int, float)):\n        return o\n    else:\n        raise TypeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(map(str.isdigit, lst[0])) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, e in enumerate(lst):\n        if i % 3 == 0:\n            result += e ** 2\n        elif i % 4 == 0:\n            result += e ** 3\n        else:\n            result += e\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.to_string()[0] in odds])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if ord(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return ''.join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n",
            "def find_max(words: List[str]) -> str:\n    word_counts = Counter(words)\n    max_count = max(word_counts.values())\n    return [w for w, c in word_counts.items() if c == max_count][0]\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators[:]\n    nums = operands[:]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    }
}